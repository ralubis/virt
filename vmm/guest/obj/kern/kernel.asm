
vmm/guest/obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
_head64:

# Save multiboot_info addr passed by bootloader
#ifdef VMM_GUEST
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
  100000:	b8 01 00 00 00       	mov    $0x1,%eax
    vmcall
  100005:	0f 01 c1             	vmcall 
#endif
	
    movl $multiboot_info, %eax
  100008:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  10000d:	89 18                	mov    %ebx,(%rax)
#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  10000f:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100014:	e8 cc 00 00 00       	callq  1000e5 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
  100019:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif
    movl %eax,%cr4
  10001e:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100021:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100026:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100028:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002d:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  10002f:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100034:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  100039:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  10003f:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100041:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100046:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  100049:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004c:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  10004f:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100054:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  100059:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005c:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  10005f:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100061:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100066:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006b:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006e:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100071:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100073:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100078:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007d:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100082:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100088:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008d:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  10008f:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100091:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100094:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100097:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009c:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  10009f:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a2:	75 e9                	jne    10008d <_head64+0x8d>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a4:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000a9:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ac:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b1:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b3:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b7:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000b9:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bc:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000bf:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c4:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000c9:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000ce:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d1:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d4:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000d9:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dc:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000de:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e3:	50                   	push   %rax

00000000001000e4 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e4:	cb                   	lret   

00000000001000e5 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e5:	9c                   	pushfq 
    popl %eax
  1000e6:	58                   	pop    %rax
    movl %eax,%ecx
  1000e7:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000e9:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ee:	50                   	push   %rax
    popfl
  1000ef:	9d                   	popfq  
    pushfl
  1000f0:	9c                   	pushfq 
    popl %eax
  1000f1:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f2:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f4:	74 1c                	je     100112 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f6:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fb:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fd:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100100:	72 10                	jb     100112 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100102:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100107:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  100109:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  10010f:	74 01                	je     100112 <verify_cpu_no_longmode>

    ret
  100111:	c3                   	retq   

0000000000100112 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100112:	eb fe                	jmp    100112 <verify_cpu_no_longmode>
  100114:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011b:	00 00 00 
  10011e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100125:	00 00 00 
  100128:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10012f:	00 00 00 
  100132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100139:	00 00 00 
  10013c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100143:	00 00 00 
  100146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014d:	00 00 00 
  100150:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100157:	00 00 00 
  10015a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100161:	00 00 00 
  100164:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016b:	00 00 00 
  10016e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100175:	00 00 00 
  100178:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10017f:	00 00 00 
  100182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100189:	00 00 00 
  10018c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100193:	00 00 00 
  100196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019d:	00 00 00 
  1001a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a7:	00 00 00 
  1001aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b1:	00 00 00 
  1001b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bb:	00 00 00 
  1001be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c5:	00 00 00 
  1001c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001cf:	00 00 00 
  1001d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d9:	00 00 00 
  1001dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e3:	00 00 00 
  1001e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ed:	00 00 00 
  1001f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f7:	00 00 00 
  1001fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100201:	00 00 00 
  100204:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020b:	00 00 00 
  10020e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100215:	00 00 00 
  100218:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10021f:	00 00 00 
  100222:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100229:	00 00 00 
  10022c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100233:	00 00 00 
  100236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023d:	00 00 00 
  100240:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100247:	00 00 00 
  10024a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100251:	00 00 00 
  100254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025b:	00 00 00 
  10025e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100265:	00 00 00 
  100268:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10026f:	00 00 00 
  100272:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100279:	00 00 00 
  10027c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100283:	00 00 00 
  100286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028d:	00 00 00 
  100290:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100297:	00 00 00 
  10029a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a1:	00 00 00 
  1002a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ab:	00 00 00 
  1002ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b5:	00 00 00 
  1002b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002bf:	00 00 00 
  1002c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c9:	00 00 00 
  1002cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d3:	00 00 00 
  1002d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002dd:	00 00 00 
  1002e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e7:	00 00 00 
  1002ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f1:	00 00 00 
  1002f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fb:	00 00 00 
  1002fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100305:	00 00 00 
  100308:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10030f:	00 00 00 
  100312:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100319:	00 00 00 
  10031c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100323:	00 00 00 
  100326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032d:	00 00 00 
  100330:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100337:	00 00 00 
  10033a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100341:	00 00 00 
  100344:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034b:	00 00 00 
  10034e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100355:	00 00 00 
  100358:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10035f:	00 00 00 
  100362:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100369:	00 00 00 
  10036c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100373:	00 00 00 
  100376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037d:	00 00 00 
  100380:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100387:	00 00 00 
  10038a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100391:	00 00 00 
  100394:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039b:	00 00 00 
  10039e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a5:	00 00 00 
  1003a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003af:	00 00 00 
  1003b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b9:	00 00 00 
  1003bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c3:	00 00 00 
  1003c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003cd:	00 00 00 
  1003d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d7:	00 00 00 
  1003da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e1:	00 00 00 
  1003e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003eb:	00 00 00 
  1003ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f5:	00 00 00 
  1003f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ff:	00 00 00 
  100402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100409:	00 00 00 
  10040c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100413:	00 00 00 
  100416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041d:	00 00 00 
  100420:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100427:	00 00 00 
  10042a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100431:	00 00 00 
  100434:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043b:	00 00 00 
  10043e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100445:	00 00 00 
  100448:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10044f:	00 00 00 
  100452:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100459:	00 00 00 
  10045c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100463:	00 00 00 
  100466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046d:	00 00 00 
  100470:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100477:	00 00 00 
  10047a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100481:	00 00 00 
  100484:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048b:	00 00 00 
  10048e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100495:	00 00 00 
  100498:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10049f:	00 00 00 
  1004a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a9:	00 00 00 
  1004ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b3:	00 00 00 
  1004b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004bd:	00 00 00 
  1004c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c7:	00 00 00 
  1004ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d1:	00 00 00 
  1004d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004db:	00 00 00 
  1004de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e5:	00 00 00 
  1004e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004ef:	00 00 00 
  1004f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f9:	00 00 00 
  1004fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100503:	00 00 00 
  100506:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050d:	00 00 00 
  100510:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100517:	00 00 00 
  10051a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100521:	00 00 00 
  100524:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052b:	00 00 00 
  10052e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100535:	00 00 00 
  100538:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10053f:	00 00 00 
  100542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100549:	00 00 00 
  10054c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100553:	00 00 00 
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055d:	00 00 00 
  100560:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100567:	00 00 00 
  10056a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100571:	00 00 00 
  100574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057b:	00 00 00 
  10057e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100585:	00 00 00 
  100588:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10058f:	00 00 00 
  100592:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100599:	00 00 00 
  10059c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a3:	00 00 00 
  1005a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ad:	00 00 00 
  1005b0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b7:	00 00 00 
  1005ba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c1:	00 00 00 
  1005c4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cb:	00 00 00 
  1005ce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d5:	00 00 00 
  1005d8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005df:	00 00 00 
  1005e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e9:	00 00 00 
  1005ec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f3:	00 00 00 
  1005f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fd:	00 00 00 
  100600:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100607:	00 00 00 
  10060a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100611:	00 00 00 
  100614:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061b:	00 00 00 
  10061e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100625:	00 00 00 
  100628:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10062f:	00 00 00 
  100632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100639:	00 00 00 
  10063c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100643:	00 00 00 
  100646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064d:	00 00 00 
  100650:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100657:	00 00 00 
  10065a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100661:	00 00 00 
  100664:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066b:	00 00 00 
  10066e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100675:	00 00 00 
  100678:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10067f:	00 00 00 
  100682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100689:	00 00 00 
  10068c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100693:	00 00 00 
  100696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069d:	00 00 00 
  1006a0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a7:	00 00 00 
  1006aa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b1:	00 00 00 
  1006b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bb:	00 00 00 
  1006be:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c5:	00 00 00 
  1006c8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006cf:	00 00 00 
  1006d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d9:	00 00 00 
  1006dc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e3:	00 00 00 
  1006e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ed:	00 00 00 
  1006f0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f7:	00 00 00 
  1006fa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100701:	00 00 00 
  100704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070b:	00 00 00 
  10070e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100715:	00 00 00 
  100718:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10071f:	00 00 00 
  100722:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100729:	00 00 00 
  10072c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100733:	00 00 00 
  100736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073d:	00 00 00 
  100740:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100747:	00 00 00 
  10074a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100751:	00 00 00 
  100754:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075b:	00 00 00 
  10075e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100765:	00 00 00 
  100768:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10076f:	00 00 00 
  100772:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100779:	00 00 00 
  10077c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100783:	00 00 00 
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078d:	00 00 00 
  100790:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100797:	00 00 00 
  10079a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a1:	00 00 00 
  1007a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ab:	00 00 00 
  1007ae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b5:	00 00 00 
  1007b8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007bf:	00 00 00 
  1007c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c9:	00 00 00 
  1007cc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d3:	00 00 00 
  1007d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007dd:	00 00 00 
  1007e0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e7:	00 00 00 
  1007ea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f1:	00 00 00 
  1007f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fb:	00 00 00 
  1007fe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100805:	00 00 00 
  100808:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10080f:	00 00 00 
  100812:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100819:	00 00 00 
  10081c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100823:	00 00 00 
  100826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082d:	00 00 00 
  100830:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100837:	00 00 00 
  10083a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100841:	00 00 00 
  100844:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084b:	00 00 00 
  10084e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100855:	00 00 00 
  100858:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10085f:	00 00 00 
  100862:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100869:	00 00 00 
  10086c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100873:	00 00 00 
  100876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087d:	00 00 00 
  100880:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100887:	00 00 00 
  10088a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100891:	00 00 00 
  100894:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089b:	00 00 00 
  10089e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a5:	00 00 00 
  1008a8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008af:	00 00 00 
  1008b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b9:	00 00 00 
  1008bc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c3:	00 00 00 
  1008c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008cd:	00 00 00 
  1008d0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d7:	00 00 00 
  1008da:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e1:	00 00 00 
  1008e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008eb:	00 00 00 
  1008ee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f5:	00 00 00 
  1008f8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ff:	00 00 00 
  100902:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100909:	00 00 00 
  10090c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100913:	00 00 00 
  100916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091d:	00 00 00 
  100920:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100927:	00 00 00 
  10092a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100931:	00 00 00 
  100934:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093b:	00 00 00 
  10093e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100945:	00 00 00 
  100948:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10094f:	00 00 00 
  100952:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100959:	00 00 00 
  10095c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100963:	00 00 00 
  100966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096d:	00 00 00 
  100970:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100977:	00 00 00 
  10097a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100981:	00 00 00 
  100984:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098b:	00 00 00 
  10098e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100995:	00 00 00 
  100998:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10099f:	00 00 00 
  1009a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a9:	00 00 00 
  1009ac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b3:	00 00 00 
  1009b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009bd:	00 00 00 
  1009c0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c7:	00 00 00 
  1009ca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d1:	00 00 00 
  1009d4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009db:	00 00 00 
  1009de:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e5:	00 00 00 
  1009e8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009ef:	00 00 00 
  1009f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f9:	00 00 00 
  1009fc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a03:	00 00 00 
  100a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0d:	00 00 00 
  100a10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a17:	00 00 00 
  100a1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a21:	00 00 00 
  100a24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2b:	00 00 00 
  100a2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a35:	00 00 00 
  100a38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a3f:	00 00 00 
  100a42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a49:	00 00 00 
  100a4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a53:	00 00 00 
  100a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5d:	00 00 00 
  100a60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a67:	00 00 00 
  100a6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a71:	00 00 00 
  100a74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7b:	00 00 00 
  100a7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a85:	00 00 00 
  100a88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a8f:	00 00 00 
  100a92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a99:	00 00 00 
  100a9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa3:	00 00 00 
  100aa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aad:	00 00 00 
  100ab0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab7:	00 00 00 
  100aba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac1:	00 00 00 
  100ac4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acb:	00 00 00 
  100ace:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad5:	00 00 00 
  100ad8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100adf:	00 00 00 
  100ae2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae9:	00 00 00 
  100aec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af3:	00 00 00 
  100af6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afd:	00 00 00 
  100b00:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b07:	00 00 00 
  100b0a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b11:	00 00 00 
  100b14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1b:	00 00 00 
  100b1e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b25:	00 00 00 
  100b28:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b2f:	00 00 00 
  100b32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b39:	00 00 00 
  100b3c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b43:	00 00 00 
  100b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4d:	00 00 00 
  100b50:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b57:	00 00 00 
  100b5a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b61:	00 00 00 
  100b64:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6b:	00 00 00 
  100b6e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b75:	00 00 00 
  100b78:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b7f:	00 00 00 
  100b82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b89:	00 00 00 
  100b8c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b93:	00 00 00 
  100b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9d:	00 00 00 
  100ba0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba7:	00 00 00 
  100baa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb1:	00 00 00 
  100bb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbb:	00 00 00 
  100bbe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc5:	00 00 00 
  100bc8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bcf:	00 00 00 
  100bd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd9:	00 00 00 
  100bdc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be3:	00 00 00 
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bed:	00 00 00 
  100bf0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf7:	00 00 00 
  100bfa:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c01:	00 00 00 
  100c04:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0b:	00 00 00 
  100c0e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c15:	00 00 00 
  100c18:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c1f:	00 00 00 
  100c22:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c29:	00 00 00 
  100c2c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c33:	00 00 00 
  100c36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3d:	00 00 00 
  100c40:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c47:	00 00 00 
  100c4a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c51:	00 00 00 
  100c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5b:	00 00 00 
  100c5e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c65:	00 00 00 
  100c68:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c6f:	00 00 00 
  100c72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c79:	00 00 00 
  100c7c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c83:	00 00 00 
  100c86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8d:	00 00 00 
  100c90:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c97:	00 00 00 
  100c9a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca1:	00 00 00 
  100ca4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cab:	00 00 00 
  100cae:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb5:	00 00 00 
  100cb8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cbf:	00 00 00 
  100cc2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc9:	00 00 00 
  100ccc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd3:	00 00 00 
  100cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cdd:	00 00 00 
  100ce0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce7:	00 00 00 
  100cea:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf1:	00 00 00 
  100cf4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfb:	00 00 00 
  100cfe:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d05:	00 00 00 
  100d08:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d0f:	00 00 00 
  100d12:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d19:	00 00 00 
  100d1c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d23:	00 00 00 
  100d26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2d:	00 00 00 
  100d30:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d37:	00 00 00 
  100d3a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d41:	00 00 00 
  100d44:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4b:	00 00 00 
  100d4e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d55:	00 00 00 
  100d58:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d5f:	00 00 00 
  100d62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d69:	00 00 00 
  100d6c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d73:	00 00 00 
  100d76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7d:	00 00 00 
  100d80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d87:	00 00 00 
  100d8a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d91:	00 00 00 
  100d94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9b:	00 00 00 
  100d9e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da5:	00 00 00 
  100da8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100daf:	00 00 00 
  100db2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db9:	00 00 00 
  100dbc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc3:	00 00 00 
  100dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dcd:	00 00 00 
  100dd0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd7:	00 00 00 
  100dda:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de1:	00 00 00 
  100de4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100deb:	00 00 00 
  100dee:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df5:	00 00 00 
  100df8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dff:	00 00 00 
  100e02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e09:	00 00 00 
  100e0c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e13:	00 00 00 
  100e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1d:	00 00 00 
  100e20:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e27:	00 00 00 
  100e2a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e31:	00 00 00 
  100e34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3b:	00 00 00 
  100e3e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e45:	00 00 00 
  100e48:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e4f:	00 00 00 
  100e52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e59:	00 00 00 
  100e5c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e63:	00 00 00 
  100e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6d:	00 00 00 
  100e70:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e77:	00 00 00 
  100e7a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e81:	00 00 00 
  100e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8b:	00 00 00 
  100e8e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e95:	00 00 00 
  100e98:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e9f:	00 00 00 
  100ea2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea9:	00 00 00 
  100eac:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb3:	00 00 00 
  100eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebd:	00 00 00 
  100ec0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec7:	00 00 00 
  100eca:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed1:	00 00 00 
  100ed4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edb:	00 00 00 
  100ede:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee5:	00 00 00 
  100ee8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eef:	00 00 00 
  100ef2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef9:	00 00 00 
  100efc:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f03:	00 00 00 
  100f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0d:	00 00 00 
  100f10:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f17:	00 00 00 
  100f1a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f21:	00 00 00 
  100f24:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2b:	00 00 00 
  100f2e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f35:	00 00 00 
  100f38:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f3f:	00 00 00 
  100f42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f49:	00 00 00 
  100f4c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f53:	00 00 00 
  100f56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5d:	00 00 00 
  100f60:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f67:	00 00 00 
  100f6a:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f71:	00 00 00 
  100f74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7b:	00 00 00 
  100f7e:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f85:	00 00 00 
  100f88:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f8f:	00 00 00 
  100f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f99:	00 00 00 
  100f9c:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa3:	00 00 00 
  100fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fad:	00 00 00 
  100fb0:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb7:	00 00 00 
  100fba:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc1:	00 00 00 
  100fc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcb:	00 00 00 
  100fce:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd5:	00 00 00 
  100fd8:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fdf:	00 00 00 
  100fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe9:	00 00 00 
  100fec:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff3:	00 00 00 
  100ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ffd:	00 00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 c0 22 04 80 	movabs $0x800422c038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 c0 22 04 80 	movabs $0x800422c000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 a0 01 20 04 80 	movabs $0x80042001a0,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	53                   	push   %rbx
  800420005d:	48 83 ec 38          	sub    $0x38,%rsp
  8004200061:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004200064:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004200068:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800420006c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200070:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004200074:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200077:	0f a2                	cpuid  
  8004200079:	89 de                	mov    %ebx,%esi
  800420007b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420007e:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004200081:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004200084:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004200087:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420008c:	74 09                	je     8004200097 <cpuid+0x3f>
		*eaxp = eax;
  800420008e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004200092:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200095:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004200097:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420009c:	74 09                	je     80042000a7 <cpuid+0x4f>
		*ebxp = ebx;
  800420009e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042000a2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042000a5:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  80042000a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042000ac:	74 09                	je     80042000b7 <cpuid+0x5f>
		*ecxp = ecx;
  80042000ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042000b2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042000b5:	89 10                	mov    %edx,(%rax)
	if (edxp)
  80042000b7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042000bc:	74 09                	je     80042000c7 <cpuid+0x6f>
		*edxp = edx;
  80042000be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042000c2:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042000c5:	89 10                	mov    %edx,(%rax)
}
  80042000c7:	90                   	nop
  80042000c8:	48 83 c4 38          	add    $0x38,%rsp
  80042000cc:	5b                   	pop    %rbx
  80042000cd:	5d                   	pop    %rbp
  80042000ce:	c3                   	retq   

00000080042000cf <xchg>:

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042000cf:	55                   	push   %rbp
  80042000d0:	48 89 e5             	mov    %rsp,%rbp
  80042000d3:	48 83 ec 20          	sub    $0x20,%rsp
  80042000d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042000db:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042000de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042000e2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042000e5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042000e9:	f0 87 02             	lock xchg %eax,(%rdx)
  80042000ec:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042000ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042000f2:	c9                   	leaveq 
  80042000f3:	c3                   	retq   

00000080042000f4 <lock_kernel>:
  80042000f4:	55                   	push   %rbp
  80042000f5:	48 89 e5             	mov    %rsp,%rbp
  80042000f8:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042000ff:	00 00 00 
  8004200102:	48 b8 2e 74 21 04 80 	movabs $0x800421742e,%rax
  8004200109:	00 00 00 
  800420010c:	ff d0                	callq  *%rax
  800420010e:	90                   	nop
  800420010f:	5d                   	pop    %rbp
  8004200110:	c3                   	retq   

0000008004200111 <vmcall>:
  8004200111:	55                   	push   %rbp
  8004200112:	48 89 e5             	mov    %rsp,%rbp
  8004200115:	53                   	push   %rbx
  8004200116:	48 83 ec 48          	sub    $0x48,%rsp
  800420011a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420011d:	89 75 d8             	mov    %esi,-0x28(%rbp)
  8004200120:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004200124:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004200128:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  800420012c:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  8004200130:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200133:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004200137:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800420013b:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  800420013f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004200143:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004200147:	4c 89 c3             	mov    %r8,%rbx
  800420014a:	0f 01 c1             	vmcall 
  800420014d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004200151:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004200155:	74 3e                	je     8004200195 <vmcall+0x84>
  8004200157:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420015c:	7e 37                	jle    8004200195 <vmcall+0x84>
  800420015e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004200162:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200165:	49 89 d0             	mov    %rdx,%r8
  8004200168:	89 c1                	mov    %eax,%ecx
  800420016a:	48 ba a0 89 21 04 80 	movabs $0x80042189a0,%rdx
  8004200171:	00 00 00 
  8004200174:	be 35 00 00 00       	mov    $0x35,%esi
  8004200179:	48 bf bc 89 21 04 80 	movabs $0x80042189bc,%rdi
  8004200180:	00 00 00 
  8004200183:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200188:	49 b9 ec 05 20 04 80 	movabs $0x80042005ec,%r9
  800420018f:	00 00 00 
  8004200192:	41 ff d1             	callq  *%r9
  8004200195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004200199:	48 83 c4 48          	add    $0x48,%rsp
  800420019d:	5b                   	pop    %rbx
  800420019e:	5d                   	pop    %rbp
  800420019f:	c3                   	retq   

00000080042001a0 <i386_init>:
  80042001a0:	55                   	push   %rbp
  80042001a1:	48 89 e5             	mov    %rsp,%rbp
  80042001a4:	48 83 ec 10          	sub    $0x10,%rsp
  80042001a8:	48 ba 10 00 6e 04 80 	movabs $0x80046e0010,%rdx
  80042001af:	00 00 00 
  80042001b2:	48 b8 68 d7 49 04 80 	movabs $0x800449d768,%rax
  80042001b9:	00 00 00 
  80042001bc:	48 29 c2             	sub    %rax,%rdx
  80042001bf:	48 89 d0             	mov    %rdx,%rax
  80042001c2:	48 89 c2             	mov    %rax,%rdx
  80042001c5:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ca:	48 bf 68 d7 49 04 80 	movabs $0x800449d768,%rdi
  80042001d1:	00 00 00 
  80042001d4:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042001db:	00 00 00 
  80042001de:	ff d0                	callq  *%rax
  80042001e0:	48 b8 fa 12 20 04 80 	movabs $0x80042012fa,%rax
  80042001e7:	00 00 00 
  80042001ea:	ff d0                	callq  *%rax
  80042001ec:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042001f1:	48 bf cb 89 21 04 80 	movabs $0x80042189cb,%rdi
  80042001f8:	00 00 00 
  80042001fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200200:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004200207:	00 00 00 
  800420020a:	ff d2                	callq  *%rdx
  800420020c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200213:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004200217:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420021d:	48 89 c1             	mov    %rax,%rcx
  8004200220:	ba 00 00 00 00       	mov    $0x0,%edx
  8004200225:	be 00 00 00 00       	mov    $0x0,%esi
  800420022a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420022f:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  8004200236:	00 00 00 
  8004200239:	ff d0                	callq  *%rax
  800420023b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420023e:	83 e0 20             	and    $0x20,%eax
  8004200241:	85 c0                	test   %eax,%eax
  8004200243:	74 2a                	je     800420026f <i386_init+0xcf>
  8004200245:	48 ba e8 89 21 04 80 	movabs $0x80042189e8,%rdx
  800420024c:	00 00 00 
  800420024f:	be 68 00 00 00       	mov    $0x68,%esi
  8004200254:	48 bf bc 89 21 04 80 	movabs $0x80042189bc,%rdi
  800420025b:	00 00 00 
  800420025e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200263:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420026a:	00 00 00 
  800420026d:	ff d1                	callq  *%rcx
  800420026f:	48 bf 10 8a 21 04 80 	movabs $0x8004218a10,%rdi
  8004200276:	00 00 00 
  8004200279:	b8 00 00 00 00       	mov    $0x0,%eax
  800420027e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004200285:	00 00 00 
  8004200288:	ff d2                	callq  *%rdx
  800420028a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420028f:	48 ba 88 27 20 04 80 	movabs $0x8004202788,%rdx
  8004200296:	00 00 00 
  8004200299:	ff d2                	callq  *%rdx
  800420029b:	48 b8 d7 80 20 04 80 	movabs $0x80042080d7,%rax
  80042002a2:	00 00 00 
  80042002a5:	ff d0                	callq  *%rax
  80042002a7:	48 b8 4d 97 20 04 80 	movabs $0x800420974d,%rax
  80042002ae:	00 00 00 
  80042002b1:	ff d0                	callq  *%rax
  80042002b3:	48 b8 cf 92 20 04 80 	movabs $0x80042092cf,%rax
  80042002ba:	00 00 00 
  80042002bd:	ff d0                	callq  *%rax
  80042002bf:	48 b8 f4 00 20 04 80 	movabs $0x80042000f4,%rax
  80042002c6:	00 00 00 
  80042002c9:	ff d0                	callq  *%rax
  80042002cb:	be 01 00 00 00       	mov    $0x1,%esi
  80042002d0:	48 bf c8 62 2b 04 80 	movabs $0x80042b62c8,%rdi
  80042002d7:	00 00 00 
  80042002da:	48 b8 7c 89 20 04 80 	movabs $0x800420897c,%rax
  80042002e1:	00 00 00 
  80042002e4:	ff d0                	callq  *%rax
  80042002e6:	be 00 00 00 00       	mov    $0x0,%esi
  80042002eb:	48 bf 30 e0 29 04 80 	movabs $0x800429e030,%rdi
  80042002f2:	00 00 00 
  80042002f5:	48 b8 7c 89 20 04 80 	movabs $0x800420897c,%rax
  80042002fc:	00 00 00 
  80042002ff:	ff d0                	callq  *%rax
  8004200301:	48 b8 28 11 20 04 80 	movabs $0x8004201128,%rax
  8004200308:	00 00 00 
  800420030b:	ff d0                	callq  *%rax
  800420030d:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  8004200314:	00 00 00 
  8004200317:	ff d0                	callq  *%rax

0000008004200319 <boot_aps>:
  8004200319:	55                   	push   %rbp
  800420031a:	48 89 e5             	mov    %rsp,%rbp
  800420031d:	48 83 ec 30          	sub    $0x30,%rsp
  8004200321:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200328:	00 
  8004200329:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420032d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200331:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200334:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200337:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420033e:	00 00 00 
  8004200341:	48 8b 00             	mov    (%rax),%rax
  8004200344:	48 39 c2             	cmp    %rax,%rdx
  8004200347:	72 32                	jb     800420037b <boot_aps+0x62>
  8004200349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420034d:	48 89 c1             	mov    %rax,%rcx
  8004200350:	48 ba 38 8a 21 04 80 	movabs $0x8004218a38,%rdx
  8004200357:	00 00 00 
  800420035a:	be 01 01 00 00       	mov    $0x101,%esi
  800420035f:	48 bf bc 89 21 04 80 	movabs $0x80042189bc,%rdi
  8004200366:	00 00 00 
  8004200369:	b8 00 00 00 00       	mov    $0x0,%eax
  800420036e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004200375:	00 00 00 
  8004200378:	41 ff d0             	callq  *%r8
  800420037b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200382:	00 00 00 
  8004200385:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200389:	48 01 d0             	add    %rdx,%rax
  800420038c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200390:	48 ba 6e 65 21 04 80 	movabs $0x800421656e,%rdx
  8004200397:	00 00 00 
  800420039a:	48 b8 88 64 21 04 80 	movabs $0x8004216488,%rax
  80042003a1:	00 00 00 
  80042003a4:	48 29 c2             	sub    %rax,%rdx
  80042003a7:	48 89 d0             	mov    %rdx,%rax
  80042003aa:	48 89 c2             	mov    %rax,%rdx
  80042003ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042003b1:	48 be 88 64 21 04 80 	movabs $0x8004216488,%rsi
  80042003b8:	00 00 00 
  80042003bb:	48 89 c7             	mov    %rax,%rdi
  80042003be:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  80042003c5:	00 00 00 
  80042003c8:	ff d0                	callq  *%rax
  80042003ca:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  80042003d1:	00 00 00 
  80042003d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042003d8:	e9 13 01 00 00       	jmpq   80042004f0 <boot_aps+0x1d7>
  80042003dd:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042003e4:	00 00 00 
  80042003e7:	ff d0                	callq  *%rax
  80042003e9:	48 98                	cltq   
  80042003eb:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ef:	48 89 c2             	mov    %rax,%rdx
  80042003f2:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f6:	48 01 c2             	add    %rax,%rdx
  80042003f9:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  8004200400:	00 00 00 
  8004200403:	48 01 d0             	add    %rdx,%rax
  8004200406:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420040a:	0f 84 d7 00 00 00    	je     80042004e7 <boot_aps+0x1ce>
  8004200410:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200414:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420041b:	00 00 00 
  800420041e:	48 29 c2             	sub    %rax,%rdx
  8004200421:	48 89 d0             	mov    %rdx,%rax
  8004200424:	48 c1 f8 03          	sar    $0x3,%rax
  8004200428:	48 89 c2             	mov    %rax,%rdx
  800420042b:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200432:	f0 f0 f0 
  8004200435:	48 0f af c2          	imul   %rdx,%rax
  8004200439:	48 c1 e0 10          	shl    $0x10,%rax
  800420043d:	48 89 c2             	mov    %rax,%rdx
  8004200440:	48 b8 00 00 6a 04 80 	movabs $0x80046a0000,%rax
  8004200447:	00 00 00 
  800420044a:	48 01 d0             	add    %rdx,%rax
  800420044d:	48 8d 90 00 00 01 00 	lea    0x10000(%rax),%rdx
  8004200454:	48 b8 d8 d5 69 04 80 	movabs $0x800469d5d8,%rax
  800420045b:	00 00 00 
  800420045e:	48 89 10             	mov    %rdx,(%rax)
  8004200461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200465:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200469:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200470:	00 00 00 
  8004200473:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200477:	77 32                	ja     80042004ab <boot_aps+0x192>
  8004200479:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420047d:	48 89 c1             	mov    %rax,%rcx
  8004200480:	48 ba 60 8a 21 04 80 	movabs $0x8004218a60,%rdx
  8004200487:	00 00 00 
  800420048a:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420048f:	48 bf bc 89 21 04 80 	movabs $0x80042189bc,%rdi
  8004200496:	00 00 00 
  8004200499:	b8 00 00 00 00       	mov    $0x0,%eax
  800420049e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042004a5:	00 00 00 
  80042004a8:	41 ff d0             	callq  *%r8
  80042004ab:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042004b2:	ff ff ff 
  80042004b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042004b9:	48 01 d0             	add    %rdx,%rax
  80042004bc:	89 c2                	mov    %eax,%edx
  80042004be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004c2:	0f b6 00             	movzbl (%rax),%eax
  80042004c5:	0f b6 c0             	movzbl %al,%eax
  80042004c8:	89 d6                	mov    %edx,%esi
  80042004ca:	89 c7                	mov    %eax,%edi
  80042004cc:	48 b8 0f 71 21 04 80 	movabs $0x800421710f,%rax
  80042004d3:	00 00 00 
  80042004d6:	ff d0                	callq  *%rax
  80042004d8:	90                   	nop
  80042004d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042004dd:	8b 40 04             	mov    0x4(%rax),%eax
  80042004e0:	83 f8 01             	cmp    $0x1,%eax
  80042004e3:	75 f4                	jne    80042004d9 <boot_aps+0x1c0>
  80042004e5:	eb 01                	jmp    80042004e8 <boot_aps+0x1cf>
  80042004e7:	90                   	nop
  80042004e8:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042004ef:	00 
  80042004f0:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  80042004f7:	00 00 00 
  80042004fa:	8b 00                	mov    (%rax),%eax
  80042004fc:	48 98                	cltq   
  80042004fe:	48 c1 e0 03          	shl    $0x3,%rax
  8004200502:	48 89 c2             	mov    %rax,%rdx
  8004200505:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200509:	48 01 c2             	add    %rax,%rdx
  800420050c:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  8004200513:	00 00 00 
  8004200516:	48 01 d0             	add    %rdx,%rax
  8004200519:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420051d:	0f 87 ba fe ff ff    	ja     80042003dd <boot_aps+0xc4>
  8004200523:	90                   	nop
  8004200524:	c9                   	leaveq 
  8004200525:	c3                   	retq   

0000008004200526 <mp_main>:
  8004200526:	55                   	push   %rbp
  8004200527:	48 89 e5             	mov    %rsp,%rbp
  800420052a:	48 83 ec 10          	sub    $0x10,%rsp
  800420052e:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004200535:	00 00 00 
  8004200538:	48 8b 00             	mov    (%rax),%rax
  800420053b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420053f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200543:	0f 22 d8             	mov    %rax,%cr3
  8004200546:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420054d:	00 00 00 
  8004200550:	ff d0                	callq  *%rax
  8004200552:	89 c6                	mov    %eax,%esi
  8004200554:	48 bf 84 8a 21 04 80 	movabs $0x8004218a84,%rdi
  800420055b:	00 00 00 
  800420055e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200563:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420056a:	00 00 00 
  800420056d:	ff d2                	callq  *%rdx
  800420056f:	48 b8 a1 6e 21 04 80 	movabs $0x8004216ea1,%rax
  8004200576:	00 00 00 
  8004200579:	ff d0                	callq  *%rax
  800420057b:	48 b8 a5 81 20 04 80 	movabs $0x80042081a5,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	48 b8 63 be 20 04 80 	movabs $0x800420be63,%rax
  800420058e:	00 00 00 
  8004200591:	ff d0                	callq  *%rax
  8004200593:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420059a:	00 00 00 
  800420059d:	ff d0                	callq  *%rax
  800420059f:	48 98                	cltq   
  80042005a1:	48 c1 e0 03          	shl    $0x3,%rax
  80042005a5:	48 89 c2             	mov    %rax,%rdx
  80042005a8:	48 c1 e2 04          	shl    $0x4,%rdx
  80042005ac:	48 01 d0             	add    %rdx,%rax
  80042005af:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042005b6:	00 00 00 
  80042005b9:	48 01 d0             	add    %rdx,%rax
  80042005bc:	48 83 c0 04          	add    $0x4,%rax
  80042005c0:	be 01 00 00 00       	mov    $0x1,%esi
  80042005c5:	48 89 c7             	mov    %rax,%rdi
  80042005c8:	48 b8 cf 00 20 04 80 	movabs $0x80042000cf,%rax
  80042005cf:	00 00 00 
  80042005d2:	ff d0                	callq  *%rax
  80042005d4:	48 b8 f4 00 20 04 80 	movabs $0x80042000f4,%rax
  80042005db:	00 00 00 
  80042005de:	ff d0                	callq  *%rax
  80042005e0:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  80042005e7:	00 00 00 
  80042005ea:	ff d0                	callq  *%rax

00000080042005ec <_panic>:
  80042005ec:	55                   	push   %rbp
  80042005ed:	48 89 e5             	mov    %rsp,%rbp
  80042005f0:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042005f7:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042005fe:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200604:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420060b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004200612:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200619:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200620:	84 c0                	test   %al,%al
  8004200622:	74 20                	je     8004200644 <_panic+0x58>
  8004200624:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200628:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420062c:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200630:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200634:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200638:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420063c:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200640:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200644:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  800420064b:	00 00 00 
  800420064e:	48 8b 00             	mov    (%rax),%rax
  8004200651:	48 85 c0             	test   %rax,%rax
  8004200654:	74 05                	je     800420065b <_panic+0x6f>
  8004200656:	e9 ba 00 00 00       	jmpq   8004200715 <_panic+0x129>
  800420065b:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  8004200662:	00 00 00 
  8004200665:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420066c:	48 89 10             	mov    %rdx,(%rax)
  800420066f:	fa                   	cli    
  8004200670:	fc                   	cld    
  8004200671:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200678:	00 00 00 
  800420067b:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200682:	00 00 00 
  8004200685:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200689:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200690:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200697:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420069e:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042006a5:	00 00 00 
  80042006a8:	ff d0                	callq  *%rax
  80042006aa:	89 c6                	mov    %eax,%esi
  80042006ac:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042006b2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042006b9:	89 d1                	mov    %edx,%ecx
  80042006bb:	48 89 c2             	mov    %rax,%rdx
  80042006be:	48 bf a0 8a 21 04 80 	movabs $0x8004218aa0,%rdi
  80042006c5:	00 00 00 
  80042006c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006cd:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  80042006d4:	00 00 00 
  80042006d7:	41 ff d0             	callq  *%r8
  80042006da:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006e1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006e8:	48 89 d6             	mov    %rdx,%rsi
  80042006eb:	48 89 c7             	mov    %rax,%rdi
  80042006ee:	48 b8 75 95 20 04 80 	movabs $0x8004209575,%rax
  80042006f5:	00 00 00 
  80042006f8:	ff d0                	callq  *%rax
  80042006fa:	48 bf c2 8a 21 04 80 	movabs $0x8004218ac2,%rdi
  8004200701:	00 00 00 
  8004200704:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200709:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004200710:	00 00 00 
  8004200713:	ff d2                	callq  *%rdx
  8004200715:	bf 00 00 00 00       	mov    $0x0,%edi
  800420071a:	48 b8 b9 1b 20 04 80 	movabs $0x8004201bb9,%rax
  8004200721:	00 00 00 
  8004200724:	ff d0                	callq  *%rax
  8004200726:	eb ed                	jmp    8004200715 <_panic+0x129>

0000008004200728 <_warn>:
  8004200728:	55                   	push   %rbp
  8004200729:	48 89 e5             	mov    %rsp,%rbp
  800420072c:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200733:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420073a:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200740:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200747:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420074e:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200755:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420075c:	84 c0                	test   %al,%al
  800420075e:	74 20                	je     8004200780 <_warn+0x58>
  8004200760:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200764:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200768:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420076c:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200770:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200774:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200778:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420077c:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200780:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200787:	00 00 00 
  800420078a:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200791:	00 00 00 
  8004200794:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200798:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420079f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042007a6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042007ad:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  80042007b3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042007ba:	48 89 c6             	mov    %rax,%rsi
  80042007bd:	48 bf c4 8a 21 04 80 	movabs $0x8004218ac4,%rdi
  80042007c4:	00 00 00 
  80042007c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042007cc:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  80042007d3:	00 00 00 
  80042007d6:	ff d1                	callq  *%rcx
  80042007d8:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042007df:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042007e6:	48 89 d6             	mov    %rdx,%rsi
  80042007e9:	48 89 c7             	mov    %rax,%rdi
  80042007ec:	48 b8 75 95 20 04 80 	movabs $0x8004209575,%rax
  80042007f3:	00 00 00 
  80042007f6:	ff d0                	callq  *%rax
  80042007f8:	48 bf c2 8a 21 04 80 	movabs $0x8004218ac2,%rdi
  80042007ff:	00 00 00 
  8004200802:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200807:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420080e:	00 00 00 
  8004200811:	ff d2                	callq  *%rdx
  8004200813:	90                   	nop
  8004200814:	c9                   	leaveq 
  8004200815:	c3                   	retq   

0000008004200816 <delay>:
  8004200816:	55                   	push   %rbp
  8004200817:	48 89 e5             	mov    %rsp,%rbp
  800420081a:	48 83 ec 20          	sub    $0x20,%rsp
  800420081e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200825:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200828:	89 c2                	mov    %eax,%edx
  800420082a:	ec                   	in     (%dx),%al
  800420082b:	88 45 ec             	mov    %al,-0x14(%rbp)
  800420082e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%rbp)
  8004200835:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200838:	89 c2                	mov    %eax,%edx
  800420083a:	ec                   	in     (%dx),%al
  800420083b:	88 45 ed             	mov    %al,-0x13(%rbp)
  800420083e:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200845:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200848:	89 c2                	mov    %eax,%edx
  800420084a:	ec                   	in     (%dx),%al
  800420084b:	88 45 ee             	mov    %al,-0x12(%rbp)
  800420084e:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%rbp)
  8004200855:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200858:	89 c2                	mov    %eax,%edx
  800420085a:	ec                   	in     (%dx),%al
  800420085b:	88 45 ef             	mov    %al,-0x11(%rbp)
  800420085e:	90                   	nop
  800420085f:	c9                   	leaveq 
  8004200860:	c3                   	retq   

0000008004200861 <serial_proc_data>:
  8004200861:	55                   	push   %rbp
  8004200862:	48 89 e5             	mov    %rsp,%rbp
  8004200865:	48 83 ec 10          	sub    $0x10,%rsp
  8004200869:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)
  8004200870:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200873:	89 c2                	mov    %eax,%edx
  8004200875:	ec                   	in     (%dx),%al
  8004200876:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200879:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420087d:	0f b6 c0             	movzbl %al,%eax
  8004200880:	83 e0 01             	and    $0x1,%eax
  8004200883:	85 c0                	test   %eax,%eax
  8004200885:	75 07                	jne    800420088e <serial_proc_data+0x2d>
  8004200887:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420088c:	eb 17                	jmp    80042008a5 <serial_proc_data+0x44>
  800420088e:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200895:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200898:	89 c2                	mov    %eax,%edx
  800420089a:	ec                   	in     (%dx),%al
  800420089b:	88 45 f6             	mov    %al,-0xa(%rbp)
	return data;
  800420089e:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  80042008a2:	0f b6 c0             	movzbl %al,%eax
  80042008a5:	c9                   	leaveq 
  80042008a6:	c3                   	retq   

00000080042008a7 <serial_intr>:
  80042008a7:	55                   	push   %rbp
  80042008a8:	48 89 e5             	mov    %rsp,%rbp
  80042008ab:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  80042008b2:	00 00 00 
  80042008b5:	0f b6 00             	movzbl (%rax),%eax
  80042008b8:	84 c0                	test   %al,%al
  80042008ba:	74 16                	je     80042008d2 <serial_intr+0x2b>
  80042008bc:	48 bf 61 08 20 04 80 	movabs $0x8004200861,%rdi
  80042008c3:	00 00 00 
  80042008c6:	48 b8 7b 11 20 04 80 	movabs $0x800420117b,%rax
  80042008cd:	00 00 00 
  80042008d0:	ff d0                	callq  *%rax
  80042008d2:	90                   	nop
  80042008d3:	5d                   	pop    %rbp
  80042008d4:	c3                   	retq   

00000080042008d5 <serial_putc>:
  80042008d5:	55                   	push   %rbp
  80042008d6:	48 89 e5             	mov    %rsp,%rbp
  80042008d9:	48 83 ec 18          	sub    $0x18,%rsp
  80042008dd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042008e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042008e7:	eb 10                	jmp    80042008f9 <serial_putc+0x24>
  80042008e9:	48 b8 16 08 20 04 80 	movabs $0x8004200816,%rax
  80042008f0:	00 00 00 
  80042008f3:	ff d0                	callq  *%rax
  80042008f5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042008f9:	c7 45 f4 fd 03 00 00 	movl   $0x3fd,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200900:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200903:	89 c2                	mov    %eax,%edx
  8004200905:	ec                   	in     (%dx),%al
  8004200906:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200909:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420090d:	0f b6 c0             	movzbl %al,%eax
  8004200910:	83 e0 20             	and    $0x20,%eax
  8004200913:	85 c0                	test   %eax,%eax
  8004200915:	75 09                	jne    8004200920 <serial_putc+0x4b>
  8004200917:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420091e:	7e c9                	jle    80042008e9 <serial_putc+0x14>
  8004200920:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200923:	0f b6 c0             	movzbl %al,%eax
  8004200926:	c7 45 f8 f8 03 00 00 	movl   $0x3f8,-0x8(%rbp)
  800420092d:	88 45 f2             	mov    %al,-0xe(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200930:	0f b6 45 f2          	movzbl -0xe(%rbp),%eax
  8004200934:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200937:	ee                   	out    %al,(%dx)
  8004200938:	90                   	nop
  8004200939:	c9                   	leaveq 
  800420093a:	c3                   	retq   

000000800420093b <serial_init>:
  800420093b:	55                   	push   %rbp
  800420093c:	48 89 e5             	mov    %rsp,%rbp
  800420093f:	48 83 ec 40          	sub    $0x40,%rsp
  8004200943:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420094a:	c6 45 ce 00          	movb   $0x0,-0x32(%rbp)
  800420094e:	0f b6 45 ce          	movzbl -0x32(%rbp),%eax
  8004200952:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200955:	ee                   	out    %al,(%dx)
  8004200956:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%rbp)
  800420095d:	c6 45 cf 80          	movb   $0x80,-0x31(%rbp)
  8004200961:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  8004200965:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200968:	ee                   	out    %al,(%dx)
  8004200969:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)
  8004200970:	c6 45 d0 0c          	movb   $0xc,-0x30(%rbp)
  8004200974:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
  8004200978:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420097b:	ee                   	out    %al,(%dx)
  800420097c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%rbp)
  8004200983:	c6 45 d1 00          	movb   $0x0,-0x2f(%rbp)
  8004200987:	0f b6 45 d1          	movzbl -0x2f(%rbp),%eax
  800420098b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420098e:	ee                   	out    %al,(%dx)
  800420098f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%rbp)
  8004200996:	c6 45 d2 03          	movb   $0x3,-0x2e(%rbp)
  800420099a:	0f b6 45 d2          	movzbl -0x2e(%rbp),%eax
  800420099e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042009a1:	ee                   	out    %al,(%dx)
  80042009a2:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%rbp)
  80042009a9:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  80042009ad:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042009b1:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042009b4:	ee                   	out    %al,(%dx)
  80042009b5:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  80042009bc:	c6 45 d4 01          	movb   $0x1,-0x2c(%rbp)
  80042009c0:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
  80042009c4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042009c7:	ee                   	out    %al,(%dx)
  80042009c8:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009cf:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042009d2:	89 c2                	mov    %eax,%edx
  80042009d4:	ec                   	in     (%dx),%al
  80042009d5:	88 45 d5             	mov    %al,-0x2b(%rbp)
	return data;
  80042009d8:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
  80042009dc:	3c ff                	cmp    $0xff,%al
  80042009de:	0f 95 c2             	setne  %dl
  80042009e1:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  80042009e8:	00 00 00 
  80042009eb:	88 10                	mov    %dl,(%rax)
  80042009ed:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042009f4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042009f7:	89 c2                	mov    %eax,%edx
  80042009f9:	ec                   	in     (%dx),%al
  80042009fa:	88 45 d6             	mov    %al,-0x2a(%rbp)
  80042009fd:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%rbp)
  8004200a04:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004200a07:	89 c2                	mov    %eax,%edx
  8004200a09:	ec                   	in     (%dx),%al
  8004200a0a:	88 45 d7             	mov    %al,-0x29(%rbp)
  8004200a0d:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  8004200a14:	00 00 00 
  8004200a17:	0f b6 00             	movzbl (%rax),%eax
  8004200a1a:	84 c0                	test   %al,%al
  8004200a1c:	74 23                	je     8004200a41 <serial_init+0x106>
  8004200a1e:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004200a25:	00 00 00 
  8004200a28:	0f b7 00             	movzwl (%rax),%eax
  8004200a2b:	0f b7 c0             	movzwl %ax,%eax
  8004200a2e:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200a33:	89 c7                	mov    %eax,%edi
  8004200a35:	48 b8 22 94 20 04 80 	movabs $0x8004209422,%rax
  8004200a3c:	00 00 00 
  8004200a3f:	ff d0                	callq  *%rax
  8004200a41:	90                   	nop
  8004200a42:	c9                   	leaveq 
  8004200a43:	c3                   	retq   

0000008004200a44 <lpt_putc>:
  8004200a44:	55                   	push   %rbp
  8004200a45:	48 89 e5             	mov    %rsp,%rbp
  8004200a48:	48 83 ec 28          	sub    $0x28,%rsp
  8004200a4c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004200a4f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200a56:	eb 10                	jmp    8004200a68 <lpt_putc+0x24>
  8004200a58:	48 b8 16 08 20 04 80 	movabs $0x8004200816,%rax
  8004200a5f:	00 00 00 
  8004200a62:	ff d0                	callq  *%rax
  8004200a64:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200a68:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%rbp)
  8004200a6f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200a72:	89 c2                	mov    %eax,%edx
  8004200a74:	ec                   	in     (%dx),%al
  8004200a75:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200a78:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a7c:	84 c0                	test   %al,%al
  8004200a7e:	78 09                	js     8004200a89 <lpt_putc+0x45>
  8004200a80:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200a87:	7e cf                	jle    8004200a58 <lpt_putc+0x14>
  8004200a89:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200a8c:	0f b6 c0             	movzbl %al,%eax
  8004200a8f:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%rbp)
  8004200a96:	88 45 e8             	mov    %al,-0x18(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a99:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
  8004200a9d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200aa0:	ee                   	out    %al,(%dx)
  8004200aa1:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%rbp)
  8004200aa8:	c6 45 e9 0d          	movb   $0xd,-0x17(%rbp)
  8004200aac:	0f b6 45 e9          	movzbl -0x17(%rbp),%eax
  8004200ab0:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200ab3:	ee                   	out    %al,(%dx)
  8004200ab4:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%rbp)
  8004200abb:	c6 45 ea 08          	movb   $0x8,-0x16(%rbp)
  8004200abf:	0f b6 45 ea          	movzbl -0x16(%rbp),%eax
  8004200ac3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200ac6:	ee                   	out    %al,(%dx)
  8004200ac7:	90                   	nop
  8004200ac8:	c9                   	leaveq 
  8004200ac9:	c3                   	retq   

0000008004200aca <cga_init>:
  8004200aca:	55                   	push   %rbp
  8004200acb:	48 89 e5             	mov    %rsp,%rbp
  8004200ace:	48 83 ec 30          	sub    $0x30,%rsp
  8004200ad2:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  8004200ad9:	00 00 00 
  8004200adc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200ae0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200ae4:	0f b7 00             	movzwl (%rax),%eax
  8004200ae7:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004200aeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200aef:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  8004200af4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200af8:	0f b7 00             	movzwl (%rax),%eax
  8004200afb:	66 3d 5a a5          	cmp    $0xa55a,%ax
  8004200aff:	74 20                	je     8004200b21 <cga_init+0x57>
  8004200b01:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  8004200b08:	00 00 00 
  8004200b0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004200b0f:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b16:	00 00 00 
  8004200b19:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  8004200b1f:	eb 1b                	jmp    8004200b3c <cga_init+0x72>
  8004200b21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200b25:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200b29:	66 89 10             	mov    %dx,(%rax)
  8004200b2c:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b33:	00 00 00 
  8004200b36:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200b3c:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b43:	00 00 00 
  8004200b46:	8b 00                	mov    (%rax),%eax
  8004200b48:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200b4b:	c6 45 dc 0e          	movb   $0xe,-0x24(%rbp)
  8004200b4f:	0f b6 45 dc          	movzbl -0x24(%rbp),%eax
  8004200b53:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200b56:	ee                   	out    %al,(%dx)
  8004200b57:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b5e:	00 00 00 
  8004200b61:	8b 00                	mov    (%rax),%eax
  8004200b63:	83 c0 01             	add    $0x1,%eax
  8004200b66:	89 45 e8             	mov    %eax,-0x18(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200b69:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200b6c:	89 c2                	mov    %eax,%edx
  8004200b6e:	ec                   	in     (%dx),%al
  8004200b6f:	88 45 dd             	mov    %al,-0x23(%rbp)
	return data;
  8004200b72:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  8004200b76:	0f b6 c0             	movzbl %al,%eax
  8004200b79:	c1 e0 08             	shl    $0x8,%eax
  8004200b7c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200b7f:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200b86:	00 00 00 
  8004200b89:	8b 00                	mov    (%rax),%eax
  8004200b8b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004200b8e:	c6 45 de 0f          	movb   $0xf,-0x22(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200b92:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004200b96:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200b99:	ee                   	out    %al,(%dx)
  8004200b9a:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200ba1:	00 00 00 
  8004200ba4:	8b 00                	mov    (%rax),%eax
  8004200ba6:	83 c0 01             	add    $0x1,%eax
  8004200ba9:	89 45 e0             	mov    %eax,-0x20(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200bac:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004200baf:	89 c2                	mov    %eax,%edx
  8004200bb1:	ec                   	in     (%dx),%al
  8004200bb2:	88 45 df             	mov    %al,-0x21(%rbp)
	return data;
  8004200bb5:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200bb9:	0f b6 c0             	movzbl %al,%eax
  8004200bbc:	09 45 ec             	or     %eax,-0x14(%rbp)
  8004200bbf:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200bc6:	00 00 00 
  8004200bc9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200bcd:	48 89 10             	mov    %rdx,(%rax)
  8004200bd0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200bd3:	89 c2                	mov    %eax,%edx
  8004200bd5:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200bdc:	00 00 00 
  8004200bdf:	66 89 10             	mov    %dx,(%rax)
  8004200be2:	90                   	nop
  8004200be3:	c9                   	leaveq 
  8004200be4:	c3                   	retq   

0000008004200be5 <cga_putc>:
  8004200be5:	55                   	push   %rbp
  8004200be6:	48 89 e5             	mov    %rsp,%rbp
  8004200be9:	48 83 ec 30          	sub    $0x30,%rsp
  8004200bed:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004200bf0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200bf3:	b0 00                	mov    $0x0,%al
  8004200bf5:	85 c0                	test   %eax,%eax
  8004200bf7:	75 07                	jne    8004200c00 <cga_putc+0x1b>
  8004200bf9:	81 4d dc 00 07 00 00 	orl    $0x700,-0x24(%rbp)
  8004200c00:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200c03:	0f b6 c0             	movzbl %al,%eax
  8004200c06:	83 f8 09             	cmp    $0x9,%eax
  8004200c09:	0f 84 f5 00 00 00    	je     8004200d04 <cga_putc+0x11f>
  8004200c0f:	83 f8 09             	cmp    $0x9,%eax
  8004200c12:	7f 0a                	jg     8004200c1e <cga_putc+0x39>
  8004200c14:	83 f8 08             	cmp    $0x8,%eax
  8004200c17:	74 18                	je     8004200c31 <cga_putc+0x4c>
  8004200c19:	e9 3d 01 00 00       	jmpq   8004200d5b <cga_putc+0x176>
  8004200c1e:	83 f8 0a             	cmp    $0xa,%eax
  8004200c21:	74 74                	je     8004200c97 <cga_putc+0xb2>
  8004200c23:	83 f8 0d             	cmp    $0xd,%eax
  8004200c26:	0f 84 88 00 00 00    	je     8004200cb4 <cga_putc+0xcf>
  8004200c2c:	e9 2a 01 00 00       	jmpq   8004200d5b <cga_putc+0x176>
  8004200c31:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c38:	00 00 00 
  8004200c3b:	0f b7 00             	movzwl (%rax),%eax
  8004200c3e:	66 85 c0             	test   %ax,%ax
  8004200c41:	0f 84 4f 01 00 00    	je     8004200d96 <cga_putc+0x1b1>
  8004200c47:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c4e:	00 00 00 
  8004200c51:	0f b7 00             	movzwl (%rax),%eax
  8004200c54:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200c57:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c5e:	00 00 00 
  8004200c61:	66 89 10             	mov    %dx,(%rax)
  8004200c64:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200c6b:	00 00 00 
  8004200c6e:	48 8b 10             	mov    (%rax),%rdx
  8004200c71:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c78:	00 00 00 
  8004200c7b:	0f b7 00             	movzwl (%rax),%eax
  8004200c7e:	0f b7 c0             	movzwl %ax,%eax
  8004200c81:	48 01 c0             	add    %rax,%rax
  8004200c84:	48 01 d0             	add    %rdx,%rax
  8004200c87:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200c8a:	b2 00                	mov    $0x0,%dl
  8004200c8c:	83 ca 20             	or     $0x20,%edx
  8004200c8f:	66 89 10             	mov    %dx,(%rax)
  8004200c92:	e9 ff 00 00 00       	jmpq   8004200d96 <cga_putc+0x1b1>
  8004200c97:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200c9e:	00 00 00 
  8004200ca1:	0f b7 00             	movzwl (%rax),%eax
  8004200ca4:	8d 50 50             	lea    0x50(%rax),%edx
  8004200ca7:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200cae:	00 00 00 
  8004200cb1:	66 89 10             	mov    %dx,(%rax)
  8004200cb4:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200cbb:	00 00 00 
  8004200cbe:	0f b7 30             	movzwl (%rax),%esi
  8004200cc1:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200cc8:	00 00 00 
  8004200ccb:	0f b7 08             	movzwl (%rax),%ecx
  8004200cce:	0f b7 c1             	movzwl %cx,%eax
  8004200cd1:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200cd7:	c1 e8 10             	shr    $0x10,%eax
  8004200cda:	89 c2                	mov    %eax,%edx
  8004200cdc:	66 c1 ea 06          	shr    $0x6,%dx
  8004200ce0:	89 d0                	mov    %edx,%eax
  8004200ce2:	c1 e0 02             	shl    $0x2,%eax
  8004200ce5:	01 d0                	add    %edx,%eax
  8004200ce7:	c1 e0 04             	shl    $0x4,%eax
  8004200cea:	29 c1                	sub    %eax,%ecx
  8004200cec:	89 ca                	mov    %ecx,%edx
  8004200cee:	29 d6                	sub    %edx,%esi
  8004200cf0:	89 f2                	mov    %esi,%edx
  8004200cf2:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200cf9:	00 00 00 
  8004200cfc:	66 89 10             	mov    %dx,(%rax)
  8004200cff:	e9 93 00 00 00       	jmpq   8004200d97 <cga_putc+0x1b2>
  8004200d04:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d09:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  8004200d10:	00 00 00 
  8004200d13:	ff d0                	callq  *%rax
  8004200d15:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d1a:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  8004200d21:	00 00 00 
  8004200d24:	ff d0                	callq  *%rax
  8004200d26:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d2b:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  8004200d32:	00 00 00 
  8004200d35:	ff d0                	callq  *%rax
  8004200d37:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d3c:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  8004200d43:	00 00 00 
  8004200d46:	ff d0                	callq  *%rax
  8004200d48:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200d4d:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  8004200d54:	00 00 00 
  8004200d57:	ff d0                	callq  *%rax
  8004200d59:	eb 3c                	jmp    8004200d97 <cga_putc+0x1b2>
  8004200d5b:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200d62:	00 00 00 
  8004200d65:	48 8b 30             	mov    (%rax),%rsi
  8004200d68:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200d6f:	00 00 00 
  8004200d72:	0f b7 00             	movzwl (%rax),%eax
  8004200d75:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200d78:	48 ba 10 e0 49 04 80 	movabs $0x800449e010,%rdx
  8004200d7f:	00 00 00 
  8004200d82:	66 89 0a             	mov    %cx,(%rdx)
  8004200d85:	0f b7 c0             	movzwl %ax,%eax
  8004200d88:	48 01 c0             	add    %rax,%rax
  8004200d8b:	48 01 f0             	add    %rsi,%rax
  8004200d8e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200d91:	66 89 10             	mov    %dx,(%rax)
  8004200d94:	eb 01                	jmp    8004200d97 <cga_putc+0x1b2>
  8004200d96:	90                   	nop
  8004200d97:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200d9e:	00 00 00 
  8004200da1:	0f b7 00             	movzwl (%rax),%eax
  8004200da4:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200da8:	0f 86 89 00 00 00    	jbe    8004200e37 <cga_putc+0x252>
  8004200dae:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200db5:	00 00 00 
  8004200db8:	48 8b 00             	mov    (%rax),%rax
  8004200dbb:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200dc2:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200dc9:	00 00 00 
  8004200dcc:	48 8b 00             	mov    (%rax),%rax
  8004200dcf:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200dd4:	48 89 ce             	mov    %rcx,%rsi
  8004200dd7:	48 89 c7             	mov    %rax,%rdi
  8004200dda:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  8004200de1:	00 00 00 
  8004200de4:	ff d0                	callq  *%rax
  8004200de6:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200ded:	eb 22                	jmp    8004200e11 <cga_putc+0x22c>
  8004200def:	48 b8 08 e0 49 04 80 	movabs $0x800449e008,%rax
  8004200df6:	00 00 00 
  8004200df9:	48 8b 00             	mov    (%rax),%rax
  8004200dfc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200dff:	48 63 d2             	movslq %edx,%rdx
  8004200e02:	48 01 d2             	add    %rdx,%rdx
  8004200e05:	48 01 d0             	add    %rdx,%rax
  8004200e08:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200e0d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200e11:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200e18:	7e d5                	jle    8004200def <cga_putc+0x20a>
  8004200e1a:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e21:	00 00 00 
  8004200e24:	0f b7 00             	movzwl (%rax),%eax
  8004200e27:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200e2a:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e31:	00 00 00 
  8004200e34:	66 89 10             	mov    %dx,(%rax)
  8004200e37:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200e3e:	00 00 00 
  8004200e41:	8b 00                	mov    (%rax),%eax
  8004200e43:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200e46:	c6 45 e8 0e          	movb   $0xe,-0x18(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200e4a:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax
  8004200e4e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200e51:	ee                   	out    %al,(%dx)
  8004200e52:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200e59:	00 00 00 
  8004200e5c:	0f b7 00             	movzwl (%rax),%eax
  8004200e5f:	66 c1 e8 08          	shr    $0x8,%ax
  8004200e63:	0f b6 c0             	movzbl %al,%eax
  8004200e66:	48 ba 04 e0 49 04 80 	movabs $0x800449e004,%rdx
  8004200e6d:	00 00 00 
  8004200e70:	8b 12                	mov    (%rdx),%edx
  8004200e72:	83 c2 01             	add    $0x1,%edx
  8004200e75:	89 55 f4             	mov    %edx,-0xc(%rbp)
  8004200e78:	88 45 e9             	mov    %al,-0x17(%rbp)
  8004200e7b:	0f b6 45 e9          	movzbl -0x17(%rbp),%eax
  8004200e7f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200e82:	ee                   	out    %al,(%dx)
  8004200e83:	48 b8 04 e0 49 04 80 	movabs $0x800449e004,%rax
  8004200e8a:	00 00 00 
  8004200e8d:	8b 00                	mov    (%rax),%eax
  8004200e8f:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200e92:	c6 45 ea 0f          	movb   $0xf,-0x16(%rbp)
  8004200e96:	0f b6 45 ea          	movzbl -0x16(%rbp),%eax
  8004200e9a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200e9d:	ee                   	out    %al,(%dx)
  8004200e9e:	48 b8 10 e0 49 04 80 	movabs $0x800449e010,%rax
  8004200ea5:	00 00 00 
  8004200ea8:	0f b7 00             	movzwl (%rax),%eax
  8004200eab:	0f b6 c0             	movzbl %al,%eax
  8004200eae:	48 ba 04 e0 49 04 80 	movabs $0x800449e004,%rdx
  8004200eb5:	00 00 00 
  8004200eb8:	8b 12                	mov    (%rdx),%edx
  8004200eba:	83 c2 01             	add    $0x1,%edx
  8004200ebd:	89 55 ec             	mov    %edx,-0x14(%rbp)
  8004200ec0:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200ec3:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200ec7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200eca:	ee                   	out    %al,(%dx)
  8004200ecb:	90                   	nop
  8004200ecc:	c9                   	leaveq 
  8004200ecd:	c3                   	retq   

0000008004200ece <kbd_proc_data>:
  8004200ece:	55                   	push   %rbp
  8004200ecf:	48 89 e5             	mov    %rsp,%rbp
  8004200ed2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200ed6:	c7 45 e8 64 00 00 00 	movl   $0x64,-0x18(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200edd:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004200ee0:	89 c2                	mov    %eax,%edx
  8004200ee2:	ec                   	in     (%dx),%al
  8004200ee3:	88 45 e7             	mov    %al,-0x19(%rbp)
	return data;
  8004200ee6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200eea:	0f b6 c0             	movzbl %al,%eax
  8004200eed:	83 e0 01             	and    $0x1,%eax
  8004200ef0:	85 c0                	test   %eax,%eax
  8004200ef2:	75 0a                	jne    8004200efe <kbd_proc_data+0x30>
  8004200ef4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200ef9:	e9 28 02 00 00       	jmpq   8004201126 <kbd_proc_data+0x258>
  8004200efe:	c7 45 f4 60 00 00 00 	movl   $0x60,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200f05:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200f08:	89 c2                	mov    %eax,%edx
  8004200f0a:	ec                   	in     (%dx),%al
  8004200f0b:	88 45 e6             	mov    %al,-0x1a(%rbp)
	return data;
  8004200f0e:	0f b6 45 e6          	movzbl -0x1a(%rbp),%eax
  8004200f12:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f15:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200f19:	75 27                	jne    8004200f42 <kbd_proc_data+0x74>
  8004200f1b:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f22:	00 00 00 
  8004200f25:	8b 00                	mov    (%rax),%eax
  8004200f27:	83 c8 40             	or     $0x40,%eax
  8004200f2a:	89 c2                	mov    %eax,%edx
  8004200f2c:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f33:	00 00 00 
  8004200f36:	89 10                	mov    %edx,(%rax)
  8004200f38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200f3d:	e9 e4 01 00 00       	jmpq   8004201126 <kbd_proc_data+0x258>
  8004200f42:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f46:	84 c0                	test   %al,%al
  8004200f48:	79 65                	jns    8004200faf <kbd_proc_data+0xe1>
  8004200f4a:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f51:	00 00 00 
  8004200f54:	8b 00                	mov    (%rax),%eax
  8004200f56:	83 e0 40             	and    $0x40,%eax
  8004200f59:	85 c0                	test   %eax,%eax
  8004200f5b:	75 09                	jne    8004200f66 <kbd_proc_data+0x98>
  8004200f5d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f61:	83 e0 7f             	and    $0x7f,%eax
  8004200f64:	eb 04                	jmp    8004200f6a <kbd_proc_data+0x9c>
  8004200f66:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f6a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200f6d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f71:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200f78:	00 00 00 
  8004200f7b:	48 98                	cltq   
  8004200f7d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f81:	83 c8 40             	or     $0x40,%eax
  8004200f84:	0f b6 c0             	movzbl %al,%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	89 c2                	mov    %eax,%edx
  8004200f8b:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200f92:	00 00 00 
  8004200f95:	8b 00                	mov    (%rax),%eax
  8004200f97:	21 c2                	and    %eax,%edx
  8004200f99:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fa0:	00 00 00 
  8004200fa3:	89 10                	mov    %edx,(%rax)
  8004200fa5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200faa:	e9 77 01 00 00       	jmpq   8004201126 <kbd_proc_data+0x258>
  8004200faf:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fb6:	00 00 00 
  8004200fb9:	8b 00                	mov    (%rax),%eax
  8004200fbb:	83 e0 40             	and    $0x40,%eax
  8004200fbe:	85 c0                	test   %eax,%eax
  8004200fc0:	74 21                	je     8004200fe3 <kbd_proc_data+0x115>
  8004200fc2:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200fc6:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fcd:	00 00 00 
  8004200fd0:	8b 00                	mov    (%rax),%eax
  8004200fd2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200fd5:	89 c2                	mov    %eax,%edx
  8004200fd7:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004200fde:	00 00 00 
  8004200fe1:	89 10                	mov    %edx,(%rax)
  8004200fe3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200fe7:	48 ba 60 c0 22 04 80 	movabs $0x800422c060,%rdx
  8004200fee:	00 00 00 
  8004200ff1:	48 98                	cltq   
  8004200ff3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ff7:	0f b6 d0             	movzbl %al,%edx
  8004200ffa:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004201001:	00 00 00 
  8004201004:	8b 00                	mov    (%rax),%eax
  8004201006:	09 c2                	or     %eax,%edx
  8004201008:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420100f:	00 00 00 
  8004201012:	89 10                	mov    %edx,(%rax)
  8004201014:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004201018:	48 ba 60 c1 22 04 80 	movabs $0x800422c160,%rdx
  800420101f:	00 00 00 
  8004201022:	48 98                	cltq   
  8004201024:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201028:	0f b6 d0             	movzbl %al,%edx
  800420102b:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004201032:	00 00 00 
  8004201035:	8b 00                	mov    (%rax),%eax
  8004201037:	31 c2                	xor    %eax,%edx
  8004201039:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  8004201040:	00 00 00 
  8004201043:	89 10                	mov    %edx,(%rax)
  8004201045:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420104c:	00 00 00 
  800420104f:	8b 00                	mov    (%rax),%eax
  8004201051:	83 e0 03             	and    $0x3,%eax
  8004201054:	89 c2                	mov    %eax,%edx
  8004201056:	48 b8 60 c5 22 04 80 	movabs $0x800422c560,%rax
  800420105d:	00 00 00 
  8004201060:	89 d2                	mov    %edx,%edx
  8004201062:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004201066:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420106a:	48 01 d0             	add    %rdx,%rax
  800420106d:	0f b6 00             	movzbl (%rax),%eax
  8004201070:	0f b6 c0             	movzbl %al,%eax
  8004201073:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201076:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  800420107d:	00 00 00 
  8004201080:	8b 00                	mov    (%rax),%eax
  8004201082:	83 e0 08             	and    $0x8,%eax
  8004201085:	85 c0                	test   %eax,%eax
  8004201087:	74 22                	je     80042010ab <kbd_proc_data+0x1dd>
  8004201089:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  800420108d:	7e 0c                	jle    800420109b <kbd_proc_data+0x1cd>
  800420108f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004201093:	7f 06                	jg     800420109b <kbd_proc_data+0x1cd>
  8004201095:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004201099:	eb 10                	jmp    80042010ab <kbd_proc_data+0x1dd>
  800420109b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  800420109f:	7e 0a                	jle    80042010ab <kbd_proc_data+0x1dd>
  80042010a1:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  80042010a5:	7f 04                	jg     80042010ab <kbd_proc_data+0x1dd>
  80042010a7:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  80042010ab:	48 b8 28 e2 49 04 80 	movabs $0x800449e228,%rax
  80042010b2:	00 00 00 
  80042010b5:	8b 00                	mov    (%rax),%eax
  80042010b7:	f7 d0                	not    %eax
  80042010b9:	83 e0 06             	and    $0x6,%eax
  80042010bc:	85 c0                	test   %eax,%eax
  80042010be:	75 37                	jne    80042010f7 <kbd_proc_data+0x229>
  80042010c0:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  80042010c7:	75 2e                	jne    80042010f7 <kbd_proc_data+0x229>
  80042010c9:	48 bf de 8a 21 04 80 	movabs $0x8004218ade,%rdi
  80042010d0:	00 00 00 
  80042010d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042010d8:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042010df:	00 00 00 
  80042010e2:	ff d2                	callq  *%rdx
  80042010e4:	c7 45 f0 92 00 00 00 	movl   $0x92,-0x10(%rbp)
  80042010eb:	c6 45 e5 03          	movb   $0x3,-0x1b(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042010ef:	0f b6 45 e5          	movzbl -0x1b(%rbp),%eax
  80042010f3:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042010f6:	ee                   	out    %al,(%dx)
  80042010f7:	83 7d fc 1b          	cmpl   $0x1b,-0x4(%rbp)
  80042010fb:	75 26                	jne    8004201123 <kbd_proc_data+0x255>
  80042010fd:	48 bf ea 8a 21 04 80 	movabs $0x8004218aea,%rdi
  8004201104:	00 00 00 
  8004201107:	b8 00 00 00 00       	mov    $0x0,%eax
  800420110c:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201113:	00 00 00 
  8004201116:	ff d2                	callq  *%rdx
  8004201118:	b8 05 00 00 00       	mov    $0x5,%eax
  800420111d:	0f 01 c1             	vmcall 
  8004201120:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004201123:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201126:	c9                   	leaveq 
  8004201127:	c3                   	retq   

0000008004201128 <kbd_intr>:
  8004201128:	55                   	push   %rbp
  8004201129:	48 89 e5             	mov    %rsp,%rbp
  800420112c:	48 bf ce 0e 20 04 80 	movabs $0x8004200ece,%rdi
  8004201133:	00 00 00 
  8004201136:	48 b8 7b 11 20 04 80 	movabs $0x800420117b,%rax
  800420113d:	00 00 00 
  8004201140:	ff d0                	callq  *%rax
  8004201142:	90                   	nop
  8004201143:	5d                   	pop    %rbp
  8004201144:	c3                   	retq   

0000008004201145 <kbd_init>:
  8004201145:	55                   	push   %rbp
  8004201146:	48 89 e5             	mov    %rsp,%rbp
  8004201149:	48 b8 28 11 20 04 80 	movabs $0x8004201128,%rax
  8004201150:	00 00 00 
  8004201153:	ff d0                	callq  *%rax
  8004201155:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  800420115c:	00 00 00 
  800420115f:	0f b7 00             	movzwl (%rax),%eax
  8004201162:	0f b7 c0             	movzwl %ax,%eax
  8004201165:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420116a:	89 c7                	mov    %eax,%edi
  800420116c:	48 b8 22 94 20 04 80 	movabs $0x8004209422,%rax
  8004201173:	00 00 00 
  8004201176:	ff d0                	callq  *%rax
  8004201178:	90                   	nop
  8004201179:	5d                   	pop    %rbp
  800420117a:	c3                   	retq   

000000800420117b <cons_intr>:
  800420117b:	55                   	push   %rbp
  800420117c:	48 89 e5             	mov    %rsp,%rbp
  800420117f:	48 83 ec 20          	sub    $0x20,%rsp
  8004201183:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201187:	eb 6a                	jmp    80042011f3 <cons_intr+0x78>
  8004201189:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420118d:	75 02                	jne    8004201191 <cons_intr+0x16>
  800420118f:	eb 62                	jmp    80042011f3 <cons_intr+0x78>
  8004201191:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201198:	00 00 00 
  800420119b:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011a1:	8d 48 01             	lea    0x1(%rax),%ecx
  80042011a4:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  80042011ab:	00 00 00 
  80042011ae:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  80042011b4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042011b7:	89 d1                	mov    %edx,%ecx
  80042011b9:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  80042011c0:	00 00 00 
  80042011c3:	89 c0                	mov    %eax,%eax
  80042011c5:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042011c8:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  80042011cf:	00 00 00 
  80042011d2:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042011d8:	3d 00 02 00 00       	cmp    $0x200,%eax
  80042011dd:	75 14                	jne    80042011f3 <cons_intr+0x78>
  80042011df:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  80042011e6:	00 00 00 
  80042011e9:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  80042011f0:	00 00 00 
  80042011f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042011f7:	ff d0                	callq  *%rax
  80042011f9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042011fc:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004201200:	75 87                	jne    8004201189 <cons_intr+0xe>
  8004201202:	90                   	nop
  8004201203:	c9                   	leaveq 
  8004201204:	c3                   	retq   

0000008004201205 <cons_getc>:
  8004201205:	55                   	push   %rbp
  8004201206:	48 89 e5             	mov    %rsp,%rbp
  8004201209:	48 83 ec 10          	sub    $0x10,%rsp
  800420120d:	48 b8 a7 08 20 04 80 	movabs $0x80042008a7,%rax
  8004201214:	00 00 00 
  8004201217:	ff d0                	callq  *%rax
  8004201219:	48 b8 28 11 20 04 80 	movabs $0x8004201128,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  800420122c:	00 00 00 
  800420122f:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  8004201235:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  800420123c:	00 00 00 
  800420123f:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201245:	39 c2                	cmp    %eax,%edx
  8004201247:	74 69                	je     80042012b2 <cons_getc+0xad>
  8004201249:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201250:	00 00 00 
  8004201253:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201259:	8d 48 01             	lea    0x1(%rax),%ecx
  800420125c:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  8004201263:	00 00 00 
  8004201266:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420126c:	48 ba 20 e0 49 04 80 	movabs $0x800449e020,%rdx
  8004201273:	00 00 00 
  8004201276:	89 c0                	mov    %eax,%eax
  8004201278:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420127c:	0f b6 c0             	movzbl %al,%eax
  800420127f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201282:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  8004201289:	00 00 00 
  800420128c:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201292:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201297:	75 14                	jne    80042012ad <cons_getc+0xa8>
  8004201299:	48 b8 20 e0 49 04 80 	movabs $0x800449e020,%rax
  80042012a0:	00 00 00 
  80042012a3:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  80042012aa:	00 00 00 
  80042012ad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012b0:	eb 05                	jmp    80042012b7 <cons_getc+0xb2>
  80042012b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012b7:	c9                   	leaveq 
  80042012b8:	c3                   	retq   

00000080042012b9 <cons_putc>:
  80042012b9:	55                   	push   %rbp
  80042012ba:	48 89 e5             	mov    %rsp,%rbp
  80042012bd:	48 83 ec 10          	sub    $0x10,%rsp
  80042012c1:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042012c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012c7:	89 c7                	mov    %eax,%edi
  80042012c9:	48 b8 d5 08 20 04 80 	movabs $0x80042008d5,%rax
  80042012d0:	00 00 00 
  80042012d3:	ff d0                	callq  *%rax
  80042012d5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d8:	89 c7                	mov    %eax,%edi
  80042012da:	48 b8 44 0a 20 04 80 	movabs $0x8004200a44,%rax
  80042012e1:	00 00 00 
  80042012e4:	ff d0                	callq  *%rax
  80042012e6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012e9:	89 c7                	mov    %eax,%edi
  80042012eb:	48 b8 e5 0b 20 04 80 	movabs $0x8004200be5,%rax
  80042012f2:	00 00 00 
  80042012f5:	ff d0                	callq  *%rax
  80042012f7:	90                   	nop
  80042012f8:	c9                   	leaveq 
  80042012f9:	c3                   	retq   

00000080042012fa <cons_init>:
  80042012fa:	55                   	push   %rbp
  80042012fb:	48 89 e5             	mov    %rsp,%rbp
  80042012fe:	48 b8 ca 0a 20 04 80 	movabs $0x8004200aca,%rax
  8004201305:	00 00 00 
  8004201308:	ff d0                	callq  *%rax
  800420130a:	48 b8 45 11 20 04 80 	movabs $0x8004201145,%rax
  8004201311:	00 00 00 
  8004201314:	ff d0                	callq  *%rax
  8004201316:	48 b8 3b 09 20 04 80 	movabs $0x800420093b,%rax
  800420131d:	00 00 00 
  8004201320:	ff d0                	callq  *%rax
  8004201322:	48 b8 00 e0 49 04 80 	movabs $0x800449e000,%rax
  8004201329:	00 00 00 
  800420132c:	0f b6 00             	movzbl (%rax),%eax
  800420132f:	83 f0 01             	xor    $0x1,%eax
  8004201332:	84 c0                	test   %al,%al
  8004201334:	74 1b                	je     8004201351 <cons_init+0x57>
  8004201336:	48 bf f7 8a 21 04 80 	movabs $0x8004218af7,%rdi
  800420133d:	00 00 00 
  8004201340:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201345:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420134c:	00 00 00 
  800420134f:	ff d2                	callq  *%rdx
  8004201351:	90                   	nop
  8004201352:	5d                   	pop    %rbp
  8004201353:	c3                   	retq   

0000008004201354 <cputchar>:
  8004201354:	55                   	push   %rbp
  8004201355:	48 89 e5             	mov    %rsp,%rbp
  8004201358:	48 83 ec 10          	sub    $0x10,%rsp
  800420135c:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420135f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201362:	89 c7                	mov    %eax,%edi
  8004201364:	48 b8 b9 12 20 04 80 	movabs $0x80042012b9,%rax
  800420136b:	00 00 00 
  800420136e:	ff d0                	callq  *%rax
  8004201370:	90                   	nop
  8004201371:	c9                   	leaveq 
  8004201372:	c3                   	retq   

0000008004201373 <getchar>:
  8004201373:	55                   	push   %rbp
  8004201374:	48 89 e5             	mov    %rsp,%rbp
  8004201377:	48 83 ec 10          	sub    $0x10,%rsp
  800420137b:	48 b8 05 12 20 04 80 	movabs $0x8004201205,%rax
  8004201382:	00 00 00 
  8004201385:	ff d0                	callq  *%rax
  8004201387:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420138a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420138e:	74 eb                	je     800420137b <getchar+0x8>
  8004201390:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201393:	c9                   	leaveq 
  8004201394:	c3                   	retq   

0000008004201395 <iscons>:
  8004201395:	55                   	push   %rbp
  8004201396:	48 89 e5             	mov    %rsp,%rbp
  8004201399:	48 83 ec 08          	sub    $0x8,%rsp
  800420139d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042013a0:	b8 01 00 00 00       	mov    $0x1,%eax
  80042013a5:	c9                   	leaveq 
  80042013a6:	c3                   	retq   

00000080042013a7 <mon_help>:
  80042013a7:	55                   	push   %rbp
  80042013a8:	48 89 e5             	mov    %rsp,%rbp
  80042013ab:	48 83 ec 30          	sub    $0x30,%rsp
  80042013af:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042013b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042013b6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042013ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042013c1:	eb 6f                	jmp    8004201432 <mon_help+0x8b>
  80042013c3:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  80042013ca:	00 00 00 
  80042013cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013d0:	48 63 d0             	movslq %eax,%rdx
  80042013d3:	48 89 d0             	mov    %rdx,%rax
  80042013d6:	48 01 c0             	add    %rax,%rax
  80042013d9:	48 01 d0             	add    %rdx,%rax
  80042013dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042013e0:	48 01 c8             	add    %rcx,%rax
  80042013e3:	48 83 c0 08          	add    $0x8,%rax
  80042013e7:	48 8b 08             	mov    (%rax),%rcx
  80042013ea:	48 be 80 c5 22 04 80 	movabs $0x800422c580,%rsi
  80042013f1:	00 00 00 
  80042013f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042013f7:	48 63 d0             	movslq %eax,%rdx
  80042013fa:	48 89 d0             	mov    %rdx,%rax
  80042013fd:	48 01 c0             	add    %rax,%rax
  8004201400:	48 01 d0             	add    %rdx,%rax
  8004201403:	48 c1 e0 03          	shl    $0x3,%rax
  8004201407:	48 01 f0             	add    %rsi,%rax
  800420140a:	48 8b 00             	mov    (%rax),%rax
  800420140d:	48 89 ca             	mov    %rcx,%rdx
  8004201410:	48 89 c6             	mov    %rax,%rsi
  8004201413:	48 bf a5 8b 21 04 80 	movabs $0x8004218ba5,%rdi
  800420141a:	00 00 00 
  800420141d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201422:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  8004201429:	00 00 00 
  800420142c:	ff d1                	callq  *%rcx
  800420142e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201432:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201435:	83 f8 03             	cmp    $0x3,%eax
  8004201438:	76 89                	jbe    80042013c3 <mon_help+0x1c>
  800420143a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420143f:	c9                   	leaveq 
  8004201440:	c3                   	retq   

0000008004201441 <mon_kerninfo>:
  8004201441:	55                   	push   %rbp
  8004201442:	48 89 e5             	mov    %rsp,%rbp
  8004201445:	48 83 ec 30          	sub    $0x30,%rsp
  8004201449:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420144c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201450:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201454:	48 bf ae 8b 21 04 80 	movabs $0x8004218bae,%rdi
  800420145b:	00 00 00 
  800420145e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201463:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420146a:	00 00 00 
  800420146d:	ff d2                	callq  *%rdx
  800420146f:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201476:	00 00 00 
  8004201479:	48 bf c8 8b 21 04 80 	movabs $0x8004218bc8,%rdi
  8004201480:	00 00 00 
  8004201483:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201488:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420148f:	00 00 00 
  8004201492:	ff d2                	callq  *%rdx
  8004201494:	48 b8 0c 00 20 00 00 	movabs $0x20000c,%rax
  800420149b:	00 00 00 
  800420149e:	48 89 c2             	mov    %rax,%rdx
  80042014a1:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  80042014a8:	00 00 00 
  80042014ab:	48 bf f0 8b 21 04 80 	movabs $0x8004218bf0,%rdi
  80042014b2:	00 00 00 
  80042014b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ba:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  80042014c1:	00 00 00 
  80042014c4:	ff d1                	callq  *%rcx
  80042014c6:	48 b8 98 89 21 00 00 	movabs $0x218998,%rax
  80042014cd:	00 00 00 
  80042014d0:	48 89 c2             	mov    %rax,%rdx
  80042014d3:	48 be 98 89 21 04 80 	movabs $0x8004218998,%rsi
  80042014da:	00 00 00 
  80042014dd:	48 bf 18 8c 21 04 80 	movabs $0x8004218c18,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  80042014f3:	00 00 00 
  80042014f6:	ff d1                	callq  *%rcx
  80042014f8:	48 b8 68 d7 49 00 00 	movabs $0x49d768,%rax
  80042014ff:	00 00 00 
  8004201502:	48 89 c2             	mov    %rax,%rdx
  8004201505:	48 be 68 d7 49 04 80 	movabs $0x800449d768,%rsi
  800420150c:	00 00 00 
  800420150f:	48 bf 40 8c 21 04 80 	movabs $0x8004218c40,%rdi
  8004201516:	00 00 00 
  8004201519:	b8 00 00 00 00       	mov    $0x0,%eax
  800420151e:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  8004201525:	00 00 00 
  8004201528:	ff d1                	callq  *%rcx
  800420152a:	48 b8 10 00 6e 00 00 	movabs $0x6e0010,%rax
  8004201531:	00 00 00 
  8004201534:	48 89 c2             	mov    %rax,%rdx
  8004201537:	48 be 10 00 6e 04 80 	movabs $0x80046e0010,%rsi
  800420153e:	00 00 00 
  8004201541:	48 bf 68 8c 21 04 80 	movabs $0x8004218c68,%rdi
  8004201548:	00 00 00 
  800420154b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201550:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  8004201557:	00 00 00 
  800420155a:	ff d1                	callq  *%rcx
  800420155c:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004201563:	00 
  8004201564:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  800420156b:	00 00 00 
  800420156e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201572:	48 29 c2             	sub    %rax,%rdx
  8004201575:	48 b8 10 00 6e 04 80 	movabs $0x80046e0010,%rax
  800420157c:	00 00 00 
  800420157f:	48 83 e8 01          	sub    $0x1,%rax
  8004201583:	48 01 d0             	add    %rdx,%rax
  8004201586:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420158a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420158e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201593:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201597:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420159b:	48 29 d0             	sub    %rdx,%rax
  800420159e:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  80042015a5:	48 85 c0             	test   %rax,%rax
  80042015a8:	48 0f 48 c2          	cmovs  %rdx,%rax
  80042015ac:	48 c1 f8 0a          	sar    $0xa,%rax
  80042015b0:	48 89 c6             	mov    %rax,%rsi
  80042015b3:	48 bf 90 8c 21 04 80 	movabs $0x8004218c90,%rdi
  80042015ba:	00 00 00 
  80042015bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015c2:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042015c9:	00 00 00 
  80042015cc:	ff d2                	callq  *%rdx
  80042015ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015d3:	c9                   	leaveq 
  80042015d4:	c3                   	retq   

00000080042015d5 <mon_backtrace>:
  80042015d5:	55                   	push   %rbp
  80042015d6:	48 89 e5             	mov    %rsp,%rbp
  80042015d9:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  80042015e0:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  80042015e6:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  80042015ed:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  80042015f4:	48 89 e8             	mov    %rbp,%rax
  80042015f7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	return rbp;
  80042015fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201603:	48 89 e0             	mov    %rsp,%rax
  8004201606:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420160a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420160e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201612:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  8004201619:	00 
  800420161a:	74 21                	je     800420163d <mon_backtrace+0x68>
  800420161c:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  8004201623:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004201627:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420162b:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  8004201632:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  8004201639:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420163d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8004201644 <mon_backtrace+0x6f>
  8004201644:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201648:	48 bf ba 8c 21 04 80 	movabs $0x8004218cba,%rdi
  800420164f:	00 00 00 
  8004201652:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201657:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420165e:	00 00 00 
  8004201661:	ff d2                	callq  *%rdx
  8004201663:	e9 15 03 00 00       	jmpq   800420197d <mon_backtrace+0x3a8>
  8004201668:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420166c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201670:	48 89 c6             	mov    %rax,%rsi
  8004201673:	48 bf cc 8c 21 04 80 	movabs $0x8004218ccc,%rdi
  800420167a:	00 00 00 
  800420167d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201682:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  8004201689:	00 00 00 
  800420168c:	ff d1                	callq  *%rcx
  800420168e:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201699:	48 89 d6             	mov    %rdx,%rsi
  800420169c:	48 89 c7             	mov    %rax,%rdi
  800420169f:	48 b8 fc ed 20 04 80 	movabs $0x800420edfc,%rax
  80042016a6:	00 00 00 
  80042016a9:	ff d0                	callq  *%rax
  80042016ab:	85 c0                	test   %eax,%eax
  80042016ad:	0f 88 98 02 00 00    	js     800420194b <mon_backtrace+0x376>
  80042016b3:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  80042016ba:	48 05 a8 00 00 00    	add    $0xa8,%rax
  80042016c0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042016c4:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  80042016cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042016cf:	48 89 d7             	mov    %rdx,%rdi
  80042016d2:	48 29 c7             	sub    %rax,%rdi
  80042016d5:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  80042016dc:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  80042016e2:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  80042016e8:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  80042016ef:	49 89 f9             	mov    %rdi,%r9
  80042016f2:	49 89 f0             	mov    %rsi,%r8
  80042016f5:	48 89 c6             	mov    %rax,%rsi
  80042016f8:	48 bf e8 8c 21 04 80 	movabs $0x8004218ce8,%rdi
  80042016ff:	00 00 00 
  8004201702:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201707:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  800420170e:	00 00 00 
  8004201711:	41 ff d2             	callq  *%r10
  8004201714:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201718:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420171c:	66 83 f8 06          	cmp    $0x6,%ax
  8004201720:	75 15                	jne    8004201737 <mon_backtrace+0x162>
  8004201722:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201726:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420172a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420172e:	48 01 d0             	add    %rdx,%rax
  8004201731:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201735:	eb 25                	jmp    800420175c <mon_backtrace+0x187>
  8004201737:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420173b:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800420173f:	66 83 f8 07          	cmp    $0x7,%ax
  8004201743:	0f 85 01 02 00 00    	jne    800420194a <mon_backtrace+0x375>
  8004201749:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420174d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004201751:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004201755:	48 01 d0             	add    %rdx,%rax
  8004201758:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420175c:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201762:	89 c6                	mov    %eax,%esi
  8004201764:	48 bf 03 8d 21 04 80 	movabs $0x8004218d03,%rdi
  800420176b:	00 00 00 
  800420176e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201773:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420177a:	00 00 00 
  800420177d:	ff d2                	callq  *%rdx
  800420177f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201786:	e9 f2 00 00 00       	jmpq   800420187d <mon_backtrace+0x2a8>
  800420178b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420178e:	48 98                	cltq   
  8004201790:	48 83 c0 0a          	add    $0xa,%rax
  8004201794:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420179b:	ff 
  800420179c:	48 85 c0             	test   %rax,%rax
  800420179f:	75 35                	jne    80042017d6 <mon_backtrace+0x201>
  80042017a1:	48 b9 0e 8d 21 04 80 	movabs $0x8004218d0e,%rcx
  80042017a8:	00 00 00 
  80042017ab:	48 ba 24 8d 21 04 80 	movabs $0x8004218d24,%rdx
  80042017b2:	00 00 00 
  80042017b5:	be 78 00 00 00       	mov    $0x78,%esi
  80042017ba:	48 bf 39 8d 21 04 80 	movabs $0x8004218d39,%rdi
  80042017c1:	00 00 00 
  80042017c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017c9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042017d0:	00 00 00 
  80042017d3:	41 ff d0             	callq  *%r8
  80042017d6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017d9:	48 98                	cltq   
  80042017db:	48 83 c0 0a          	add    $0xa,%rax
  80042017df:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  80042017e6:	ff 
  80042017e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017eb:	48 01 d0             	add    %rdx,%rax
  80042017ee:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042017f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042017f5:	48 98                	cltq   
  80042017f7:	48 83 c0 08          	add    $0x8,%rax
  80042017fb:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  8004201802:	83 f8 02             	cmp    $0x2,%eax
  8004201805:	74 31                	je     8004201838 <mon_backtrace+0x263>
  8004201807:	83 f8 02             	cmp    $0x2,%eax
  800420180a:	7f 07                	jg     8004201813 <mon_backtrace+0x23e>
  800420180c:	83 f8 01             	cmp    $0x1,%eax
  800420180f:	74 37                	je     8004201848 <mon_backtrace+0x273>
  8004201811:	eb 44                	jmp    8004201857 <mon_backtrace+0x282>
  8004201813:	83 f8 04             	cmp    $0x4,%eax
  8004201816:	74 12                	je     800420182a <mon_backtrace+0x255>
  8004201818:	83 f8 08             	cmp    $0x8,%eax
  800420181b:	75 3a                	jne    8004201857 <mon_backtrace+0x282>
  800420181d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201821:	48 8b 00             	mov    (%rax),%rax
  8004201824:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201828:	eb 2d                	jmp    8004201857 <mon_backtrace+0x282>
  800420182a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420182e:	8b 00                	mov    (%rax),%eax
  8004201830:	89 c0                	mov    %eax,%eax
  8004201832:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201836:	eb 1f                	jmp    8004201857 <mon_backtrace+0x282>
  8004201838:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420183c:	0f b7 00             	movzwl (%rax),%eax
  800420183f:	0f b7 c0             	movzwl %ax,%eax
  8004201842:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201846:	eb 0f                	jmp    8004201857 <mon_backtrace+0x282>
  8004201848:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420184c:	0f b6 00             	movzbl (%rax),%eax
  800420184f:	0f b6 c0             	movzbl %al,%eax
  8004201852:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004201856:	90                   	nop
  8004201857:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420185b:	48 89 c6             	mov    %rax,%rsi
  800420185e:	48 bf 4b 8d 21 04 80 	movabs $0x8004218d4b,%rdi
  8004201865:	00 00 00 
  8004201868:	b8 00 00 00 00       	mov    $0x0,%eax
  800420186d:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201874:	00 00 00 
  8004201877:	ff d2                	callq  *%rdx
  8004201879:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420187d:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201883:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004201886:	0f 8f ff fe ff ff    	jg     800420178b <mon_backtrace+0x1b6>
  800420188c:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201893:	0f b7 c0             	movzwl %ax,%eax
  8004201896:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420189b:	74 48                	je     80042018e5 <mon_backtrace+0x310>
  800420189d:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018a2:	75 17                	jne    80042018bb <mon_backtrace+0x2e6>
  80042018a4:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  80042018ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042018af:	48 01 d0             	add    %rdx,%rax
  80042018b2:	48 8b 00             	mov    (%rax),%rax
  80042018b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042018b9:	eb 2b                	jmp    80042018e6 <mon_backtrace+0x311>
  80042018bb:	48 ba 52 8d 21 04 80 	movabs $0x8004218d52,%rdx
  80042018c2:	00 00 00 
  80042018c5:	be 92 00 00 00       	mov    $0x92,%esi
  80042018ca:	48 bf 39 8d 21 04 80 	movabs $0x8004218d39,%rdi
  80042018d1:	00 00 00 
  80042018d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042018d9:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  80042018e0:	00 00 00 
  80042018e3:	ff d1                	callq  *%rcx
  80042018e5:	90                   	nop
  80042018e6:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  80042018ed:	0f b7 c0             	movzwl %ax,%eax
  80042018f0:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  80042018f5:	74 48                	je     800420193f <mon_backtrace+0x36a>
  80042018f7:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042018fc:	75 17                	jne    8004201915 <mon_backtrace+0x340>
  80042018fe:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  8004201905:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201909:	48 01 d0             	add    %rdx,%rax
  800420190c:	48 8b 00             	mov    (%rax),%rax
  800420190f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201913:	eb 2b                	jmp    8004201940 <mon_backtrace+0x36b>
  8004201915:	48 ba 52 8d 21 04 80 	movabs $0x8004218d52,%rdx
  800420191c:	00 00 00 
  800420191f:	be 9d 00 00 00       	mov    $0x9d,%esi
  8004201924:	48 bf 39 8d 21 04 80 	movabs $0x8004218d39,%rdi
  800420192b:	00 00 00 
  800420192e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201933:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420193a:	00 00 00 
  800420193d:	ff d1                	callq  *%rcx
  800420193f:	90                   	nop
  8004201940:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201944:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004201948:	eb 18                	jmp    8004201962 <mon_backtrace+0x38d>
  800420194a:	90                   	nop
  800420194b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420194f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004201953:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004201957:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420195b:	48 8b 00             	mov    (%rax),%rax
  800420195e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201962:	48 bf 63 8d 21 04 80 	movabs $0x8004218d63,%rdi
  8004201969:	00 00 00 
  800420196c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201971:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201978:	00 00 00 
  800420197b:	ff d2                	callq  *%rdx
  800420197d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201982:	0f 85 e0 fc ff ff    	jne    8004201668 <mon_backtrace+0x93>
  8004201988:	b8 00 00 00 00       	mov    $0x0,%eax
  800420198d:	c9                   	leaveq 
  800420198e:	c3                   	retq   

000000800420198f <mon_exit>:
  800420198f:	55                   	push   %rbp
  8004201990:	48 89 e5             	mov    %rsp,%rbp
  8004201993:	48 83 ec 18          	sub    $0x18,%rsp
  8004201997:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420199a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420199e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042019a2:	f4                   	hlt    
  80042019a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042019a8:	c9                   	leaveq 
  80042019a9:	c3                   	retq   

00000080042019aa <runcmd>:
  80042019aa:	55                   	push   %rbp
  80042019ab:	48 89 e5             	mov    %rsp,%rbp
  80042019ae:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  80042019b5:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042019bc:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042019c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042019ca:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042019cd:	48 98                	cltq   
  80042019cf:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042019d6:	ff 00 00 00 00 
  80042019db:	eb 15                	jmp    80042019f2 <runcmd+0x48>
  80042019dd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019e4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042019e8:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  80042019ef:	c6 00 00             	movb   $0x0,(%rax)
  80042019f2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042019f9:	0f b6 00             	movzbl (%rax),%eax
  80042019fc:	84 c0                	test   %al,%al
  80042019fe:	74 2a                	je     8004201a2a <runcmd+0x80>
  8004201a00:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a07:	0f b6 00             	movzbl (%rax),%eax
  8004201a0a:	0f be c0             	movsbl %al,%eax
  8004201a0d:	89 c6                	mov    %eax,%esi
  8004201a0f:	48 bf 65 8d 21 04 80 	movabs $0x8004218d65,%rdi
  8004201a16:	00 00 00 
  8004201a19:	48 b8 ed 00 21 04 80 	movabs $0x80042100ed,%rax
  8004201a20:	00 00 00 
  8004201a23:	ff d0                	callq  *%rax
  8004201a25:	48 85 c0             	test   %rax,%rax
  8004201a28:	75 b3                	jne    80042019dd <runcmd+0x33>
  8004201a2a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a31:	0f b6 00             	movzbl (%rax),%eax
  8004201a34:	84 c0                	test   %al,%al
  8004201a36:	0f 84 95 00 00 00    	je     8004201ad1 <runcmd+0x127>
  8004201a3c:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004201a40:	75 2a                	jne    8004201a6c <runcmd+0xc2>
  8004201a42:	be 10 00 00 00       	mov    $0x10,%esi
  8004201a47:	48 bf 6a 8d 21 04 80 	movabs $0x8004218d6a,%rdi
  8004201a4e:	00 00 00 
  8004201a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a56:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201a5d:	00 00 00 
  8004201a60:	ff d2                	callq  *%rdx
  8004201a62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a67:	e9 4b 01 00 00       	jmpq   8004201bb7 <runcmd+0x20d>
  8004201a6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201a6f:	8d 50 01             	lea    0x1(%rax),%edx
  8004201a72:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201a75:	48 98                	cltq   
  8004201a77:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201a7e:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201a85:	ff 
  8004201a86:	eb 08                	jmp    8004201a90 <runcmd+0xe6>
  8004201a88:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201a8f:	01 
  8004201a90:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201a97:	0f b6 00             	movzbl (%rax),%eax
  8004201a9a:	84 c0                	test   %al,%al
  8004201a9c:	0f 84 39 ff ff ff    	je     80042019db <runcmd+0x31>
  8004201aa2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201aa9:	0f b6 00             	movzbl (%rax),%eax
  8004201aac:	0f be c0             	movsbl %al,%eax
  8004201aaf:	89 c6                	mov    %eax,%esi
  8004201ab1:	48 bf 65 8d 21 04 80 	movabs $0x8004218d65,%rdi
  8004201ab8:	00 00 00 
  8004201abb:	48 b8 ed 00 21 04 80 	movabs $0x80042100ed,%rax
  8004201ac2:	00 00 00 
  8004201ac5:	ff d0                	callq  *%rax
  8004201ac7:	48 85 c0             	test   %rax,%rax
  8004201aca:	74 bc                	je     8004201a88 <runcmd+0xde>
  8004201acc:	e9 0a ff ff ff       	jmpq   80042019db <runcmd+0x31>
  8004201ad1:	90                   	nop
  8004201ad2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201ad5:	48 98                	cltq   
  8004201ad7:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201ade:	ff 00 00 00 00 
  8004201ae3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201ae7:	75 0a                	jne    8004201af3 <runcmd+0x149>
  8004201ae9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201aee:	e9 c4 00 00 00       	jmpq   8004201bb7 <runcmd+0x20d>
  8004201af3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201afa:	e9 82 00 00 00       	jmpq   8004201b81 <runcmd+0x1d7>
  8004201aff:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b06:	00 00 00 
  8004201b09:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b0c:	48 63 d0             	movslq %eax,%rdx
  8004201b0f:	48 89 d0             	mov    %rdx,%rax
  8004201b12:	48 01 c0             	add    %rax,%rax
  8004201b15:	48 01 d0             	add    %rdx,%rax
  8004201b18:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b1c:	48 01 c8             	add    %rcx,%rax
  8004201b1f:	48 8b 10             	mov    (%rax),%rdx
  8004201b22:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b29:	48 89 d6             	mov    %rdx,%rsi
  8004201b2c:	48 89 c7             	mov    %rax,%rdi
  8004201b2f:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004201b36:	00 00 00 
  8004201b39:	ff d0                	callq  *%rax
  8004201b3b:	85 c0                	test   %eax,%eax
  8004201b3d:	75 3e                	jne    8004201b7d <runcmd+0x1d3>
  8004201b3f:	48 b9 80 c5 22 04 80 	movabs $0x800422c580,%rcx
  8004201b46:	00 00 00 
  8004201b49:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b4c:	48 63 d0             	movslq %eax,%rdx
  8004201b4f:	48 89 d0             	mov    %rdx,%rax
  8004201b52:	48 01 c0             	add    %rax,%rax
  8004201b55:	48 01 d0             	add    %rdx,%rax
  8004201b58:	48 c1 e0 03          	shl    $0x3,%rax
  8004201b5c:	48 01 c8             	add    %rcx,%rax
  8004201b5f:	48 83 c0 10          	add    $0x10,%rax
  8004201b63:	48 8b 00             	mov    (%rax),%rax
  8004201b66:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201b6d:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201b74:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201b77:	89 cf                	mov    %ecx,%edi
  8004201b79:	ff d0                	callq  *%rax
  8004201b7b:	eb 3a                	jmp    8004201bb7 <runcmd+0x20d>
  8004201b7d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201b81:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201b84:	83 f8 03             	cmp    $0x3,%eax
  8004201b87:	0f 86 72 ff ff ff    	jbe    8004201aff <runcmd+0x155>
  8004201b8d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201b94:	48 89 c6             	mov    %rax,%rsi
  8004201b97:	48 bf 87 8d 21 04 80 	movabs $0x8004218d87,%rdi
  8004201b9e:	00 00 00 
  8004201ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ba6:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201bad:	00 00 00 
  8004201bb0:	ff d2                	callq  *%rdx
  8004201bb2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bb7:	c9                   	leaveq 
  8004201bb8:	c3                   	retq   

0000008004201bb9 <monitor>:
  8004201bb9:	55                   	push   %rbp
  8004201bba:	48 89 e5             	mov    %rsp,%rbp
  8004201bbd:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bc5:	48 bf a0 8d 21 04 80 	movabs $0x8004218da0,%rdi
  8004201bcc:	00 00 00 
  8004201bcf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bd4:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201bdb:	00 00 00 
  8004201bde:	ff d2                	callq  *%rdx
  8004201be0:	48 bf c8 8d 21 04 80 	movabs $0x8004218dc8,%rdi
  8004201be7:	00 00 00 
  8004201bea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201bef:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201bf6:	00 00 00 
  8004201bf9:	ff d2                	callq  *%rdx
  8004201bfb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201c00:	74 13                	je     8004201c15 <monitor+0x5c>
  8004201c02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201c06:	48 89 c7             	mov    %rax,%rdi
  8004201c09:	48 b8 e0 c2 20 04 80 	movabs $0x800420c2e0,%rax
  8004201c10:	00 00 00 
  8004201c13:	ff d0                	callq  *%rax
  8004201c15:	48 bf ed 8d 21 04 80 	movabs $0x8004218ded,%rdi
  8004201c1c:	00 00 00 
  8004201c1f:	48 b8 02 fd 20 04 80 	movabs $0x800420fd02,%rax
  8004201c26:	00 00 00 
  8004201c29:	ff d0                	callq  *%rax
  8004201c2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201c2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201c34:	74 df                	je     8004201c15 <monitor+0x5c>
  8004201c36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c3e:	48 89 d6             	mov    %rdx,%rsi
  8004201c41:	48 89 c7             	mov    %rax,%rdi
  8004201c44:	48 b8 aa 19 20 04 80 	movabs $0x80042019aa,%rax
  8004201c4b:	00 00 00 
  8004201c4e:	ff d0                	callq  *%rax
  8004201c50:	85 c0                	test   %eax,%eax
  8004201c52:	78 02                	js     8004201c56 <monitor+0x9d>
  8004201c54:	eb bf                	jmp    8004201c15 <monitor+0x5c>
  8004201c56:	90                   	nop
  8004201c57:	90                   	nop
  8004201c58:	c9                   	leaveq 
  8004201c59:	c3                   	retq   

0000008004201c5a <page2ppn>:
  8004201c5a:	55                   	push   %rbp
  8004201c5b:	48 89 e5             	mov    %rsp,%rbp
  8004201c5e:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c62:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201c6a:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004201c71:	00 00 00 
  8004201c74:	48 8b 00             	mov    (%rax),%rax
  8004201c77:	48 29 c2             	sub    %rax,%rdx
  8004201c7a:	48 89 d0             	mov    %rdx,%rax
  8004201c7d:	48 c1 f8 04          	sar    $0x4,%rax
  8004201c81:	c9                   	leaveq 
  8004201c82:	c3                   	retq   

0000008004201c83 <page2pa>:
  8004201c83:	55                   	push   %rbp
  8004201c84:	48 89 e5             	mov    %rsp,%rbp
  8004201c87:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c93:	48 89 c7             	mov    %rax,%rdi
  8004201c96:	48 b8 5a 1c 20 04 80 	movabs $0x8004201c5a,%rax
  8004201c9d:	00 00 00 
  8004201ca0:	ff d0                	callq  *%rax
  8004201ca2:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201ca6:	c9                   	leaveq 
  8004201ca7:	c3                   	retq   

0000008004201ca8 <pa2page>:
  8004201ca8:	55                   	push   %rbp
  8004201ca9:	48 89 e5             	mov    %rsp,%rbp
  8004201cac:	48 83 ec 10          	sub    $0x10,%rsp
  8004201cb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201cb8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201cbc:	48 89 c2             	mov    %rax,%rdx
  8004201cbf:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004201cc6:	00 00 00 
  8004201cc9:	48 8b 00             	mov    (%rax),%rax
  8004201ccc:	48 39 c2             	cmp    %rax,%rdx
  8004201ccf:	72 2a                	jb     8004201cfb <pa2page+0x53>
  8004201cd1:	48 ba f8 8d 21 04 80 	movabs $0x8004218df8,%rdx
  8004201cd8:	00 00 00 
  8004201cdb:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201ce0:	48 bf 17 8e 21 04 80 	movabs $0x8004218e17,%rdi
  8004201ce7:	00 00 00 
  8004201cea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201cef:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  8004201cf6:	00 00 00 
  8004201cf9:	ff d1                	callq  *%rcx
  8004201cfb:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004201d02:	00 00 00 
  8004201d05:	48 8b 00             	mov    (%rax),%rax
  8004201d08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201d0c:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201d10:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201d14:	48 01 d0             	add    %rdx,%rax
  8004201d17:	c9                   	leaveq 
  8004201d18:	c3                   	retq   

0000008004201d19 <page2kva>:
  8004201d19:	55                   	push   %rbp
  8004201d1a:	48 89 e5             	mov    %rsp,%rbp
  8004201d1d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201d21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201d25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201d29:	48 89 c7             	mov    %rax,%rdi
  8004201d2c:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004201d33:	00 00 00 
  8004201d36:	ff d0                	callq  *%rax
  8004201d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d40:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201d44:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201d47:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201d4a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004201d51:	00 00 00 
  8004201d54:	48 8b 00             	mov    (%rax),%rax
  8004201d57:	48 39 c2             	cmp    %rax,%rdx
  8004201d5a:	72 32                	jb     8004201d8e <page2kva+0x75>
  8004201d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d60:	48 89 c1             	mov    %rax,%rcx
  8004201d63:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004201d6a:	00 00 00 
  8004201d6d:	be 62 00 00 00       	mov    $0x62,%esi
  8004201d72:	48 bf 17 8e 21 04 80 	movabs $0x8004218e17,%rdi
  8004201d79:	00 00 00 
  8004201d7c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d81:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004201d88:	00 00 00 
  8004201d8b:	41 ff d0             	callq  *%r8
  8004201d8e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201d95:	00 00 00 
  8004201d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201d9c:	48 01 d0             	add    %rdx,%rax
  8004201d9f:	c9                   	leaveq 
  8004201da0:	c3                   	retq   

0000008004201da1 <restrictive_type>:
  8004201da1:	55                   	push   %rbp
  8004201da2:	48 89 e5             	mov    %rsp,%rbp
  8004201da5:	48 83 ec 08          	sub    $0x8,%rsp
  8004201da9:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201dac:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201daf:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201db3:	74 06                	je     8004201dbb <restrictive_type+0x1a>
  8004201db5:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201db9:	75 07                	jne    8004201dc2 <restrictive_type+0x21>
  8004201dbb:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201dc0:	eb 3e                	jmp    8004201e00 <restrictive_type+0x5f>
  8004201dc2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201dc6:	74 06                	je     8004201dce <restrictive_type+0x2d>
  8004201dc8:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201dcc:	75 07                	jne    8004201dd5 <restrictive_type+0x34>
  8004201dce:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201dd3:	eb 2b                	jmp    8004201e00 <restrictive_type+0x5f>
  8004201dd5:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201dd9:	74 06                	je     8004201de1 <restrictive_type+0x40>
  8004201ddb:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201ddf:	75 07                	jne    8004201de8 <restrictive_type+0x47>
  8004201de1:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201de6:	eb 18                	jmp    8004201e00 <restrictive_type+0x5f>
  8004201de8:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201dec:	74 06                	je     8004201df4 <restrictive_type+0x53>
  8004201dee:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201df2:	75 07                	jne    8004201dfb <restrictive_type+0x5a>
  8004201df4:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201df9:	eb 05                	jmp    8004201e00 <restrictive_type+0x5f>
  8004201dfb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201e00:	c9                   	leaveq 
  8004201e01:	c3                   	retq   

0000008004201e02 <nvram_read>:
  8004201e02:	55                   	push   %rbp
  8004201e03:	48 89 e5             	mov    %rsp,%rbp
  8004201e06:	53                   	push   %rbx
  8004201e07:	48 83 ec 18          	sub    $0x18,%rsp
  8004201e0b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201e0e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e11:	89 c7                	mov    %eax,%edi
  8004201e13:	48 b8 52 92 20 04 80 	movabs $0x8004209252,%rax
  8004201e1a:	00 00 00 
  8004201e1d:	ff d0                	callq  *%rax
  8004201e1f:	89 c3                	mov    %eax,%ebx
  8004201e21:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201e24:	83 c0 01             	add    $0x1,%eax
  8004201e27:	89 c7                	mov    %eax,%edi
  8004201e29:	48 b8 52 92 20 04 80 	movabs $0x8004209252,%rax
  8004201e30:	00 00 00 
  8004201e33:	ff d0                	callq  *%rax
  8004201e35:	c1 e0 08             	shl    $0x8,%eax
  8004201e38:	09 d8                	or     %ebx,%eax
  8004201e3a:	48 83 c4 18          	add    $0x18,%rsp
  8004201e3e:	5b                   	pop    %rbx
  8004201e3f:	5d                   	pop    %rbp
  8004201e40:	c3                   	retq   

0000008004201e41 <multiboot_read>:
  8004201e41:	55                   	push   %rbp
  8004201e42:	48 89 e5             	mov    %rsp,%rbp
  8004201e45:	53                   	push   %rbx
  8004201e46:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  8004201e4d:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201e54:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201e5b:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201e62:	48 89 e0             	mov    %rsp,%rax
  8004201e65:	48 89 c3             	mov    %rax,%rbx
  8004201e68:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e6f:	8b 40 30             	mov    0x30(%rax),%eax
  8004201e72:	89 c0                	mov    %eax,%eax
  8004201e74:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201e78:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201e7f:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201e82:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201e87:	f7 e2                	mul    %edx
  8004201e89:	89 d0                	mov    %edx,%eax
  8004201e8b:	c1 e8 04             	shr    $0x4,%eax
  8004201e8e:	89 c0                	mov    %eax,%eax
  8004201e90:	48 89 c2             	mov    %rax,%rdx
  8004201e93:	48 83 ea 01          	sub    $0x1,%rdx
  8004201e97:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201e9b:	49 89 c2             	mov    %rax,%r10
  8004201e9e:	41 bb 00 00 00 00    	mov    $0x0,%r11d
  8004201ea4:	49 89 c0             	mov    %rax,%r8
  8004201ea7:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201ead:	48 c1 e0 03          	shl    $0x3,%rax
  8004201eb1:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201eb5:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201eba:	48 83 e8 01          	sub    $0x1,%rax
  8004201ebe:	48 01 d0             	add    %rdx,%rax
  8004201ec1:	be 10 00 00 00       	mov    $0x10,%esi
  8004201ec6:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201ecb:	48 f7 f6             	div    %rsi
  8004201ece:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201ed2:	48 29 c4             	sub    %rax,%rsp
  8004201ed5:	48 89 e0             	mov    %rsp,%rax
  8004201ed8:	48 83 c0 07          	add    $0x7,%rax
  8004201edc:	48 c1 e8 03          	shr    $0x3,%rax
  8004201ee0:	48 c1 e0 03          	shl    $0x3,%rax
  8004201ee4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201ee8:	48 bf 4b 8e 21 04 80 	movabs $0x8004218e4b,%rdi
  8004201eef:	00 00 00 
  8004201ef2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201ef7:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004201efe:	00 00 00 
  8004201f01:	ff d2                	callq  *%rdx
  8004201f03:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201f0a:	e9 6c 01 00 00       	jmpq   800420207b <multiboot_read+0x23a>
  8004201f0f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f12:	48 63 d0             	movslq %eax,%rdx
  8004201f15:	48 89 d0             	mov    %rdx,%rax
  8004201f18:	48 01 c0             	add    %rax,%rax
  8004201f1b:	48 01 d0             	add    %rdx,%rax
  8004201f1e:	48 c1 e0 03          	shl    $0x3,%rax
  8004201f22:	48 89 c2             	mov    %rax,%rdx
  8004201f25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201f29:	48 01 d0             	add    %rdx,%rax
  8004201f2c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201f30:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f34:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f37:	89 c0                	mov    %eax,%eax
  8004201f39:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f3d:	48 89 c2             	mov    %rax,%rdx
  8004201f40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f44:	8b 40 04             	mov    0x4(%rax),%eax
  8004201f47:	89 c0                	mov    %eax,%eax
  8004201f49:	48 01 d0             	add    %rdx,%rax
  8004201f4c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201f50:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f54:	8b 40 10             	mov    0x10(%rax),%eax
  8004201f57:	89 c0                	mov    %eax,%eax
  8004201f59:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f5d:	48 89 c2             	mov    %rax,%rdx
  8004201f60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f64:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201f67:	89 c0                	mov    %eax,%eax
  8004201f69:	48 01 d0             	add    %rdx,%rax
  8004201f6c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201f70:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f74:	8b 70 14             	mov    0x14(%rax),%esi
  8004201f77:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201f7b:	8b 00                	mov    (%rax),%eax
  8004201f7d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201f81:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201f85:	41 89 f0             	mov    %esi,%r8d
  8004201f88:	89 c6                	mov    %eax,%esi
  8004201f8a:	48 bf 60 8e 21 04 80 	movabs $0x8004218e60,%rdi
  8004201f91:	00 00 00 
  8004201f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f99:	49 b9 d4 95 20 04 80 	movabs $0x80042095d4,%r9
  8004201fa0:	00 00 00 
  8004201fa3:	41 ff d1             	callq  *%r9
  8004201fa6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201faa:	8b 40 14             	mov    0x14(%rax),%eax
  8004201fad:	83 f8 05             	cmp    $0x5,%eax
  8004201fb0:	77 0b                	ja     8004201fbd <multiboot_read+0x17c>
  8004201fb2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fb6:	8b 40 14             	mov    0x14(%rax),%eax
  8004201fb9:	85 c0                	test   %eax,%eax
  8004201fbb:	75 0b                	jne    8004201fc8 <multiboot_read+0x187>
  8004201fbd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201fc1:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201fc8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201fcf:	e9 85 00 00 00       	jmpq   8004202059 <multiboot_read+0x218>
  8004201fd4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201fd8:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201fdb:	48 63 d2             	movslq %edx,%rdx
  8004201fde:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201fe2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201fe6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201fea:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fed:	89 c0                	mov    %eax,%eax
  8004201fef:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff3:	48 89 c2             	mov    %rax,%rdx
  8004201ff6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201ffa:	8b 40 04             	mov    0x4(%rax),%eax
  8004201ffd:	89 c0                	mov    %eax,%eax
  8004201fff:	48 01 d0             	add    %rdx,%rax
  8004202002:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202006:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420200a:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800420200e:	76 45                	jbe    8004202055 <multiboot_read+0x214>
  8004202010:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202013:	83 c0 01             	add    $0x1,%eax
  8004202016:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004202019:	eb 30                	jmp    800420204b <multiboot_read+0x20a>
  800420201b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420201f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004202022:	48 63 d2             	movslq %edx,%rdx
  8004202025:	48 c1 e2 03          	shl    $0x3,%rdx
  8004202029:	48 01 c2             	add    %rax,%rdx
  800420202c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202030:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004202033:	48 63 c9             	movslq %ecx,%rcx
  8004202036:	48 c1 e1 03          	shl    $0x3,%rcx
  800420203a:	48 83 e9 08          	sub    $0x8,%rcx
  800420203e:	48 01 c8             	add    %rcx,%rax
  8004202041:	48 8b 00             	mov    (%rax),%rax
  8004202044:	48 89 02             	mov    %rax,(%rdx)
  8004202047:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  800420204b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420204e:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004202051:	75 c8                	jne    800420201b <multiboot_read+0x1da>
  8004202053:	eb 10                	jmp    8004202065 <multiboot_read+0x224>
  8004202055:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004202059:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420205c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800420205f:	0f 8c 6f ff ff ff    	jl     8004201fd4 <multiboot_read+0x193>
  8004202065:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202069:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420206c:	48 63 d2             	movslq %edx,%rdx
  800420206f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004202073:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004202077:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420207b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420207e:	48 63 c8             	movslq %eax,%rcx
  8004202081:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202088:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420208b:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202090:	f7 e2                	mul    %edx
  8004202092:	89 d0                	mov    %edx,%eax
  8004202094:	c1 e8 04             	shr    $0x4,%eax
  8004202097:	89 c0                	mov    %eax,%eax
  8004202099:	48 39 c1             	cmp    %rax,%rcx
  800420209c:	0f 82 6d fe ff ff    	jb     8004201f0f <multiboot_read+0xce>
  80042020a2:	48 bf 97 8e 21 04 80 	movabs $0x8004218e97,%rdi
  80042020a9:	00 00 00 
  80042020ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042020b1:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042020b8:	00 00 00 
  80042020bb:	ff d2                	callq  *%rdx
  80042020bd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  80042020c4:	e9 93 01 00 00       	jmpq   800420225c <multiboot_read+0x41b>
  80042020c9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020cc:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042020cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020d3:	48 63 d2             	movslq %edx,%rdx
  80042020d6:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020da:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042020de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042020e2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042020e5:	48 63 d2             	movslq %edx,%rdx
  80042020e8:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042020ec:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042020f0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020f4:	8b 40 08             	mov    0x8(%rax),%eax
  80042020f7:	89 c0                	mov    %eax,%eax
  80042020f9:	48 c1 e0 20          	shl    $0x20,%rax
  80042020fd:	48 89 c2             	mov    %rax,%rdx
  8004202100:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202104:	8b 40 04             	mov    0x4(%rax),%eax
  8004202107:	89 c0                	mov    %eax,%eax
  8004202109:	48 01 d0             	add    %rdx,%rax
  800420210c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004202110:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202114:	8b 40 08             	mov    0x8(%rax),%eax
  8004202117:	89 c0                	mov    %eax,%eax
  8004202119:	48 c1 e0 20          	shl    $0x20,%rax
  800420211d:	48 89 c2             	mov    %rax,%rdx
  8004202120:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202124:	8b 40 04             	mov    0x4(%rax),%eax
  8004202127:	89 c0                	mov    %eax,%eax
  8004202129:	48 01 d0             	add    %rdx,%rax
  800420212c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004202130:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202134:	8b 40 10             	mov    0x10(%rax),%eax
  8004202137:	89 c0                	mov    %eax,%eax
  8004202139:	48 c1 e0 20          	shl    $0x20,%rax
  800420213d:	48 89 c2             	mov    %rax,%rdx
  8004202140:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202144:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202147:	89 c0                	mov    %eax,%eax
  8004202149:	48 01 d0             	add    %rdx,%rax
  800420214c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004202153:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202157:	8b 40 10             	mov    0x10(%rax),%eax
  800420215a:	89 c0                	mov    %eax,%eax
  800420215c:	48 c1 e0 20          	shl    $0x20,%rax
  8004202160:	48 89 c2             	mov    %rax,%rdx
  8004202163:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202167:	8b 40 0c             	mov    0xc(%rax),%eax
  800420216a:	89 c0                	mov    %eax,%eax
  800420216c:	48 01 d0             	add    %rdx,%rax
  800420216f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004202176:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420217a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202181:	48 01 d0             	add    %rdx,%rax
  8004202184:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202188:	75 7c                	jne    8004202206 <multiboot_read+0x3c5>
  800420218a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420218e:	8b 50 14             	mov    0x14(%rax),%edx
  8004202191:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202195:	8b 40 14             	mov    0x14(%rax),%eax
  8004202198:	39 c2                	cmp    %eax,%edx
  800420219a:	75 6a                	jne    8004202206 <multiboot_read+0x3c5>
  800420219c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042021a3:	89 c2                	mov    %eax,%edx
  80042021a5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042021ac:	01 c2                	add    %eax,%edx
  80042021ae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021b2:	89 50 0c             	mov    %edx,0xc(%rax)
  80042021b5:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042021bc:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042021c3:	48 01 d0             	add    %rdx,%rax
  80042021c6:	48 c1 e8 20          	shr    $0x20,%rax
  80042021ca:	89 c2                	mov    %eax,%edx
  80042021cc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021d0:	89 50 10             	mov    %edx,0x10(%rax)
  80042021d3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021d7:	8b 50 04             	mov    0x4(%rax),%edx
  80042021da:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021de:	89 50 04             	mov    %edx,0x4(%rax)
  80042021e1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042021e5:	8b 50 08             	mov    0x8(%rax),%edx
  80042021e8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042021ec:	89 50 08             	mov    %edx,0x8(%rax)
  80042021ef:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042021f2:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042021f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042021f9:	48 63 d2             	movslq %edx,%rdx
  80042021fc:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  8004202203:	00 
  8004202204:	eb 52                	jmp    8004202258 <multiboot_read+0x417>
  8004202206:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420220a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202211:	48 01 d0             	add    %rdx,%rax
  8004202214:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202218:	76 3e                	jbe    8004202258 <multiboot_read+0x417>
  800420221a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420221e:	8b 50 14             	mov    0x14(%rax),%edx
  8004202221:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202225:	8b 40 14             	mov    0x14(%rax),%eax
  8004202228:	89 d6                	mov    %edx,%esi
  800420222a:	89 c7                	mov    %eax,%edi
  800420222c:	48 b8 a1 1d 20 04 80 	movabs $0x8004201da1,%rax
  8004202233:	00 00 00 
  8004202236:	ff d0                	callq  *%rax
  8004202238:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  800420223e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202242:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202248:	89 50 14             	mov    %edx,0x14(%rax)
  800420224b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420224f:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  8004202255:	89 50 14             	mov    %edx,0x14(%rax)
  8004202258:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420225c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420225f:	48 63 c8             	movslq %eax,%rcx
  8004202262:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202269:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420226c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202271:	f7 e2                	mul    %edx
  8004202273:	89 d0                	mov    %edx,%eax
  8004202275:	c1 e8 04             	shr    $0x4,%eax
  8004202278:	89 c0                	mov    %eax,%eax
  800420227a:	48 39 c1             	cmp    %rax,%rcx
  800420227d:	0f 82 46 fe ff ff    	jb     80042020c9 <multiboot_read+0x288>
  8004202283:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420228a:	e9 dc 00 00 00       	jmpq   800420236b <multiboot_read+0x52a>
  800420228f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202293:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004202296:	48 63 d2             	movslq %edx,%rdx
  8004202299:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  800420229d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  80042022a4:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  80042022ab:	00 
  80042022ac:	0f 84 b5 00 00 00    	je     8004202367 <multiboot_read+0x526>
  80042022b2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022b9:	8b 40 14             	mov    0x14(%rax),%eax
  80042022bc:	83 f8 01             	cmp    $0x1,%eax
  80042022bf:	74 13                	je     80042022d4 <multiboot_read+0x493>
  80042022c1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022c8:	8b 40 14             	mov    0x14(%rax),%eax
  80042022cb:	83 f8 03             	cmp    $0x3,%eax
  80042022ce:	0f 85 93 00 00 00    	jne    8004202367 <multiboot_read+0x526>
  80042022d4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022db:	8b 40 04             	mov    0x4(%rax),%eax
  80042022de:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  80042022e3:	77 49                	ja     800420232e <multiboot_read+0x4ed>
  80042022e5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042022ec:	8b 40 08             	mov    0x8(%rax),%eax
  80042022ef:	85 c0                	test   %eax,%eax
  80042022f1:	75 3b                	jne    800420232e <multiboot_read+0x4ed>
  80042022f3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042022fa:	48 8b 10             	mov    (%rax),%rdx
  80042022fd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202304:	8b 40 10             	mov    0x10(%rax),%eax
  8004202307:	89 c0                	mov    %eax,%eax
  8004202309:	48 c1 e0 20          	shl    $0x20,%rax
  800420230d:	48 89 c1             	mov    %rax,%rcx
  8004202310:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202317:	8b 40 0c             	mov    0xc(%rax),%eax
  800420231a:	89 c0                	mov    %eax,%eax
  800420231c:	48 01 c8             	add    %rcx,%rax
  800420231f:	48 01 c2             	add    %rax,%rdx
  8004202322:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202329:	48 89 10             	mov    %rdx,(%rax)
  800420232c:	eb 39                	jmp    8004202367 <multiboot_read+0x526>
  800420232e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202335:	48 8b 10             	mov    (%rax),%rdx
  8004202338:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420233f:	8b 40 10             	mov    0x10(%rax),%eax
  8004202342:	89 c0                	mov    %eax,%eax
  8004202344:	48 c1 e0 20          	shl    $0x20,%rax
  8004202348:	48 89 c1             	mov    %rax,%rcx
  800420234b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202352:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202355:	89 c0                	mov    %eax,%eax
  8004202357:	48 01 c8             	add    %rcx,%rax
  800420235a:	48 01 c2             	add    %rax,%rdx
  800420235d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202364:	48 89 10             	mov    %rdx,(%rax)
  8004202367:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420236b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420236e:	48 63 c8             	movslq %eax,%rcx
  8004202371:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202378:	8b 40 2c             	mov    0x2c(%rax),%eax
  800420237b:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202380:	f7 e2                	mul    %edx
  8004202382:	89 d0                	mov    %edx,%eax
  8004202384:	c1 e8 04             	shr    $0x4,%eax
  8004202387:	89 c0                	mov    %eax,%eax
  8004202389:	48 39 c1             	cmp    %rax,%rcx
  800420238c:	0f 82 fd fe ff ff    	jb     800420228f <multiboot_read+0x44e>
  8004202392:	48 89 dc             	mov    %rbx,%rsp
  8004202395:	90                   	nop
  8004202396:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  800420239a:	c9                   	leaveq 
  800420239b:	c3                   	retq   

000000800420239c <i386_detect_memory>:
  800420239c:	55                   	push   %rbp
  800420239d:	48 89 e5             	mov    %rsp,%rbp
  80042023a0:	48 83 ec 50          	sub    $0x50,%rsp
  80042023a4:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  80042023ab:	00 
  80042023ac:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042023b3:	00 
  80042023b4:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  80042023bb:	00 00 00 
  80042023be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042023c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042023c6:	48 8b 00             	mov    (%rax),%rax
  80042023c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042023cd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042023d2:	74 2d                	je     8004202401 <i386_detect_memory+0x65>
  80042023d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023d8:	8b 00                	mov    (%rax),%eax
  80042023da:	83 e0 40             	and    $0x40,%eax
  80042023dd:	85 c0                	test   %eax,%eax
  80042023df:	74 20                	je     8004202401 <i386_detect_memory+0x65>
  80042023e1:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  80042023e5:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  80042023e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042023ed:	48 89 ce             	mov    %rcx,%rsi
  80042023f0:	48 89 c7             	mov    %rax,%rdi
  80042023f3:	48 b8 41 1e 20 04 80 	movabs $0x8004201e41,%rax
  80042023fa:	00 00 00 
  80042023fd:	ff d0                	callq  *%rax
  80042023ff:	eb 34                	jmp    8004202435 <i386_detect_memory+0x99>
  8004202401:	bf 15 00 00 00       	mov    $0x15,%edi
  8004202406:	48 b8 02 1e 20 04 80 	movabs $0x8004201e02,%rax
  800420240d:	00 00 00 
  8004202410:	ff d0                	callq  *%rax
  8004202412:	c1 e0 0a             	shl    $0xa,%eax
  8004202415:	48 98                	cltq   
  8004202417:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420241b:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202420:	48 b8 02 1e 20 04 80 	movabs $0x8004201e02,%rax
  8004202427:	00 00 00 
  800420242a:	ff d0                	callq  *%rax
  800420242c:	c1 e0 0a             	shl    $0xa,%eax
  800420242f:	48 98                	cltq   
  8004202431:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202435:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202439:	48 85 c0             	test   %rax,%rax
  800420243c:	75 35                	jne    8004202473 <i386_detect_memory+0xd7>
  800420243e:	48 b9 99 8e 21 04 80 	movabs $0x8004218e99,%rcx
  8004202445:	00 00 00 
  8004202448:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420244f:	00 00 00 
  8004202452:	be 8b 00 00 00       	mov    $0x8b,%esi
  8004202457:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420245e:	00 00 00 
  8004202461:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202466:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420246d:	00 00 00 
  8004202470:	41 ff d0             	callq  *%r8
  8004202473:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202477:	48 c1 e8 0c          	shr    $0xc,%rax
  800420247b:	48 89 c2             	mov    %rax,%rdx
  800420247e:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202485:	00 00 00 
  8004202488:	48 89 10             	mov    %rdx,(%rax)
  800420248b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420248f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202493:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202497:	bf 17 00 00 00       	mov    $0x17,%edi
  800420249c:	48 b8 02 1e 20 04 80 	movabs $0x8004201e02,%rax
  80042024a3:	00 00 00 
  80042024a6:	ff d0                	callq  *%rax
  80042024a8:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80042024ad:	75 2c                	jne    80042024db <i386_detect_memory+0x13f>
  80042024af:	bf 34 00 00 00       	mov    $0x34,%edi
  80042024b4:	48 b8 02 1e 20 04 80 	movabs $0x8004201e02,%rax
  80042024bb:	00 00 00 
  80042024be:	ff d0                	callq  *%rax
  80042024c0:	c1 e0 10             	shl    $0x10,%eax
  80042024c3:	48 98                	cltq   
  80042024c5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042024c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042024cd:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  80042024d3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042024d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042024db:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042024e0:	74 1a                	je     80042024fc <i386_detect_memory+0x160>
  80042024e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042024e6:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  80042024ed:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042024f4:	00 00 00 
  80042024f7:	48 89 10             	mov    %rdx,(%rax)
  80042024fa:	eb 1a                	jmp    8004202516 <i386_detect_memory+0x17a>
  80042024fc:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202503:	00 00 00 
  8004202506:	48 8b 10             	mov    (%rax),%rdx
  8004202509:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202510:	00 00 00 
  8004202513:	48 89 10             	mov    %rdx,(%rax)
  8004202516:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420251d:	00 00 00 
  8004202520:	48 8b 30             	mov    (%rax),%rsi
  8004202523:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202527:	48 c1 e0 0c          	shl    $0xc,%rax
  800420252b:	48 c1 e8 0a          	shr    $0xa,%rax
  800420252f:	48 89 c1             	mov    %rax,%rcx
  8004202532:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202539:	00 00 00 
  800420253c:	48 8b 00             	mov    (%rax),%rax
  800420253f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202543:	48 c1 e8 0a          	shr    $0xa,%rax
  8004202547:	48 89 c2             	mov    %rax,%rdx
  800420254a:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202551:	00 00 00 
  8004202554:	48 8b 00             	mov    (%rax),%rax
  8004202557:	48 c1 e0 0c          	shl    $0xc,%rax
  800420255b:	48 c1 e8 14          	shr    $0x14,%rax
  800420255f:	49 89 f0             	mov    %rsi,%r8
  8004202562:	48 89 c6             	mov    %rax,%rsi
  8004202565:	48 bf c8 8e 21 04 80 	movabs $0x8004218ec8,%rdi
  800420256c:	00 00 00 
  800420256f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202574:	49 b9 d4 95 20 04 80 	movabs $0x80042095d4,%r9
  800420257b:	00 00 00 
  800420257e:	41 ff d1             	callq  *%r9
  8004202581:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202588:	00 
  8004202589:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202590:	07 
  8004202591:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202595:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202599:	48 c1 e8 14          	shr    $0x14,%rax
  800420259d:	48 89 c1             	mov    %rax,%rcx
  80042025a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025a4:	48 c1 e0 0c          	shl    $0xc,%rax
  80042025a8:	48 c1 e8 14          	shr    $0x14,%rax
  80042025ac:	48 89 c6             	mov    %rax,%rsi
  80042025af:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042025b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025b7:	49 89 c8             	mov    %rcx,%r8
  80042025ba:	48 89 d1             	mov    %rdx,%rcx
  80042025bd:	48 89 f2             	mov    %rsi,%rdx
  80042025c0:	48 89 c6             	mov    %rax,%rsi
  80042025c3:	48 bf 18 8f 21 04 80 	movabs $0x8004218f18,%rdi
  80042025ca:	00 00 00 
  80042025cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025d2:	49 b9 d4 95 20 04 80 	movabs $0x80042095d4,%r9
  80042025d9:	00 00 00 
  80042025dc:	41 ff d1             	callq  *%r9
  80042025df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042025e3:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042025e7:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  80042025ec:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042025f0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042025f7:	00 00 00 
  80042025fa:	48 8b 00             	mov    (%rax),%rax
  80042025fd:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004202601:	76 3a                	jbe    800420263d <i386_detect_memory+0x2a1>
  8004202603:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202607:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  800420260e:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202615:	00 00 00 
  8004202618:	48 89 10             	mov    %rdx,(%rax)
  800420261b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420261f:	48 89 c6             	mov    %rax,%rsi
  8004202622:	48 bf 80 8f 21 04 80 	movabs $0x8004218f80,%rdi
  8004202629:	00 00 00 
  800420262c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202631:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004202638:	00 00 00 
  800420263b:	ff d2                	callq  *%rdx
  800420263d:	90                   	nop
  800420263e:	c9                   	leaveq 
  800420263f:	c3                   	retq   

0000008004202640 <boot_alloc>:
  8004202640:	55                   	push   %rbp
  8004202641:	48 89 e5             	mov    %rsp,%rbp
  8004202644:	48 83 ec 40          	sub    $0x40,%rsp
  8004202648:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420264b:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202652:	00 00 00 
  8004202655:	48 8b 00             	mov    (%rax),%rax
  8004202658:	48 85 c0             	test   %rax,%rax
  800420265b:	75 45                	jne    80042026a2 <boot_alloc+0x62>
  800420265d:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  8004202664:	00 
  8004202665:	48 b8 10 00 6e 04 80 	movabs $0x80046e0010,%rax
  800420266c:	00 00 00 
  800420266f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004202673:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202677:	48 01 d0             	add    %rdx,%rax
  800420267a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420267e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202682:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202687:	48 f7 75 f8          	divq   -0x8(%rbp)
  800420268b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420268f:	48 29 d0             	sub    %rdx,%rax
  8004202692:	48 89 c2             	mov    %rax,%rdx
  8004202695:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  800420269c:	00 00 00 
  800420269f:	48 89 10             	mov    %rdx,(%rax)
  80042026a2:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042026a5:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  80042026ac:	00 00 00 
  80042026af:	48 8b 00             	mov    (%rax),%rax
  80042026b2:	48 01 c2             	add    %rax,%rdx
  80042026b5:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  80042026bc:	00 00 00 
  80042026bf:	48 8b 00             	mov    (%rax),%rax
  80042026c2:	48 39 c2             	cmp    %rax,%rdx
  80042026c5:	72 2f                	jb     80042026f6 <boot_alloc+0xb6>
  80042026c7:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  80042026ce:	00 00 00 
  80042026d1:	48 8b 10             	mov    (%rax),%rdx
  80042026d4:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042026d7:	48 01 c2             	add    %rax,%rdx
  80042026da:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042026e1:	00 00 00 
  80042026e4:	48 8b 00             	mov    (%rax),%rax
  80042026e7:	48 05 00 40 00 08    	add    $0x8004000,%rax
  80042026ed:	48 c1 e0 0c          	shl    $0xc,%rax
  80042026f1:	48 39 c2             	cmp    %rax,%rdx
  80042026f4:	76 2a                	jbe    8004202720 <boot_alloc+0xe0>
  80042026f6:	48 ba b0 8f 21 04 80 	movabs $0x8004218fb0,%rdx
  80042026fd:	00 00 00 
  8004202700:	be f3 00 00 00       	mov    $0xf3,%esi
  8004202705:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420270c:	00 00 00 
  800420270f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202714:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420271b:	00 00 00 
  800420271e:	ff d1                	callq  *%rcx
  8004202720:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202727:	00 00 00 
  800420272a:	48 8b 00             	mov    (%rax),%rax
  800420272d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202731:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004202738:	00 
  8004202739:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  8004202740:	00 00 00 
  8004202743:	48 8b 10             	mov    (%rax),%rdx
  8004202746:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202749:	48 01 d0             	add    %rdx,%rax
  800420274c:	48 89 c2             	mov    %rax,%rdx
  800420274f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202753:	48 01 d0             	add    %rdx,%rax
  8004202756:	48 83 e8 01          	sub    $0x1,%rax
  800420275a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420275e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202762:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202767:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420276b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420276f:	48 29 d0             	sub    %rdx,%rax
  8004202772:	48 89 c2             	mov    %rax,%rdx
  8004202775:	48 b8 48 e2 49 04 80 	movabs $0x800449e248,%rax
  800420277c:	00 00 00 
  800420277f:	48 89 10             	mov    %rdx,(%rax)
  8004202782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202786:	c9                   	leaveq 
  8004202787:	c3                   	retq   

0000008004202788 <x64_vm_init>:
  8004202788:	55                   	push   %rbp
  8004202789:	48 89 e5             	mov    %rsp,%rbp
  800420278c:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202790:	48 b8 9c 23 20 04 80 	movabs $0x800420239c,%rax
  8004202797:	00 00 00 
  800420279a:	ff d0                	callq  *%rax
  800420279c:	bf 00 10 00 00       	mov    $0x1000,%edi
  80042027a1:	48 b8 40 26 20 04 80 	movabs $0x8004202640,%rax
  80042027a8:	00 00 00 
  80042027ab:	ff d0                	callq  *%rax
  80042027ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042027b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027b5:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042027ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042027bf:	48 89 c7             	mov    %rax,%rdi
  80042027c2:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042027c9:	00 00 00 
  80042027cc:	ff d0                	callq  *%rax
  80042027ce:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042027d5:	00 00 00 
  80042027d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042027dc:	48 89 10             	mov    %rdx,(%rax)
  80042027df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042027e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042027e7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027ee:	00 00 00 
  80042027f1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042027f5:	77 32                	ja     8004202829 <x64_vm_init+0xa1>
  80042027f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042027fb:	48 89 c1             	mov    %rax,%rcx
  80042027fe:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  8004202805:	00 00 00 
  8004202808:	be 18 01 00 00       	mov    $0x118,%esi
  800420280d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202814:	00 00 00 
  8004202817:	b8 00 00 00 00       	mov    $0x0,%eax
  800420281c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202823:	00 00 00 
  8004202826:	41 ff d0             	callq  *%r8
  8004202829:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202830:	ff ff ff 
  8004202833:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202837:	48 01 c2             	add    %rax,%rdx
  800420283a:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004202841:	00 00 00 
  8004202844:	48 89 10             	mov    %rdx,(%rax)
  8004202847:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420284e:	00 00 00 
  8004202851:	48 8b 00             	mov    (%rax),%rax
  8004202854:	48 c1 e0 04          	shl    $0x4,%rax
  8004202858:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420285c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202860:	89 c7                	mov    %eax,%edi
  8004202862:	48 b8 40 26 20 04 80 	movabs $0x8004202640,%rax
  8004202869:	00 00 00 
  800420286c:	ff d0                	callq  *%rax
  800420286e:	48 89 c2             	mov    %rax,%rdx
  8004202871:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202878:	00 00 00 
  800420287b:	48 89 10             	mov    %rdx,(%rax)
  800420287e:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202885:	00 00 00 
  8004202888:	48 8b 00             	mov    (%rax),%rax
  800420288b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420288f:	be 00 00 00 00       	mov    $0x0,%esi
  8004202894:	48 89 c7             	mov    %rax,%rdi
  8004202897:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  800420289e:	00 00 00 
  80042028a1:	ff d0                	callq  *%rax
  80042028a3:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  80042028a8:	48 b8 40 26 20 04 80 	movabs $0x8004202640,%rax
  80042028af:	00 00 00 
  80042028b2:	ff d0                	callq  *%rax
  80042028b4:	48 89 c2             	mov    %rax,%rdx
  80042028b7:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042028be:	00 00 00 
  80042028c1:	48 89 10             	mov    %rdx,(%rax)
  80042028c4:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042028cb:	00 00 00 
  80042028ce:	48 8b 00             	mov    (%rax),%rax
  80042028d1:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  80042028d6:	be 00 00 00 00       	mov    $0x0,%esi
  80042028db:	48 89 c7             	mov    %rax,%rdi
  80042028de:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042028e5:	00 00 00 
  80042028e8:	ff d0                	callq  *%rax
  80042028ea:	48 b8 44 2d 20 04 80 	movabs $0x8004202d44,%rax
  80042028f1:	00 00 00 
  80042028f4:	ff d0                	callq  *%rax
  80042028f6:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042028fd:	00 00 00 
  8004202900:	48 8b 00             	mov    (%rax),%rax
  8004202903:	48 c1 e0 04          	shl    $0x4,%rax
  8004202907:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420290b:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202912:	00 00 00 
  8004202915:	48 8b 00             	mov    (%rax),%rax
  8004202918:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420291c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202923:	00 00 00 
  8004202926:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420292a:	77 32                	ja     800420295e <x64_vm_init+0x1d6>
  800420292c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202930:	48 89 c1             	mov    %rax,%rcx
  8004202933:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  800420293a:	00 00 00 
  800420293d:	be 43 01 00 00       	mov    $0x143,%esi
  8004202942:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202949:	00 00 00 
  800420294c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202951:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202958:	00 00 00 
  800420295b:	41 ff d0             	callq  *%r8
  800420295e:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202965:	ff ff ff 
  8004202968:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420296c:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202970:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202977:	00 00 00 
  800420297a:	48 8b 00             	mov    (%rax),%rax
  800420297d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202981:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  8004202987:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  800420298e:	00 00 00 
  8004202991:	48 89 c7             	mov    %rax,%rdi
  8004202994:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  800420299b:	00 00 00 
  800420299e:	ff d0                	callq  *%rax
  80042029a0:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  80042029a7:	00 
  80042029a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042029ac:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042029b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042029b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029ba:	ba 00 00 00 00       	mov    $0x0,%edx
  80042029bf:	48 f7 75 d8          	divq   -0x28(%rbp)
  80042029c3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042029c7:	48 29 d0             	sub    %rdx,%rax
  80042029ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042029ce:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042029d5:	00 00 00 
  80042029d8:	48 8b 00             	mov    (%rax),%rax
  80042029db:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042029df:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042029e6:	00 00 00 
  80042029e9:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042029ed:	77 32                	ja     8004202a21 <x64_vm_init+0x299>
  80042029ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042029f3:	48 89 c1             	mov    %rax,%rcx
  80042029f6:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  80042029fd:	00 00 00 
  8004202a00:	be 51 01 00 00       	mov    $0x151,%esi
  8004202a05:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202a0c:	00 00 00 
  8004202a0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a14:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202a1b:	00 00 00 
  8004202a1e:	41 ff d0             	callq  *%r8
  8004202a21:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202a28:	ff ff ff 
  8004202a2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202a2f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202a33:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202a3a:	00 00 00 
  8004202a3d:	48 8b 00             	mov    (%rax),%rax
  8004202a40:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202a44:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  8004202a4a:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202a51:	00 00 00 
  8004202a54:	48 89 c7             	mov    %rax,%rdi
  8004202a57:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  8004202a5e:	00 00 00 
  8004202a61:	ff d0                	callq  *%rax
  8004202a63:	48 b8 00 c0 21 04 80 	movabs $0x800421c000,%rax
  8004202a6a:	00 00 00 
  8004202a6d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202a71:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202a78:	00 00 00 
  8004202a7b:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202a7f:	77 32                	ja     8004202ab3 <x64_vm_init+0x32b>
  8004202a81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202a85:	48 89 c1             	mov    %rax,%rcx
  8004202a88:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  8004202a8f:	00 00 00 
  8004202a92:	be 62 01 00 00       	mov    $0x162,%esi
  8004202a97:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202a9e:	00 00 00 
  8004202aa1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202aa6:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202aad:	00 00 00 
  8004202ab0:	41 ff d0             	callq  *%r8
  8004202ab3:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202aba:	ff ff ff 
  8004202abd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202ac1:	48 01 c2             	add    %rax,%rdx
  8004202ac4:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202acb:	00 00 00 
  8004202ace:	48 8b 00             	mov    (%rax),%rax
  8004202ad1:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202ad7:	48 89 d1             	mov    %rdx,%rcx
  8004202ada:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202adf:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  8004202ae6:	00 00 00 
  8004202ae9:	48 89 c7             	mov    %rax,%rdi
  8004202aec:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  8004202af3:	00 00 00 
  8004202af6:	ff d0                	callq  *%rax
  8004202af8:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202aff:	00 00 00 
  8004202b02:	48 8b 00             	mov    (%rax),%rax
  8004202b05:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202b09:	48 89 c2             	mov    %rax,%rdx
  8004202b0c:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202b13:	00 00 00 
  8004202b16:	48 8b 00             	mov    (%rax),%rax
  8004202b19:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202b1f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004202b24:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  8004202b2b:	00 00 00 
  8004202b2e:	48 89 c7             	mov    %rax,%rdi
  8004202b31:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  8004202b38:	00 00 00 
  8004202b3b:	ff d0                	callq  *%rax
  8004202b3d:	48 b8 58 2c 20 04 80 	movabs $0x8004202c58,%rax
  8004202b44:	00 00 00 
  8004202b47:	ff d0                	callq  *%rax
  8004202b49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202b4d:	48 83 c0 08          	add    $0x8,%rax
  8004202b51:	48 8b 00             	mov    (%rax),%rax
  8004202b54:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202b5a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202b5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b62:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202b66:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202b69:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202b6c:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202b73:	00 00 00 
  8004202b76:	48 8b 00             	mov    (%rax),%rax
  8004202b79:	48 39 c2             	cmp    %rax,%rdx
  8004202b7c:	72 32                	jb     8004202bb0 <x64_vm_init+0x428>
  8004202b7e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202b82:	48 89 c1             	mov    %rax,%rcx
  8004202b85:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004202b8c:	00 00 00 
  8004202b8f:	be 82 01 00 00       	mov    $0x182,%esi
  8004202b94:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202b9b:	00 00 00 
  8004202b9e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ba3:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202baa:	00 00 00 
  8004202bad:	41 ff d0             	callq  *%r8
  8004202bb0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202bb7:	00 00 00 
  8004202bba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202bbe:	48 01 d0             	add    %rdx,%rax
  8004202bc1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202bc5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202bc9:	48 8b 00             	mov    (%rax),%rax
  8004202bcc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202bd2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202bd6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bda:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202bde:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202be1:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202be4:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202beb:	00 00 00 
  8004202bee:	48 8b 00             	mov    (%rax),%rax
  8004202bf1:	48 39 c2             	cmp    %rax,%rdx
  8004202bf4:	72 32                	jb     8004202c28 <x64_vm_init+0x4a0>
  8004202bf6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202bfa:	48 89 c1             	mov    %rax,%rcx
  8004202bfd:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004202c04:	00 00 00 
  8004202c07:	be 83 01 00 00       	mov    $0x183,%esi
  8004202c0c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202c13:	00 00 00 
  8004202c16:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c1b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202c22:	00 00 00 
  8004202c25:	41 ff d0             	callq  *%r8
  8004202c28:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c2f:	00 00 00 
  8004202c32:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202c36:	48 01 d0             	add    %rdx,%rax
  8004202c39:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202c3d:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004202c44:	00 00 00 
  8004202c47:	48 8b 00             	mov    (%rax),%rax
  8004202c4a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202c4e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202c52:	0f 22 d8             	mov    %rax,%cr3
  8004202c55:	90                   	nop
  8004202c56:	c9                   	leaveq 
  8004202c57:	c3                   	retq   

0000008004202c58 <mem_init_mp>:
  8004202c58:	55                   	push   %rbp
  8004202c59:	48 89 e5             	mov    %rsp,%rbp
  8004202c5c:	48 83 ec 20          	sub    $0x20,%rsp
  8004202c60:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202c67:	e9 cb 00 00 00       	jmpq   8004202d37 <mem_init_mp+0xdf>
  8004202c6c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202c6f:	89 d0                	mov    %edx,%eax
  8004202c71:	01 c0                	add    %eax,%eax
  8004202c73:	01 d0                	add    %edx,%eax
  8004202c75:	c1 e0 0f             	shl    $0xf,%eax
  8004202c78:	48 98                	cltq   
  8004202c7a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202c81:	00 00 00 
  8004202c84:	48 29 c2             	sub    %rax,%rdx
  8004202c87:	48 89 d0             	mov    %rdx,%rax
  8004202c8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202c8e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202c91:	48 98                	cltq   
  8004202c93:	48 c1 e0 10          	shl    $0x10,%rax
  8004202c97:	48 89 c2             	mov    %rax,%rdx
  8004202c9a:	48 b8 00 00 6a 04 80 	movabs $0x80046a0000,%rax
  8004202ca1:	00 00 00 
  8004202ca4:	48 01 d0             	add    %rdx,%rax
  8004202ca7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202cab:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202cb2:	00 00 00 
  8004202cb5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202cb9:	77 32                	ja     8004202ced <mem_init_mp+0x95>
  8004202cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cbf:	48 89 c1             	mov    %rax,%rcx
  8004202cc2:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  8004202cc9:	00 00 00 
  8004202ccc:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202cd1:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202cd8:	00 00 00 
  8004202cdb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ce0:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202ce7:	00 00 00 
  8004202cea:	41 ff d0             	callq  *%r8
  8004202ced:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202cf4:	ff ff ff 
  8004202cf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202cfb:	48 01 c2             	add    %rax,%rdx
  8004202cfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202d02:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202d09:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004202d10:	00 00 00 
  8004202d13:	48 8b 00             	mov    (%rax),%rax
  8004202d16:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202d1c:	48 89 d1             	mov    %rdx,%rcx
  8004202d1f:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202d24:	48 89 c7             	mov    %rax,%rdi
  8004202d27:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  8004202d2e:	00 00 00 
  8004202d31:	ff d0                	callq  *%rax
  8004202d33:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202d37:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202d3b:	0f 8e 2b ff ff ff    	jle    8004202c6c <mem_init_mp+0x14>
  8004202d41:	90                   	nop
  8004202d42:	c9                   	leaveq 
  8004202d43:	c3                   	retq   

0000008004202d44 <page_init>:
  8004202d44:	55                   	push   %rbp
  8004202d45:	48 89 e5             	mov    %rsp,%rbp
  8004202d48:	48 83 ec 50          	sub    $0x50,%rsp
  8004202d4c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202d51:	48 b8 40 26 20 04 80 	movabs $0x8004202640,%rax
  8004202d58:	00 00 00 
  8004202d5b:	ff d0                	callq  *%rax
  8004202d5d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202d61:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202d68:	00 
  8004202d69:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202d70:	00 
  8004202d71:	e9 65 02 00 00       	jmpq   8004202fdb <page_init+0x297>
  8004202d76:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202d7d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202d82:	74 1a                	je     8004202d9e <page_init+0x5a>
  8004202d84:	48 b8 30 e2 49 04 80 	movabs $0x800449e230,%rax
  8004202d8b:	00 00 00 
  8004202d8e:	48 8b 00             	mov    (%rax),%rax
  8004202d91:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202d95:	73 07                	jae    8004202d9e <page_init+0x5a>
  8004202d97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202d9e:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202da3:	75 07                	jne    8004202dac <page_init+0x68>
  8004202da5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202db0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202db4:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202dbb:	00 00 00 
  8004202dbe:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202dc2:	77 32                	ja     8004202df6 <page_init+0xb2>
  8004202dc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202dc8:	48 89 c1             	mov    %rax,%rcx
  8004202dcb:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  8004202dd2:	00 00 00 
  8004202dd5:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202dda:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202de1:	00 00 00 
  8004202de4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202de9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202df0:	00 00 00 
  8004202df3:	41 ff d0             	callq  *%r8
  8004202df6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202dfd:	ff ff ff 
  8004202e00:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e0b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202e0f:	77 07                	ja     8004202e18 <page_init+0xd4>
  8004202e11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202e18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202e1c:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202e22:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202e26:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202e2a:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202e31:	00 00 00 
  8004202e34:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202e38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e3c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202e40:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202e43:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202e46:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202e4d:	00 00 00 
  8004202e50:	48 8b 00             	mov    (%rax),%rax
  8004202e53:	48 39 c2             	cmp    %rax,%rdx
  8004202e56:	72 32                	jb     8004202e8a <page_init+0x146>
  8004202e58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e5c:	48 89 c1             	mov    %rax,%rcx
  8004202e5f:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004202e66:	00 00 00 
  8004202e69:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202e6e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202e75:	00 00 00 
  8004202e78:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202e7d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202e84:	00 00 00 
  8004202e87:	41 ff d0             	callq  *%r8
  8004202e8a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202e91:	00 00 00 
  8004202e94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202e98:	48 01 d0             	add    %rdx,%rax
  8004202e9b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202e9f:	0f 87 84 00 00 00    	ja     8004202f29 <page_init+0x1e5>
  8004202ea5:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202eac:	00 00 00 
  8004202eaf:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202eb5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202eb9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202ebd:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ec1:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202ec4:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202ec7:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202ece:	00 00 00 
  8004202ed1:	48 8b 00             	mov    (%rax),%rax
  8004202ed4:	48 39 c2             	cmp    %rax,%rdx
  8004202ed7:	72 32                	jb     8004202f0b <page_init+0x1c7>
  8004202ed9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202edd:	48 89 c1             	mov    %rax,%rcx
  8004202ee0:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004202ee7:	00 00 00 
  8004202eea:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202eef:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004202ef6:	00 00 00 
  8004202ef9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202efe:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004202f05:	00 00 00 
  8004202f08:	41 ff d0             	callq  *%r8
  8004202f0b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202f12:	00 00 00 
  8004202f15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202f19:	48 01 d0             	add    %rdx,%rax
  8004202f1c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202f20:	76 07                	jbe    8004202f29 <page_init+0x1e5>
  8004202f22:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202f29:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f30:	00 00 00 
  8004202f33:	48 8b 00             	mov    (%rax),%rax
  8004202f36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f3a:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f3e:	48 01 d0             	add    %rdx,%rax
  8004202f41:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004202f44:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202f48:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f4f:	00 00 00 
  8004202f52:	48 8b 00             	mov    (%rax),%rax
  8004202f55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f59:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f5d:	48 01 d0             	add    %rdx,%rax
  8004202f60:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202f67:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202f6b:	75 69                	jne    8004202fd6 <page_init+0x292>
  8004202f6d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202f72:	74 21                	je     8004202f95 <page_init+0x251>
  8004202f74:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f7b:	00 00 00 
  8004202f7e:	48 8b 00             	mov    (%rax),%rax
  8004202f81:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202f85:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202f89:	48 01 c2             	add    %rax,%rdx
  8004202f8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202f90:	48 89 10             	mov    %rdx,(%rax)
  8004202f93:	eb 25                	jmp    8004202fba <page_init+0x276>
  8004202f95:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202f9c:	00 00 00 
  8004202f9f:	48 8b 00             	mov    (%rax),%rax
  8004202fa2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fa6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202faa:	48 01 c2             	add    %rax,%rdx
  8004202fad:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004202fb4:	00 00 00 
  8004202fb7:	48 89 10             	mov    %rdx,(%rax)
  8004202fba:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004202fc1:	00 00 00 
  8004202fc4:	48 8b 00             	mov    (%rax),%rax
  8004202fc7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fcb:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202fcf:	48 01 d0             	add    %rdx,%rax
  8004202fd2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202fd6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202fdb:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004202fe2:	00 00 00 
  8004202fe5:	48 8b 00             	mov    (%rax),%rax
  8004202fe8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202fec:	0f 82 84 fd ff ff    	jb     8004202d76 <page_init+0x32>
  8004202ff2:	90                   	nop
  8004202ff3:	c9                   	leaveq 
  8004202ff4:	c3                   	retq   

0000008004202ff5 <page_alloc>:
  8004202ff5:	55                   	push   %rbp
  8004202ff6:	48 89 e5             	mov    %rsp,%rbp
  8004202ff9:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ffd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004203000:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004203007:	00 00 00 
  800420300a:	48 8b 00             	mov    (%rax),%rax
  800420300d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203011:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203016:	74 5e                	je     8004203076 <page_alloc+0x81>
  8004203018:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420301f:	00 00 00 
  8004203022:	48 8b 00             	mov    (%rax),%rax
  8004203025:	48 8b 10             	mov    (%rax),%rdx
  8004203028:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420302f:	00 00 00 
  8004203032:	48 89 10             	mov    %rdx,(%rax)
  8004203035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203039:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203040:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004203043:	83 e0 01             	and    $0x1,%eax
  8004203046:	85 c0                	test   %eax,%eax
  8004203048:	74 2c                	je     8004203076 <page_alloc+0x81>
  800420304a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420304e:	48 89 c7             	mov    %rax,%rdi
  8004203051:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  8004203058:	00 00 00 
  800420305b:	ff d0                	callq  *%rax
  800420305d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004203062:	be 00 00 00 00       	mov    $0x0,%esi
  8004203067:	48 89 c7             	mov    %rax,%rdi
  800420306a:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004203071:	00 00 00 
  8004203074:	ff d0                	callq  *%rax
  8004203076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420307a:	c9                   	leaveq 
  800420307b:	c3                   	retq   

000000800420307c <page_initpp>:
  800420307c:	55                   	push   %rbp
  800420307d:	48 89 e5             	mov    %rsp,%rbp
  8004203080:	48 83 ec 10          	sub    $0x10,%rsp
  8004203084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203088:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420308c:	ba 10 00 00 00       	mov    $0x10,%edx
  8004203091:	be 00 00 00 00       	mov    $0x0,%esi
  8004203096:	48 89 c7             	mov    %rax,%rdi
  8004203099:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042030a0:	00 00 00 
  80042030a3:	ff d0                	callq  *%rax
  80042030a5:	90                   	nop
  80042030a6:	c9                   	leaveq 
  80042030a7:	c3                   	retq   

00000080042030a8 <page_free>:
  80042030a8:	55                   	push   %rbp
  80042030a9:	48 89 e5             	mov    %rsp,%rbp
  80042030ac:	48 83 ec 10          	sub    $0x10,%rsp
  80042030b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042030b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030b8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030bc:	66 85 c0             	test   %ax,%ax
  80042030bf:	75 0c                	jne    80042030cd <page_free+0x25>
  80042030c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042030c5:	48 8b 00             	mov    (%rax),%rax
  80042030c8:	48 85 c0             	test   %rax,%rax
  80042030cb:	74 2c                	je     80042030f9 <page_free+0x51>
  80042030cd:	48 ba 00 90 21 04 80 	movabs $0x8004219000,%rdx
  80042030d4:	00 00 00 
  80042030d7:	be 3d 02 00 00       	mov    $0x23d,%esi
  80042030dc:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042030e3:	00 00 00 
  80042030e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042030eb:	48 b9 28 07 20 04 80 	movabs $0x8004200728,%rcx
  80042030f2:	00 00 00 
  80042030f5:	ff d1                	callq  *%rcx
  80042030f7:	eb 2f                	jmp    8004203128 <page_free+0x80>
  80042030f9:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004203100:	00 00 00 
  8004203103:	48 8b 10             	mov    (%rax),%rdx
  8004203106:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420310a:	48 89 10             	mov    %rdx,(%rax)
  800420310d:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004203114:	00 00 00 
  8004203117:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420311b:	48 89 10             	mov    %rdx,(%rax)
  800420311e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203122:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004203128:	c9                   	leaveq 
  8004203129:	c3                   	retq   

000000800420312a <page_decref>:
  800420312a:	55                   	push   %rbp
  800420312b:	48 89 e5             	mov    %rsp,%rbp
  800420312e:	48 83 ec 10          	sub    $0x10,%rsp
  8004203132:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004203136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420313a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420313e:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004203141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203145:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203149:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420314d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203151:	66 85 c0             	test   %ax,%ax
  8004203154:	75 13                	jne    8004203169 <page_decref+0x3f>
  8004203156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420315a:	48 89 c7             	mov    %rax,%rdi
  800420315d:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004203164:	00 00 00 
  8004203167:	ff d0                	callq  *%rax
  8004203169:	90                   	nop
  800420316a:	c9                   	leaveq 
  800420316b:	c3                   	retq   

000000800420316c <pml4e_walk>:
  800420316c:	55                   	push   %rbp
  800420316d:	48 89 e5             	mov    %rsp,%rbp
  8004203170:	53                   	push   %rbx
  8004203171:	48 83 ec 68          	sub    $0x68,%rsp
  8004203175:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203179:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420317d:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203180:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203185:	0f 84 54 02 00 00    	je     80042033df <pml4e_walk+0x273>
  800420318b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420318f:	48 c1 e8 27          	shr    $0x27,%rax
  8004203193:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203198:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420319f:	00 
  80042031a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031a4:	48 01 d0             	add    %rdx,%rax
  80042031a7:	48 8b 00             	mov    (%rax),%rax
  80042031aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042031ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031b2:	83 e0 01             	and    $0x1,%eax
  80042031b5:	48 85 c0             	test   %rax,%rax
  80042031b8:	0f 85 82 01 00 00    	jne    8004203340 <pml4e_walk+0x1d4>
  80042031be:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042031c2:	0f 84 78 01 00 00    	je     8004203340 <pml4e_walk+0x1d4>
  80042031c8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042031cf:	00 
  80042031d0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042031d5:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  80042031dc:	00 00 00 
  80042031df:	ff d0                	callq  *%rax
  80042031e1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042031e5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042031ea:	0f 84 46 01 00 00    	je     8004203336 <pml4e_walk+0x1ca>
  80042031f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031f4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042031f8:	8d 50 01             	lea    0x1(%rax),%edx
  80042031fb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031ff:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203203:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203207:	48 c1 e8 27          	shr    $0x27,%rax
  800420320b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203210:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203217:	00 
  8004203218:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420321c:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203220:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203224:	48 89 c7             	mov    %rax,%rdi
  8004203227:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  800420322e:	00 00 00 
  8004203231:	ff d0                	callq  *%rax
  8004203233:	48 83 c8 07          	or     $0x7,%rax
  8004203237:	48 89 03             	mov    %rax,(%rbx)
  800420323a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420323e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203242:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203247:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420324e:	00 
  800420324f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203253:	48 01 d0             	add    %rdx,%rax
  8004203256:	48 8b 00             	mov    (%rax),%rax
  8004203259:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420325f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203263:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203267:	48 c1 e8 0c          	shr    $0xc,%rax
  800420326b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420326e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203271:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203278:	00 00 00 
  800420327b:	48 8b 00             	mov    (%rax),%rax
  800420327e:	48 39 c2             	cmp    %rax,%rdx
  8004203281:	72 32                	jb     80042032b5 <pml4e_walk+0x149>
  8004203283:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203287:	48 89 c1             	mov    %rax,%rcx
  800420328a:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004203291:	00 00 00 
  8004203294:	be 79 02 00 00       	mov    $0x279,%esi
  8004203299:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042032a0:	00 00 00 
  80042032a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042032a8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042032af:	00 00 00 
  80042032b2:	41 ff d0             	callq  *%r8
  80042032b5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042032bc:	00 00 00 
  80042032bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042032c3:	48 01 d0             	add    %rdx,%rax
  80042032c6:	48 89 c1             	mov    %rax,%rcx
  80042032c9:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042032cc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032d0:	48 89 c6             	mov    %rax,%rsi
  80042032d3:	48 89 cf             	mov    %rcx,%rdi
  80042032d6:	48 b8 eb 33 20 04 80 	movabs $0x80042033eb,%rax
  80042032dd:	00 00 00 
  80042032e0:	ff d0                	callq  *%rax
  80042032e2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042032e6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042032eb:	74 09                	je     80042032f6 <pml4e_walk+0x18a>
  80042032ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042032f1:	e9 ee 00 00 00       	jmpq   80042033e4 <pml4e_walk+0x278>
  80042032f6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032fa:	48 c1 e8 27          	shr    $0x27,%rax
  80042032fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203303:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420330a:	00 
  800420330b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420330f:	48 01 d0             	add    %rdx,%rax
  8004203312:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203319:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331d:	48 89 c7             	mov    %rax,%rdi
  8004203320:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004203327:	00 00 00 
  800420332a:	ff d0                	callq  *%rax
  800420332c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203331:	e9 ae 00 00 00       	jmpq   80042033e4 <pml4e_walk+0x278>
  8004203336:	b8 00 00 00 00       	mov    $0x0,%eax
  800420333b:	e9 a4 00 00 00       	jmpq   80042033e4 <pml4e_walk+0x278>
  8004203340:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203344:	83 e0 01             	and    $0x1,%eax
  8004203347:	48 85 c0             	test   %rax,%rax
  800420334a:	0f 84 8f 00 00 00    	je     80042033df <pml4e_walk+0x273>
  8004203350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203354:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420335a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420335e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203362:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203366:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203369:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420336c:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203373:	00 00 00 
  8004203376:	48 8b 00             	mov    (%rax),%rax
  8004203379:	48 39 c2             	cmp    %rax,%rdx
  800420337c:	72 32                	jb     80042033b0 <pml4e_walk+0x244>
  800420337e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203382:	48 89 c1             	mov    %rax,%rcx
  8004203385:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420338c:	00 00 00 
  800420338f:	be 83 02 00 00       	mov    $0x283,%esi
  8004203394:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420339b:	00 00 00 
  800420339e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033a3:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042033aa:	00 00 00 
  80042033ad:	41 ff d0             	callq  *%r8
  80042033b0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033b7:	00 00 00 
  80042033ba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042033be:	48 01 d0             	add    %rdx,%rax
  80042033c1:	48 89 c1             	mov    %rax,%rcx
  80042033c4:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033c7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042033cb:	48 89 c6             	mov    %rax,%rsi
  80042033ce:	48 89 cf             	mov    %rcx,%rdi
  80042033d1:	48 b8 eb 33 20 04 80 	movabs $0x80042033eb,%rax
  80042033d8:	00 00 00 
  80042033db:	ff d0                	callq  *%rax
  80042033dd:	eb 05                	jmp    80042033e4 <pml4e_walk+0x278>
  80042033df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033e4:	48 83 c4 68          	add    $0x68,%rsp
  80042033e8:	5b                   	pop    %rbx
  80042033e9:	5d                   	pop    %rbp
  80042033ea:	c3                   	retq   

00000080042033eb <pdpe_walk>:
  80042033eb:	55                   	push   %rbp
  80042033ec:	48 89 e5             	mov    %rsp,%rbp
  80042033ef:	53                   	push   %rbx
  80042033f0:	48 83 ec 68          	sub    $0x68,%rsp
  80042033f4:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042033f8:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042033fc:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042033ff:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203404:	0f 84 54 02 00 00    	je     800420365e <pdpe_walk+0x273>
  800420340a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420340e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203412:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203417:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420341e:	00 
  800420341f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203423:	48 01 d0             	add    %rdx,%rax
  8004203426:	48 8b 00             	mov    (%rax),%rax
  8004203429:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420342d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203431:	83 e0 01             	and    $0x1,%eax
  8004203434:	48 85 c0             	test   %rax,%rax
  8004203437:	0f 85 82 01 00 00    	jne    80042035bf <pdpe_walk+0x1d4>
  800420343d:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203441:	0f 84 78 01 00 00    	je     80042035bf <pdpe_walk+0x1d4>
  8004203447:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420344e:	00 
  800420344f:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203454:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  800420345b:	00 00 00 
  800420345e:	ff d0                	callq  *%rax
  8004203460:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203464:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203469:	0f 84 46 01 00 00    	je     80042035b5 <pdpe_walk+0x1ca>
  800420346f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203473:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203477:	8d 50 01             	lea    0x1(%rax),%edx
  800420347a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420347e:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203482:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203486:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420348a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420348f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203496:	00 
  8004203497:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420349b:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420349f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042034a3:	48 89 c7             	mov    %rax,%rdi
  80042034a6:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042034ad:	00 00 00 
  80042034b0:	ff d0                	callq  *%rax
  80042034b2:	48 83 c8 07          	or     $0x7,%rax
  80042034b6:	48 89 03             	mov    %rax,(%rbx)
  80042034b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042034bd:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042034c1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042034c6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042034cd:	00 
  80042034ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042034d2:	48 01 d0             	add    %rdx,%rax
  80042034d5:	48 8b 00             	mov    (%rax),%rax
  80042034d8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042034de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042034e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042034e6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042034ea:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  80042034ed:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042034f0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042034f7:	00 00 00 
  80042034fa:	48 8b 00             	mov    (%rax),%rax
  80042034fd:	48 39 c2             	cmp    %rax,%rdx
  8004203500:	72 32                	jb     8004203534 <pdpe_walk+0x149>
  8004203502:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203506:	48 89 c1             	mov    %rax,%rcx
  8004203509:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004203510:	00 00 00 
  8004203513:	be 9c 02 00 00       	mov    $0x29c,%esi
  8004203518:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420351f:	00 00 00 
  8004203522:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203527:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420352e:	00 00 00 
  8004203531:	41 ff d0             	callq  *%r8
  8004203534:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420353b:	00 00 00 
  800420353e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203542:	48 01 d0             	add    %rdx,%rax
  8004203545:	48 89 c1             	mov    %rax,%rcx
  8004203548:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420354b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420354f:	48 89 c6             	mov    %rax,%rsi
  8004203552:	48 89 cf             	mov    %rcx,%rdi
  8004203555:	48 b8 6a 36 20 04 80 	movabs $0x800420366a,%rax
  800420355c:	00 00 00 
  800420355f:	ff d0                	callq  *%rax
  8004203561:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203565:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420356a:	74 09                	je     8004203575 <pdpe_walk+0x18a>
  800420356c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203570:	e9 ee 00 00 00       	jmpq   8004203663 <pdpe_walk+0x278>
  8004203575:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203579:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420357d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203582:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203589:	00 
  800420358a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420358e:	48 01 d0             	add    %rdx,%rax
  8004203591:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203598:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420359c:	48 89 c7             	mov    %rax,%rdi
  800420359f:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  80042035a6:	00 00 00 
  80042035a9:	ff d0                	callq  *%rax
  80042035ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042035b0:	e9 ae 00 00 00       	jmpq   8004203663 <pdpe_walk+0x278>
  80042035b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042035ba:	e9 a4 00 00 00       	jmpq   8004203663 <pdpe_walk+0x278>
  80042035bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035c3:	83 e0 01             	and    $0x1,%eax
  80042035c6:	48 85 c0             	test   %rax,%rax
  80042035c9:	0f 84 8f 00 00 00    	je     800420365e <pdpe_walk+0x273>
  80042035cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042035d3:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042035d9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042035dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042035e1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035e5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  80042035e8:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042035eb:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042035f2:	00 00 00 
  80042035f5:	48 8b 00             	mov    (%rax),%rax
  80042035f8:	48 39 c2             	cmp    %rax,%rdx
  80042035fb:	72 32                	jb     800420362f <pdpe_walk+0x244>
  80042035fd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203601:	48 89 c1             	mov    %rax,%rcx
  8004203604:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420360b:	00 00 00 
  800420360e:	be a6 02 00 00       	mov    $0x2a6,%esi
  8004203613:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420361a:	00 00 00 
  800420361d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203622:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004203629:	00 00 00 
  800420362c:	41 ff d0             	callq  *%r8
  800420362f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203636:	00 00 00 
  8004203639:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420363d:	48 01 d0             	add    %rdx,%rax
  8004203640:	48 89 c1             	mov    %rax,%rcx
  8004203643:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203646:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420364a:	48 89 c6             	mov    %rax,%rsi
  800420364d:	48 89 cf             	mov    %rcx,%rdi
  8004203650:	48 b8 6a 36 20 04 80 	movabs $0x800420366a,%rax
  8004203657:	00 00 00 
  800420365a:	ff d0                	callq  *%rax
  800420365c:	eb 05                	jmp    8004203663 <pdpe_walk+0x278>
  800420365e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203663:	48 83 c4 68          	add    $0x68,%rsp
  8004203667:	5b                   	pop    %rbx
  8004203668:	5d                   	pop    %rbp
  8004203669:	c3                   	retq   

000000800420366a <pgdir_walk>:
  800420366a:	55                   	push   %rbp
  800420366b:	48 89 e5             	mov    %rsp,%rbp
  800420366e:	53                   	push   %rbx
  800420366f:	48 83 ec 58          	sub    $0x58,%rsp
  8004203673:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203677:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420367b:	89 55 ac             	mov    %edx,-0x54(%rbp)
  800420367e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203683:	0f 84 fd 01 00 00    	je     8004203886 <pgdir_walk+0x21c>
  8004203689:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420368d:	48 c1 e8 15          	shr    $0x15,%rax
  8004203691:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203696:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420369d:	00 
  800420369e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042036a2:	48 01 d0             	add    %rdx,%rax
  80042036a5:	48 8b 00             	mov    (%rax),%rax
  80042036a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042036ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036b0:	83 e0 01             	and    $0x1,%eax
  80042036b3:	48 85 c0             	test   %rax,%rax
  80042036b6:	0f 85 2f 01 00 00    	jne    80042037eb <pgdir_walk+0x181>
  80042036bc:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042036c0:	0f 84 25 01 00 00    	je     80042037eb <pgdir_walk+0x181>
  80042036c6:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042036cd:	00 
  80042036ce:	bf 01 00 00 00       	mov    $0x1,%edi
  80042036d3:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  80042036da:	00 00 00 
  80042036dd:	ff d0                	callq  *%rax
  80042036df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042036e3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042036e8:	0f 84 f3 00 00 00    	je     80042037e1 <pgdir_walk+0x177>
  80042036ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036f2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042036f6:	8d 50 01             	lea    0x1(%rax),%edx
  80042036f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042036fd:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203701:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203705:	48 c1 e8 15          	shr    $0x15,%rax
  8004203709:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420370e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203715:	00 
  8004203716:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420371a:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420371e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203722:	48 89 c7             	mov    %rax,%rdi
  8004203725:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  800420372c:	00 00 00 
  800420372f:	ff d0                	callq  *%rax
  8004203731:	48 83 c8 07          	or     $0x7,%rax
  8004203735:	48 89 03             	mov    %rax,(%rbx)
  8004203738:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420373c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203740:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203745:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420374c:	00 
  800420374d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203751:	48 c1 e8 15          	shr    $0x15,%rax
  8004203755:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420375a:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  8004203761:	00 
  8004203762:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203766:	48 01 c8             	add    %rcx,%rax
  8004203769:	48 8b 00             	mov    (%rax),%rax
  800420376c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203772:	48 01 d0             	add    %rdx,%rax
  8004203775:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203779:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420377d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203781:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203784:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203787:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420378e:	00 00 00 
  8004203791:	48 8b 00             	mov    (%rax),%rax
  8004203794:	48 39 c2             	cmp    %rax,%rdx
  8004203797:	72 32                	jb     80042037cb <pgdir_walk+0x161>
  8004203799:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420379d:	48 89 c1             	mov    %rax,%rcx
  80042037a0:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  80042037a7:	00 00 00 
  80042037aa:	be be 02 00 00       	mov    $0x2be,%esi
  80042037af:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042037b6:	00 00 00 
  80042037b9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037be:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042037c5:	00 00 00 
  80042037c8:	41 ff d0             	callq  *%r8
  80042037cb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042037d2:	00 00 00 
  80042037d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	e9 aa 00 00 00       	jmpq   800420388b <pgdir_walk+0x221>
  80042037e1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042037e6:	e9 a0 00 00 00       	jmpq   800420388b <pgdir_walk+0x221>
  80042037eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037ef:	83 e0 01             	and    $0x1,%eax
  80042037f2:	48 85 c0             	test   %rax,%rax
  80042037f5:	0f 84 8b 00 00 00    	je     8004203886 <pgdir_walk+0x21c>
  80042037fb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042037ff:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203803:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203808:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420380f:	00 
  8004203810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203814:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420381a:	48 01 d0             	add    %rdx,%rax
  800420381d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203821:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203825:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203829:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420382c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420382f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203836:	00 00 00 
  8004203839:	48 8b 00             	mov    (%rax),%rax
  800420383c:	48 39 c2             	cmp    %rax,%rdx
  800420383f:	72 32                	jb     8004203873 <pgdir_walk+0x209>
  8004203841:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203845:	48 89 c1             	mov    %rax,%rcx
  8004203848:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420384f:	00 00 00 
  8004203852:	be c3 02 00 00       	mov    $0x2c3,%esi
  8004203857:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420385e:	00 00 00 
  8004203861:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203866:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420386d:	00 00 00 
  8004203870:	41 ff d0             	callq  *%r8
  8004203873:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420387a:	00 00 00 
  800420387d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203881:	48 01 d0             	add    %rdx,%rax
  8004203884:	eb 05                	jmp    800420388b <pgdir_walk+0x221>
  8004203886:	b8 00 00 00 00       	mov    $0x0,%eax
  800420388b:	48 83 c4 58          	add    $0x58,%rsp
  800420388f:	5b                   	pop    %rbx
  8004203890:	5d                   	pop    %rbp
  8004203891:	c3                   	retq   

0000008004203892 <boot_map_region>:
  8004203892:	55                   	push   %rbp
  8004203893:	48 89 e5             	mov    %rsp,%rbp
  8004203896:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420389a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420389e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042038a2:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  80042038a6:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  80042038aa:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  80042038ae:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042038b5:	00 
  80042038b6:	e9 aa 02 00 00       	jmpq   8004203b65 <boot_map_region+0x2d3>
  80042038bb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038c3:	48 01 d0             	add    %rdx,%rax
  80042038c6:	48 89 c1             	mov    %rax,%rcx
  80042038c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042038cd:	ba 01 00 00 00       	mov    $0x1,%edx
  80042038d2:	48 89 ce             	mov    %rcx,%rsi
  80042038d5:	48 89 c7             	mov    %rax,%rdi
  80042038d8:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  80042038df:	00 00 00 
  80042038e2:	ff d0                	callq  *%rax
  80042038e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042038e8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042038ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038f0:	48 01 d0             	add    %rdx,%rax
  80042038f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042038f7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042038fc:	74 23                	je     8004203921 <boot_map_region+0x8f>
  80042038fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203902:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203908:	48 89 c2             	mov    %rax,%rdx
  800420390b:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800420390e:	48 98                	cltq   
  8004203910:	48 09 d0             	or     %rdx,%rax
  8004203913:	48 83 c8 01          	or     $0x1,%rax
  8004203917:	48 89 c2             	mov    %rax,%rdx
  800420391a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420391e:	48 89 10             	mov    %rdx,(%rax)
  8004203921:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203925:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203929:	48 01 d0             	add    %rdx,%rax
  800420392c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203930:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203935:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420393c:	00 
  800420393d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203941:	48 01 d0             	add    %rdx,%rax
  8004203944:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203948:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420394c:	48 01 ca             	add    %rcx,%rdx
  800420394f:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203953:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203959:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203960:	00 
  8004203961:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203965:	48 01 ca             	add    %rcx,%rdx
  8004203968:	48 8b 0a             	mov    (%rdx),%rcx
  800420396b:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420396e:	48 63 d2             	movslq %edx,%rdx
  8004203971:	48 09 ca             	or     %rcx,%rdx
  8004203974:	48 83 ca 01          	or     $0x1,%rdx
  8004203978:	48 89 10             	mov    %rdx,(%rax)
  800420397b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420397f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203983:	48 01 d0             	add    %rdx,%rax
  8004203986:	48 c1 e8 27          	shr    $0x27,%rax
  800420398a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420398f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203996:	00 
  8004203997:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420399b:	48 01 d0             	add    %rdx,%rax
  800420399e:	48 8b 00             	mov    (%rax),%rax
  80042039a1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042039a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042039ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039af:	48 c1 e8 0c          	shr    $0xc,%rax
  80042039b3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042039b6:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042039b9:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042039c0:	00 00 00 
  80042039c3:	48 8b 00             	mov    (%rax),%rax
  80042039c6:	48 39 c2             	cmp    %rax,%rdx
  80042039c9:	72 32                	jb     80042039fd <boot_map_region+0x16b>
  80042039cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042039cf:	48 89 c1             	mov    %rax,%rcx
  80042039d2:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  80042039d9:	00 00 00 
  80042039dc:	be e6 02 00 00       	mov    $0x2e6,%esi
  80042039e1:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042039e8:	00 00 00 
  80042039eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042039f0:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042039f7:	00 00 00 
  80042039fa:	41 ff d0             	callq  *%r8
  80042039fd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203a04:	00 00 00 
  8004203a07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203a0b:	48 01 d0             	add    %rdx,%rax
  8004203a0e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203a12:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a1a:	48 01 d0             	add    %rdx,%rax
  8004203a1d:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a21:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a26:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a2d:	00 
  8004203a2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a32:	48 01 d0             	add    %rdx,%rax
  8004203a35:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203a39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203a3d:	48 01 ca             	add    %rcx,%rdx
  8004203a40:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203a44:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a4a:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a51:	00 
  8004203a52:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203a56:	48 01 ca             	add    %rcx,%rdx
  8004203a59:	48 8b 0a             	mov    (%rdx),%rcx
  8004203a5c:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203a5f:	48 63 d2             	movslq %edx,%rdx
  8004203a62:	48 09 ca             	or     %rcx,%rdx
  8004203a65:	48 83 ca 01          	or     $0x1,%rdx
  8004203a69:	48 89 10             	mov    %rdx,(%rax)
  8004203a6c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203a70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a74:	48 01 d0             	add    %rdx,%rax
  8004203a77:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203a7b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a80:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a87:	00 
  8004203a88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203a8c:	48 01 d0             	add    %rdx,%rax
  8004203a8f:	48 8b 00             	mov    (%rax),%rax
  8004203a92:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203a98:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203a9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203aa0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203aa4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004203aa7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203aaa:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203ab1:	00 00 00 
  8004203ab4:	48 8b 00             	mov    (%rax),%rax
  8004203ab7:	48 39 c2             	cmp    %rax,%rdx
  8004203aba:	72 32                	jb     8004203aee <boot_map_region+0x25c>
  8004203abc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203ac0:	48 89 c1             	mov    %rax,%rcx
  8004203ac3:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004203aca:	00 00 00 
  8004203acd:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203ad2:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004203ad9:	00 00 00 
  8004203adc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ae1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004203ae8:	00 00 00 
  8004203aeb:	41 ff d0             	callq  *%r8
  8004203aee:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203af5:	00 00 00 
  8004203af8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203afc:	48 01 d0             	add    %rdx,%rax
  8004203aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004203b03:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203b07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b0b:	48 01 d0             	add    %rdx,%rax
  8004203b0e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203b12:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b17:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b1e:	00 
  8004203b1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203b23:	48 01 d0             	add    %rdx,%rax
  8004203b26:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203b2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203b2e:	48 01 ca             	add    %rcx,%rdx
  8004203b31:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203b35:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b3b:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b42:	00 
  8004203b43:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203b47:	48 01 ca             	add    %rcx,%rdx
  8004203b4a:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b4d:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203b50:	48 63 d2             	movslq %edx,%rdx
  8004203b53:	48 09 ca             	or     %rcx,%rdx
  8004203b56:	48 83 ca 01          	or     $0x1,%rdx
  8004203b5a:	48 89 10             	mov    %rdx,(%rax)
  8004203b5d:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203b64:	00 
  8004203b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203b69:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203b6d:	0f 82 48 fd ff ff    	jb     80042038bb <boot_map_region+0x29>
  8004203b73:	90                   	nop
  8004203b74:	c9                   	leaveq 
  8004203b75:	c3                   	retq   

0000008004203b76 <page_insert>:
  8004203b76:	55                   	push   %rbp
  8004203b77:	48 89 e5             	mov    %rsp,%rbp
  8004203b7a:	48 83 ec 60          	sub    $0x60,%rsp
  8004203b7e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203b82:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203b86:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203b8a:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203b8d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203b92:	0f 84 4b 03 00 00    	je     8004203ee3 <page_insert+0x36d>
  8004203b98:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203b9d:	0f 84 40 03 00 00    	je     8004203ee3 <page_insert+0x36d>
  8004203ba3:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203ba7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bab:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203bb0:	48 89 ce             	mov    %rcx,%rsi
  8004203bb3:	48 89 c7             	mov    %rax,%rdi
  8004203bb6:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004203bbd:	00 00 00 
  8004203bc0:	ff d0                	callq  *%rax
  8004203bc2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203bc6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203bcb:	0f 84 0b 03 00 00    	je     8004203edc <page_insert+0x366>
  8004203bd1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203bd5:	48 c1 e8 27          	shr    $0x27,%rax
  8004203bd9:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203bde:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203be5:	00 
  8004203be6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203bea:	48 01 d0             	add    %rdx,%rax
  8004203bed:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203bf1:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203bf5:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203bfb:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c02:	00 
  8004203c03:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203c07:	48 01 ca             	add    %rcx,%rdx
  8004203c0a:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c0d:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c10:	80 e6 f1             	and    $0xf1,%dh
  8004203c13:	48 63 d2             	movslq %edx,%rdx
  8004203c16:	48 09 ca             	or     %rcx,%rdx
  8004203c19:	48 89 10             	mov    %rdx,(%rax)
  8004203c1c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c20:	48 c1 e8 27          	shr    $0x27,%rax
  8004203c24:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c29:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c30:	00 
  8004203c31:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203c35:	48 01 d0             	add    %rdx,%rax
  8004203c38:	48 8b 00             	mov    (%rax),%rax
  8004203c3b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203c41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203c45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c49:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203c4d:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203c50:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203c53:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203c5a:	00 00 00 
  8004203c5d:	48 8b 00             	mov    (%rax),%rax
  8004203c60:	48 39 c2             	cmp    %rax,%rdx
  8004203c63:	72 32                	jb     8004203c97 <page_insert+0x121>
  8004203c65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203c69:	48 89 c1             	mov    %rax,%rcx
  8004203c6c:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004203c73:	00 00 00 
  8004203c76:	be 13 03 00 00       	mov    $0x313,%esi
  8004203c7b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004203c82:	00 00 00 
  8004203c85:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c8a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004203c91:	00 00 00 
  8004203c94:	41 ff d0             	callq  *%r8
  8004203c97:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c9e:	00 00 00 
  8004203ca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ca5:	48 01 d0             	add    %rdx,%rax
  8004203ca8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203cac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cb0:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cb4:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203cb9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203cc0:	00 
  8004203cc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203cc5:	48 01 d0             	add    %rdx,%rax
  8004203cc8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ccc:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203cd0:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203cd6:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203cdd:	00 
  8004203cde:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203ce2:	48 01 ca             	add    %rcx,%rdx
  8004203ce5:	48 8b 0a             	mov    (%rdx),%rcx
  8004203ce8:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203ceb:	80 e6 f1             	and    $0xf1,%dh
  8004203cee:	48 63 d2             	movslq %edx,%rdx
  8004203cf1:	48 09 ca             	or     %rcx,%rdx
  8004203cf4:	48 89 10             	mov    %rdx,(%rax)
  8004203cf7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203cfb:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203cff:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d04:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d0b:	00 
  8004203d0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203d10:	48 01 d0             	add    %rdx,%rax
  8004203d13:	48 8b 00             	mov    (%rax),%rax
  8004203d16:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203d1c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203d20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d24:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203d28:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203d2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203d2e:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004203d35:	00 00 00 
  8004203d38:	48 8b 00             	mov    (%rax),%rax
  8004203d3b:	48 39 c2             	cmp    %rax,%rdx
  8004203d3e:	72 32                	jb     8004203d72 <page_insert+0x1fc>
  8004203d40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d44:	48 89 c1             	mov    %rax,%rcx
  8004203d47:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004203d4e:	00 00 00 
  8004203d51:	be 15 03 00 00       	mov    $0x315,%esi
  8004203d56:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004203d5d:	00 00 00 
  8004203d60:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d65:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004203d6c:	00 00 00 
  8004203d6f:	41 ff d0             	callq  *%r8
  8004203d72:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203d79:	00 00 00 
  8004203d7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203d80:	48 01 d0             	add    %rdx,%rax
  8004203d83:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203d87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203d8b:	48 c1 e8 15          	shr    $0x15,%rax
  8004203d8f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203d94:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203d9b:	00 
  8004203d9c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203da0:	48 01 d0             	add    %rdx,%rax
  8004203da3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203da7:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203dab:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203db1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203db8:	00 
  8004203db9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203dbd:	48 01 ca             	add    %rcx,%rdx
  8004203dc0:	48 8b 0a             	mov    (%rdx),%rcx
  8004203dc3:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203dc6:	80 e6 f1             	and    $0xf1,%dh
  8004203dc9:	48 63 d2             	movslq %edx,%rdx
  8004203dcc:	48 09 ca             	or     %rcx,%rdx
  8004203dcf:	48 89 10             	mov    %rdx,(%rax)
  8004203dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dd6:	48 8b 00             	mov    (%rax),%rax
  8004203dd9:	83 e0 01             	and    $0x1,%eax
  8004203ddc:	48 85 c0             	test   %rax,%rax
  8004203ddf:	74 72                	je     8004203e53 <page_insert+0x2dd>
  8004203de1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203de5:	48 89 c7             	mov    %rax,%rdi
  8004203de8:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004203def:	00 00 00 
  8004203df2:	ff d0                	callq  *%rax
  8004203df4:	48 89 c2             	mov    %rax,%rdx
  8004203df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dfb:	48 8b 00             	mov    (%rax),%rax
  8004203dfe:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203e04:	48 39 c2             	cmp    %rax,%rdx
  8004203e07:	75 4a                	jne    8004203e53 <page_insert+0x2dd>
  8004203e09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e0d:	48 8b 00             	mov    (%rax),%rax
  8004203e10:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203e16:	48 89 c2             	mov    %rax,%rdx
  8004203e19:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203e1c:	48 98                	cltq   
  8004203e1e:	48 09 d0             	or     %rdx,%rax
  8004203e21:	48 83 c8 01          	or     $0x1,%rax
  8004203e25:	48 89 c2             	mov    %rax,%rdx
  8004203e28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e2c:	48 89 10             	mov    %rdx,(%rax)
  8004203e2f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e37:	48 89 d6             	mov    %rdx,%rsi
  8004203e3a:	48 89 c7             	mov    %rax,%rdi
  8004203e3d:	48 b8 e9 3f 20 04 80 	movabs $0x8004203fe9,%rax
  8004203e44:	00 00 00 
  8004203e47:	ff d0                	callq  *%rax
  8004203e49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e4e:	e9 95 00 00 00       	jmpq   8004203ee8 <page_insert+0x372>
  8004203e53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e57:	48 8b 00             	mov    (%rax),%rax
  8004203e5a:	83 e0 01             	and    $0x1,%eax
  8004203e5d:	48 85 c0             	test   %rax,%rax
  8004203e60:	74 1a                	je     8004203e7c <page_insert+0x306>
  8004203e62:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203e66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203e6a:	48 89 d6             	mov    %rdx,%rsi
  8004203e6d:	48 89 c7             	mov    %rax,%rdi
  8004203e70:	48 b8 75 3f 20 04 80 	movabs $0x8004203f75,%rax
  8004203e77:	00 00 00 
  8004203e7a:	ff d0                	callq  *%rax
  8004203e7c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e80:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203e84:	8d 50 01             	lea    0x1(%rax),%edx
  8004203e87:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e8b:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203e8f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203e93:	48 89 c7             	mov    %rax,%rdi
  8004203e96:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004203e9d:	00 00 00 
  8004203ea0:	ff d0                	callq  *%rax
  8004203ea2:	48 89 c2             	mov    %rax,%rdx
  8004203ea5:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203ea8:	48 98                	cltq   
  8004203eaa:	48 09 d0             	or     %rdx,%rax
  8004203ead:	48 83 c8 01          	or     $0x1,%rax
  8004203eb1:	48 89 c2             	mov    %rax,%rdx
  8004203eb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203eb8:	48 89 10             	mov    %rdx,(%rax)
  8004203ebb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203ebf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ec3:	48 89 d6             	mov    %rdx,%rsi
  8004203ec6:	48 89 c7             	mov    %rax,%rdi
  8004203ec9:	48 b8 e9 3f 20 04 80 	movabs $0x8004203fe9,%rax
  8004203ed0:	00 00 00 
  8004203ed3:	ff d0                	callq  *%rax
  8004203ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eda:	eb 0c                	jmp    8004203ee8 <page_insert+0x372>
  8004203edc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ee1:	eb 05                	jmp    8004203ee8 <page_insert+0x372>
  8004203ee3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203ee8:	c9                   	leaveq 
  8004203ee9:	c3                   	retq   

0000008004203eea <page_lookup>:
  8004203eea:	55                   	push   %rbp
  8004203eeb:	48 89 e5             	mov    %rsp,%rbp
  8004203eee:	48 83 ec 30          	sub    $0x30,%rsp
  8004203ef2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ef6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203efa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203efe:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203f03:	74 69                	je     8004203f6e <page_lookup+0x84>
  8004203f05:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f0d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f12:	48 89 ce             	mov    %rcx,%rsi
  8004203f15:	48 89 c7             	mov    %rax,%rdi
  8004203f18:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004203f1f:	00 00 00 
  8004203f22:	ff d0                	callq  *%rax
  8004203f24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f28:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203f2d:	74 3f                	je     8004203f6e <page_lookup+0x84>
  8004203f2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f33:	48 8b 00             	mov    (%rax),%rax
  8004203f36:	83 e0 01             	and    $0x1,%eax
  8004203f39:	48 85 c0             	test   %rax,%rax
  8004203f3c:	74 30                	je     8004203f6e <page_lookup+0x84>
  8004203f3e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203f43:	74 0b                	je     8004203f50 <page_lookup+0x66>
  8004203f45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203f49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203f4d:	48 89 10             	mov    %rdx,(%rax)
  8004203f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f54:	48 8b 00             	mov    (%rax),%rax
  8004203f57:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203f5d:	48 89 c7             	mov    %rax,%rdi
  8004203f60:	48 b8 a8 1c 20 04 80 	movabs $0x8004201ca8,%rax
  8004203f67:	00 00 00 
  8004203f6a:	ff d0                	callq  *%rax
  8004203f6c:	eb 05                	jmp    8004203f73 <page_lookup+0x89>
  8004203f6e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203f73:	c9                   	leaveq 
  8004203f74:	c3                   	retq   

0000008004203f75 <page_remove>:
  8004203f75:	55                   	push   %rbp
  8004203f76:	48 89 e5             	mov    %rsp,%rbp
  8004203f79:	48 83 ec 20          	sub    $0x20,%rsp
  8004203f7d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203f81:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203f85:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203f89:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203f8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f91:	48 89 ce             	mov    %rcx,%rsi
  8004203f94:	48 89 c7             	mov    %rax,%rdi
  8004203f97:	48 b8 ea 3e 20 04 80 	movabs $0x8004203eea,%rax
  8004203f9e:	00 00 00 
  8004203fa1:	ff d0                	callq  *%rax
  8004203fa3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203fa7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203fac:	74 38                	je     8004203fe6 <page_remove+0x71>
  8004203fae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203fb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203fb6:	48 89 d6             	mov    %rdx,%rsi
  8004203fb9:	48 89 c7             	mov    %rax,%rdi
  8004203fbc:	48 b8 e9 3f 20 04 80 	movabs $0x8004203fe9,%rax
  8004203fc3:	00 00 00 
  8004203fc6:	ff d0                	callq  *%rax
  8004203fc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203fcc:	48 89 c7             	mov    %rax,%rdi
  8004203fcf:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004203fd6:	00 00 00 
  8004203fd9:	ff d0                	callq  *%rax
  8004203fdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203fdf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203fe6:	90                   	nop
  8004203fe7:	c9                   	leaveq 
  8004203fe8:	c3                   	retq   

0000008004203fe9 <tlb_invalidate>:
  8004203fe9:	55                   	push   %rbp
  8004203fea:	48 89 e5             	mov    %rsp,%rbp
  8004203fed:	48 83 ec 20          	sub    $0x20,%rsp
  8004203ff1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203ff5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203ff9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203ffe:	75 35                	jne    8004204035 <tlb_invalidate+0x4c>
  8004204000:	48 b9 27 90 21 04 80 	movabs $0x8004219027,%rcx
  8004204007:	00 00 00 
  800420400a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204011:	00 00 00 
  8004204014:	be 72 03 00 00       	mov    $0x372,%esi
  8004204019:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204020:	00 00 00 
  8004204023:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204028:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420402f:	00 00 00 
  8004204032:	41 ff d0             	callq  *%r8
  8004204035:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420403c:	00 00 00 
  800420403f:	ff d0                	callq  *%rax
  8004204041:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004204048:	00 00 00 
  800420404b:	48 98                	cltq   
  800420404d:	48 c1 e0 03          	shl    $0x3,%rax
  8004204051:	48 89 c1             	mov    %rax,%rcx
  8004204054:	48 c1 e1 04          	shl    $0x4,%rcx
  8004204058:	48 01 c8             	add    %rcx,%rax
  800420405b:	48 01 d0             	add    %rdx,%rax
  800420405e:	48 83 c0 08          	add    $0x8,%rax
  8004204062:	48 8b 00             	mov    (%rax),%rax
  8004204065:	48 85 c0             	test   %rax,%rax
  8004204068:	74 3d                	je     80042040a7 <tlb_invalidate+0xbe>
  800420406a:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004204071:	00 00 00 
  8004204074:	ff d0                	callq  *%rax
  8004204076:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420407d:	00 00 00 
  8004204080:	48 98                	cltq   
  8004204082:	48 c1 e0 03          	shl    $0x3,%rax
  8004204086:	48 89 c1             	mov    %rax,%rcx
  8004204089:	48 c1 e1 04          	shl    $0x4,%rcx
  800420408d:	48 01 c8             	add    %rcx,%rax
  8004204090:	48 01 d0             	add    %rdx,%rax
  8004204093:	48 83 c0 08          	add    $0x8,%rax
  8004204097:	48 8b 00             	mov    (%rax),%rax
  800420409a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040a1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042040a5:	75 0f                	jne    80042040b6 <tlb_invalidate+0xcd>
  80042040a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042040ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  80042040af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042040b3:	0f 01 38             	invlpg (%rax)
  80042040b6:	90                   	nop
  80042040b7:	c9                   	leaveq 
  80042040b8:	c3                   	retq   

00000080042040b9 <mmio_map_region>:
  80042040b9:	55                   	push   %rbp
  80042040ba:	48 89 e5             	mov    %rsp,%rbp
  80042040bd:	48 83 ec 30          	sub    $0x30,%rsp
  80042040c1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042040c5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042040c9:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  80042040d0:	00 00 00 
  80042040d3:	48 8b 00             	mov    (%rax),%rax
  80042040d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042040da:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  80042040e1:	00 
  80042040e2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040ea:	48 01 d0             	add    %rdx,%rax
  80042040ed:	48 83 e8 01          	sub    $0x1,%rax
  80042040f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042040f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042040f9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040fe:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004204102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204106:	48 29 d0             	sub    %rdx,%rax
  8004204109:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420410d:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204114:	00 00 00 
  8004204117:	48 8b 10             	mov    (%rax),%rdx
  800420411a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420411e:	48 01 c2             	add    %rax,%rdx
  8004204121:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204128:	00 00 00 
  800420412b:	48 89 10             	mov    %rdx,(%rax)
  800420412e:	48 b8 e0 c5 22 04 80 	movabs $0x800422c5e0,%rax
  8004204135:	00 00 00 
  8004204138:	48 8b 10             	mov    (%rax),%rdx
  800420413b:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004204142:	00 00 00 
  8004204145:	48 39 c2             	cmp    %rax,%rdx
  8004204148:	76 2a                	jbe    8004204174 <mmio_map_region+0xbb>
  800420414a:	48 ba 38 90 21 04 80 	movabs $0x8004219038,%rdx
  8004204151:	00 00 00 
  8004204154:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004204159:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204160:	00 00 00 
  8004204163:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204168:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420416f:	00 00 00 
  8004204172:	ff d1                	callq  *%rcx
  8004204174:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420417b:	00 00 00 
  800420417e:	48 8b 00             	mov    (%rax),%rax
  8004204181:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204185:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204189:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420418d:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  8004204193:	48 89 c7             	mov    %rax,%rdi
  8004204196:	48 b8 92 38 20 04 80 	movabs $0x8004203892,%rax
  800420419d:	00 00 00 
  80042041a0:	ff d0                	callq  *%rax
  80042041a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041a6:	c9                   	leaveq 
  80042041a7:	c3                   	retq   

00000080042041a8 <user_mem_check>:
  80042041a8:	55                   	push   %rbp
  80042041a9:	48 89 e5             	mov    %rsp,%rbp
  80042041ac:	48 83 ec 40          	sub    $0x40,%rsp
  80042041b0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042041b4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042041b8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042041bc:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  80042041bf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042041c7:	48 01 d0             	add    %rdx,%rax
  80042041ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042041ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042041d2:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042041d9:	00 00 00 
  80042041dc:	48 39 c2             	cmp    %rax,%rdx
  80042041df:	77 0e                	ja     80042041ef <user_mem_check+0x47>
  80042041e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042041e5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042041e9:	0f 86 bd 00 00 00    	jbe    80042042ac <user_mem_check+0x104>
  80042041ef:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042041f3:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  80042041fa:	00 00 00 
  80042041fd:	48 89 10             	mov    %rdx,(%rax)
  8004204200:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204205:	e9 b5 00 00 00       	jmpq   80042042bf <user_mem_check+0x117>
  800420420a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420420e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004204215:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004204219:	ba 00 00 00 00       	mov    $0x0,%edx
  800420421e:	48 89 ce             	mov    %rcx,%rsi
  8004204221:	48 89 c7             	mov    %rax,%rdi
  8004204224:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  800420422b:	00 00 00 
  800420422e:	ff d0                	callq  *%rax
  8004204230:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004204234:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004204239:	74 1f                	je     800420425a <user_mem_check+0xb2>
  800420423b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420423f:	48 8b 10             	mov    (%rax),%rdx
  8004204242:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204245:	83 c8 01             	or     $0x1,%eax
  8004204248:	48 98                	cltq   
  800420424a:	48 21 c2             	and    %rax,%rdx
  800420424d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004204250:	83 c8 01             	or     $0x1,%eax
  8004204253:	48 98                	cltq   
  8004204255:	48 39 c2             	cmp    %rax,%rdx
  8004204258:	74 18                	je     8004204272 <user_mem_check+0xca>
  800420425a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420425e:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  8004204265:	00 00 00 
  8004204268:	48 89 10             	mov    %rdx,(%rax)
  800420426b:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204270:	eb 4d                	jmp    80042042bf <user_mem_check+0x117>
  8004204272:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204279:	00 
  800420427a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420427e:	48 83 c0 01          	add    $0x1,%rax
  8004204282:	48 89 c2             	mov    %rax,%rdx
  8004204285:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204289:	48 01 d0             	add    %rdx,%rax
  800420428c:	48 83 e8 01          	sub    $0x1,%rax
  8004204290:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204294:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204298:	ba 00 00 00 00       	mov    $0x0,%edx
  800420429d:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042042a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042042a5:	48 29 d0             	sub    %rdx,%rax
  80042042a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042042ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042042b0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042042b4:	0f 82 50 ff ff ff    	jb     800420420a <user_mem_check+0x62>
  80042042ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042042bf:	c9                   	leaveq 
  80042042c0:	c3                   	retq   

00000080042042c1 <user_mem_assert>:
  80042042c1:	55                   	push   %rbp
  80042042c2:	48 89 e5             	mov    %rsp,%rbp
  80042042c5:	48 83 ec 20          	sub    $0x20,%rsp
  80042042c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042042cd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042042d1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042042d5:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042042d8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042db:	83 c8 04             	or     $0x4,%eax
  80042042de:	89 c1                	mov    %eax,%ecx
  80042042e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042042e4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042042e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042ec:	48 89 c7             	mov    %rax,%rdi
  80042042ef:	48 b8 a8 41 20 04 80 	movabs $0x80042041a8,%rax
  80042042f6:	00 00 00 
  80042042f9:	ff d0                	callq  *%rax
  80042042fb:	85 c0                	test   %eax,%eax
  80042042fd:	79 47                	jns    8004204346 <user_mem_assert+0x85>
  80042042ff:	48 b8 40 e2 49 04 80 	movabs $0x800449e240,%rax
  8004204306:	00 00 00 
  8004204309:	48 8b 10             	mov    (%rax),%rdx
  800420430c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204310:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004204316:	89 c6                	mov    %eax,%esi
  8004204318:	48 bf 58 90 21 04 80 	movabs $0x8004219058,%rdi
  800420431f:	00 00 00 
  8004204322:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204327:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420432e:	00 00 00 
  8004204331:	ff d1                	callq  *%rcx
  8004204333:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204337:	48 89 c7             	mov    %rax,%rdi
  800420433a:	48 b8 b6 8e 20 04 80 	movabs $0x8004208eb6,%rax
  8004204341:	00 00 00 
  8004204344:	ff d0                	callq  *%rax
  8004204346:	90                   	nop
  8004204347:	c9                   	leaveq 
  8004204348:	c3                   	retq   

0000008004204349 <check_page_free_list>:
  8004204349:	55                   	push   %rbp
  800420434a:	48 89 e5             	mov    %rsp,%rbp
  800420434d:	48 83 ec 60          	sub    $0x60,%rsp
  8004204351:	89 f8                	mov    %edi,%eax
  8004204353:	88 45 ac             	mov    %al,-0x54(%rbp)
  8004204356:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  800420435a:	74 07                	je     8004204363 <check_page_free_list+0x1a>
  800420435c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004204361:	eb 05                	jmp    8004204368 <check_page_free_list+0x1f>
  8004204363:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204368:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420436b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004204372:	00 
  8004204373:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420437a:	00 
  800420437b:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204382:	00 00 00 
  8004204385:	48 8b 00             	mov    (%rax),%rax
  8004204388:	48 85 c0             	test   %rax,%rax
  800420438b:	75 2a                	jne    80042043b7 <check_page_free_list+0x6e>
  800420438d:	48 ba 90 90 21 04 80 	movabs $0x8004219090,%rdx
  8004204394:	00 00 00 
  8004204397:	be fd 03 00 00       	mov    $0x3fd,%esi
  800420439c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042043a3:	00 00 00 
  80042043a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043ab:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  80042043b2:	00 00 00 
  80042043b5:	ff d1                	callq  *%rcx
  80042043b7:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042043bb:	0f 84 a9 00 00 00    	je     800420446a <check_page_free_list+0x121>
  80042043c1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042043c5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042043c9:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  80042043cd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042043d1:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042043d8:	00 00 00 
  80042043db:	48 8b 00             	mov    (%rax),%rax
  80042043de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043e2:	eb 58                	jmp    800420443c <check_page_free_list+0xf3>
  80042043e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042043e8:	48 89 c7             	mov    %rax,%rdi
  80042043eb:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042043f2:	00 00 00 
  80042043f5:	ff d0                	callq  *%rax
  80042043f7:	48 c1 e8 15          	shr    $0x15,%rax
  80042043fb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204400:	48 89 c2             	mov    %rax,%rdx
  8004204403:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204406:	48 39 c2             	cmp    %rax,%rdx
  8004204409:	0f 93 c0             	setae  %al
  800420440c:	0f b6 c0             	movzbl %al,%eax
  800420440f:	89 45 e0             	mov    %eax,-0x20(%rbp)
  8004204412:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004204415:	48 98                	cltq   
  8004204417:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  800420441c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204420:	48 89 10             	mov    %rdx,(%rax)
  8004204423:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204427:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420442a:	48 98                	cltq   
  800420442c:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  8004204431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204435:	48 8b 00             	mov    (%rax),%rax
  8004204438:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420443c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204441:	75 a1                	jne    80042043e4 <check_page_free_list+0x9b>
  8004204443:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004204447:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420444e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004204452:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004204456:	48 89 10             	mov    %rdx,(%rax)
  8004204459:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420445d:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204464:	00 00 00 
  8004204467:	48 89 10             	mov    %rdx,(%rax)
  800420446a:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204471:	00 00 00 
  8004204474:	48 8b 00             	mov    (%rax),%rax
  8004204477:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420447b:	eb 5e                	jmp    80042044db <check_page_free_list+0x192>
  800420447d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204481:	48 89 c7             	mov    %rax,%rdi
  8004204484:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  800420448b:	00 00 00 
  800420448e:	ff d0                	callq  *%rax
  8004204490:	48 c1 e8 15          	shr    $0x15,%rax
  8004204494:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204499:	48 89 c2             	mov    %rax,%rdx
  800420449c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420449f:	48 39 c2             	cmp    %rax,%rdx
  80042044a2:	73 2c                	jae    80042044d0 <check_page_free_list+0x187>
  80042044a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a8:	48 89 c7             	mov    %rax,%rdi
  80042044ab:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  80042044b2:	00 00 00 
  80042044b5:	ff d0                	callq  *%rax
  80042044b7:	ba 80 00 00 00       	mov    $0x80,%edx
  80042044bc:	be 97 00 00 00       	mov    $0x97,%esi
  80042044c1:	48 89 c7             	mov    %rax,%rdi
  80042044c4:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042044cb:	00 00 00 
  80042044ce:	ff d0                	callq  *%rax
  80042044d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044d4:	48 8b 00             	mov    (%rax),%rax
  80042044d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042044db:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042044e0:	75 9b                	jne    800420447d <check_page_free_list+0x134>
  80042044e2:	bf 00 00 00 00       	mov    $0x0,%edi
  80042044e7:	48 b8 40 26 20 04 80 	movabs $0x8004202640,%rax
  80042044ee:	00 00 00 
  80042044f1:	ff d0                	callq  *%rax
  80042044f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042044f7:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042044fe:	00 00 00 
  8004204501:	48 8b 00             	mov    (%rax),%rax
  8004204504:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204508:	e9 20 03 00 00       	jmpq   800420482d <check_page_free_list+0x4e4>
  800420450d:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004204514:	00 00 00 
  8004204517:	48 8b 00             	mov    (%rax),%rax
  800420451a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800420451e:	73 35                	jae    8004204555 <check_page_free_list+0x20c>
  8004204520:	48 b9 b4 90 21 04 80 	movabs $0x80042190b4,%rcx
  8004204527:	00 00 00 
  800420452a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204531:	00 00 00 
  8004204534:	be 17 04 00 00       	mov    $0x417,%esi
  8004204539:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204540:	00 00 00 
  8004204543:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204548:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420454f:	00 00 00 
  8004204552:	41 ff d0             	callq  *%r8
  8004204555:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  800420455c:	00 00 00 
  800420455f:	48 8b 10             	mov    (%rax),%rdx
  8004204562:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204569:	00 00 00 
  800420456c:	48 8b 00             	mov    (%rax),%rax
  800420456f:	48 c1 e0 04          	shl    $0x4,%rax
  8004204573:	48 01 d0             	add    %rdx,%rax
  8004204576:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420457a:	77 35                	ja     80042045b1 <check_page_free_list+0x268>
  800420457c:	48 b9 c0 90 21 04 80 	movabs $0x80042190c0,%rcx
  8004204583:	00 00 00 
  8004204586:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420458d:	00 00 00 
  8004204590:	be 18 04 00 00       	mov    $0x418,%esi
  8004204595:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420459c:	00 00 00 
  800420459f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045a4:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042045ab:	00 00 00 
  80042045ae:	41 ff d0             	callq  *%r8
  80042045b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042045b5:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  80042045bc:	00 00 00 
  80042045bf:	48 8b 00             	mov    (%rax),%rax
  80042045c2:	48 29 c2             	sub    %rax,%rdx
  80042045c5:	48 89 d0             	mov    %rdx,%rax
  80042045c8:	83 e0 0f             	and    $0xf,%eax
  80042045cb:	48 85 c0             	test   %rax,%rax
  80042045ce:	74 35                	je     8004204605 <check_page_free_list+0x2bc>
  80042045d0:	48 b9 d8 90 21 04 80 	movabs $0x80042190d8,%rcx
  80042045d7:	00 00 00 
  80042045da:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042045e1:	00 00 00 
  80042045e4:	be 19 04 00 00       	mov    $0x419,%esi
  80042045e9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042045f0:	00 00 00 
  80042045f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045f8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042045ff:	00 00 00 
  8004204602:	41 ff d0             	callq  *%r8
  8004204605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204609:	48 89 c7             	mov    %rax,%rdi
  800420460c:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204613:	00 00 00 
  8004204616:	ff d0                	callq  *%rax
  8004204618:	48 85 c0             	test   %rax,%rax
  800420461b:	75 35                	jne    8004204652 <check_page_free_list+0x309>
  800420461d:	48 b9 0a 91 21 04 80 	movabs $0x800421910a,%rcx
  8004204624:	00 00 00 
  8004204627:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420462e:	00 00 00 
  8004204631:	be 1c 04 00 00       	mov    $0x41c,%esi
  8004204636:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420463d:	00 00 00 
  8004204640:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204645:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420464c:	00 00 00 
  800420464f:	41 ff d0             	callq  *%r8
  8004204652:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204656:	48 89 c7             	mov    %rax,%rdi
  8004204659:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204660:	00 00 00 
  8004204663:	ff d0                	callq  *%rax
  8004204665:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420466b:	75 35                	jne    80042046a2 <check_page_free_list+0x359>
  800420466d:	48 b9 1b 91 21 04 80 	movabs $0x800421911b,%rcx
  8004204674:	00 00 00 
  8004204677:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420467e:	00 00 00 
  8004204681:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204686:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420468d:	00 00 00 
  8004204690:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204695:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420469c:	00 00 00 
  800420469f:	41 ff d0             	callq  *%r8
  80042046a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046a6:	48 89 c7             	mov    %rax,%rdi
  80042046a9:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042046b0:	00 00 00 
  80042046b3:	ff d0                	callq  *%rax
  80042046b5:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042046bb:	75 35                	jne    80042046f2 <check_page_free_list+0x3a9>
  80042046bd:	48 b9 38 91 21 04 80 	movabs $0x8004219138,%rcx
  80042046c4:	00 00 00 
  80042046c7:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042046ce:	00 00 00 
  80042046d1:	be 1e 04 00 00       	mov    $0x41e,%esi
  80042046d6:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042046dd:	00 00 00 
  80042046e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042046e5:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042046ec:	00 00 00 
  80042046ef:	41 ff d0             	callq  *%r8
  80042046f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046f6:	48 89 c7             	mov    %rax,%rdi
  80042046f9:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204700:	00 00 00 
  8004204703:	ff d0                	callq  *%rax
  8004204705:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420470b:	75 35                	jne    8004204742 <check_page_free_list+0x3f9>
  800420470d:	48 b9 5b 91 21 04 80 	movabs $0x800421915b,%rcx
  8004204714:	00 00 00 
  8004204717:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420471e:	00 00 00 
  8004204721:	be 1f 04 00 00       	mov    $0x41f,%esi
  8004204726:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420472d:	00 00 00 
  8004204730:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204735:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420473c:	00 00 00 
  800420473f:	41 ff d0             	callq  *%r8
  8004204742:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204746:	48 89 c7             	mov    %rax,%rdi
  8004204749:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204750:	00 00 00 
  8004204753:	ff d0                	callq  *%rax
  8004204755:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  800420475b:	76 4e                	jbe    80042047ab <check_page_free_list+0x462>
  800420475d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204761:	48 89 c7             	mov    %rax,%rdi
  8004204764:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  800420476b:	00 00 00 
  800420476e:	ff d0                	callq  *%rax
  8004204770:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204774:	73 35                	jae    80042047ab <check_page_free_list+0x462>
  8004204776:	48 b9 78 91 21 04 80 	movabs $0x8004219178,%rcx
  800420477d:	00 00 00 
  8004204780:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204787:	00 00 00 
  800420478a:	be 20 04 00 00       	mov    $0x420,%esi
  800420478f:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204796:	00 00 00 
  8004204799:	b8 00 00 00 00       	mov    $0x0,%eax
  800420479e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042047a5:	00 00 00 
  80042047a8:	41 ff d0             	callq  *%r8
  80042047ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047af:	48 89 c7             	mov    %rax,%rdi
  80042047b2:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042047b9:	00 00 00 
  80042047bc:	ff d0                	callq  *%rax
  80042047be:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  80042047c4:	75 35                	jne    80042047fb <check_page_free_list+0x4b2>
  80042047c6:	48 b9 bd 91 21 04 80 	movabs $0x80042191bd,%rcx
  80042047cd:	00 00 00 
  80042047d0:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042047d7:	00 00 00 
  80042047da:	be 23 04 00 00       	mov    $0x423,%esi
  80042047df:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042047e6:	00 00 00 
  80042047e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047ee:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042047f5:	00 00 00 
  80042047f8:	41 ff d0             	callq  *%r8
  80042047fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042047ff:	48 89 c7             	mov    %rax,%rdi
  8004204802:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204809:	00 00 00 
  800420480c:	ff d0                	callq  *%rax
  800420480e:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  8004204814:	77 07                	ja     800420481d <check_page_free_list+0x4d4>
  8004204816:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420481b:	eb 05                	jmp    8004204822 <check_page_free_list+0x4d9>
  800420481d:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004204822:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204826:	48 8b 00             	mov    (%rax),%rax
  8004204829:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420482d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204832:	0f 85 d5 fc ff ff    	jne    800420450d <check_page_free_list+0x1c4>
  8004204838:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420483d:	75 35                	jne    8004204874 <check_page_free_list+0x52b>
  800420483f:	48 b9 da 91 21 04 80 	movabs $0x80042191da,%rcx
  8004204846:	00 00 00 
  8004204849:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204850:	00 00 00 
  8004204853:	be 2c 04 00 00       	mov    $0x42c,%esi
  8004204858:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420485f:	00 00 00 
  8004204862:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204867:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420486e:	00 00 00 
  8004204871:	41 ff d0             	callq  *%r8
  8004204874:	90                   	nop
  8004204875:	c9                   	leaveq 
  8004204876:	c3                   	retq   

0000008004204877 <check_page_alloc>:
  8004204877:	55                   	push   %rbp
  8004204878:	48 89 e5             	mov    %rsp,%rbp
  800420487b:	48 83 ec 40          	sub    $0x40,%rsp
  800420487f:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204886:	00 00 00 
  8004204889:	48 8b 00             	mov    (%rax),%rax
  800420488c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204890:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204897:	eb 37                	jmp    80042048d0 <check_page_alloc+0x59>
  8004204899:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420489d:	48 89 c7             	mov    %rax,%rdi
  80042048a0:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  80042048a7:	00 00 00 
  80042048aa:	ff d0                	callq  *%rax
  80042048ac:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042048b1:	be 97 00 00 00       	mov    $0x97,%esi
  80042048b6:	48 89 c7             	mov    %rax,%rdi
  80042048b9:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042048c0:	00 00 00 
  80042048c3:	ff d0                	callq  *%rax
  80042048c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048c9:	48 8b 00             	mov    (%rax),%rax
  80042048cc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048d0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042048d5:	75 c2                	jne    8004204899 <check_page_alloc+0x22>
  80042048d7:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  80042048de:	00 00 00 
  80042048e1:	48 8b 00             	mov    (%rax),%rax
  80042048e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042048e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  80042048ef:	e9 ec 01 00 00       	jmpq   8004204ae0 <check_page_alloc+0x269>
  80042048f4:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  80042048fb:	00 00 00 
  80042048fe:	48 8b 00             	mov    (%rax),%rax
  8004204901:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004204905:	73 35                	jae    800420493c <check_page_alloc+0xc5>
  8004204907:	48 b9 eb 91 21 04 80 	movabs $0x80042191eb,%rcx
  800420490e:	00 00 00 
  8004204911:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204918:	00 00 00 
  800420491b:	be 46 04 00 00       	mov    $0x446,%esi
  8004204920:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204927:	00 00 00 
  800420492a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420492f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204936:	00 00 00 
  8004204939:	41 ff d0             	callq  *%r8
  800420493c:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004204943:	00 00 00 
  8004204946:	48 8b 10             	mov    (%rax),%rdx
  8004204949:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204950:	00 00 00 
  8004204953:	48 8b 00             	mov    (%rax),%rax
  8004204956:	48 c1 e0 04          	shl    $0x4,%rax
  800420495a:	48 01 d0             	add    %rdx,%rax
  800420495d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204961:	77 35                	ja     8004204998 <check_page_alloc+0x121>
  8004204963:	48 b9 f8 91 21 04 80 	movabs $0x80042191f8,%rcx
  800420496a:	00 00 00 
  800420496d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204974:	00 00 00 
  8004204977:	be 47 04 00 00       	mov    $0x447,%esi
  800420497c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204983:	00 00 00 
  8004204986:	b8 00 00 00 00       	mov    $0x0,%eax
  800420498b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204992:	00 00 00 
  8004204995:	41 ff d0             	callq  *%r8
  8004204998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420499c:	48 89 c7             	mov    %rax,%rdi
  800420499f:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042049a6:	00 00 00 
  80042049a9:	ff d0                	callq  *%rax
  80042049ab:	48 85 c0             	test   %rax,%rax
  80042049ae:	75 35                	jne    80042049e5 <check_page_alloc+0x16e>
  80042049b0:	48 b9 0d 92 21 04 80 	movabs $0x800421920d,%rcx
  80042049b7:	00 00 00 
  80042049ba:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042049c1:	00 00 00 
  80042049c4:	be 4a 04 00 00       	mov    $0x44a,%esi
  80042049c9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042049d0:	00 00 00 
  80042049d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049d8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042049df:	00 00 00 
  80042049e2:	41 ff d0             	callq  *%r8
  80042049e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042049e9:	48 89 c7             	mov    %rax,%rdi
  80042049ec:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042049f3:	00 00 00 
  80042049f6:	ff d0                	callq  *%rax
  80042049f8:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042049fe:	75 35                	jne    8004204a35 <check_page_alloc+0x1be>
  8004204a00:	48 b9 1f 92 21 04 80 	movabs $0x800421921f,%rcx
  8004204a07:	00 00 00 
  8004204a0a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204a11:	00 00 00 
  8004204a14:	be 4b 04 00 00       	mov    $0x44b,%esi
  8004204a19:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204a20:	00 00 00 
  8004204a23:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a28:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204a2f:	00 00 00 
  8004204a32:	41 ff d0             	callq  *%r8
  8004204a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a39:	48 89 c7             	mov    %rax,%rdi
  8004204a3c:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204a43:	00 00 00 
  8004204a46:	ff d0                	callq  *%rax
  8004204a48:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204a4e:	75 35                	jne    8004204a85 <check_page_alloc+0x20e>
  8004204a50:	48 b9 40 92 21 04 80 	movabs $0x8004219240,%rcx
  8004204a57:	00 00 00 
  8004204a5a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204a61:	00 00 00 
  8004204a64:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204a69:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204a70:	00 00 00 
  8004204a73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a78:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204a7f:	00 00 00 
  8004204a82:	41 ff d0             	callq  *%r8
  8004204a85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204a89:	48 89 c7             	mov    %rax,%rdi
  8004204a8c:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204a93:	00 00 00 
  8004204a96:	ff d0                	callq  *%rax
  8004204a98:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204a9e:	75 35                	jne    8004204ad5 <check_page_alloc+0x25e>
  8004204aa0:	48 b9 64 92 21 04 80 	movabs $0x8004219264,%rcx
  8004204aa7:	00 00 00 
  8004204aaa:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204ab1:	00 00 00 
  8004204ab4:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204ab9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204ac0:	00 00 00 
  8004204ac3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204acf:	00 00 00 
  8004204ad2:	41 ff d0             	callq  *%r8
  8004204ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204ad9:	48 8b 00             	mov    (%rax),%rax
  8004204adc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ae0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ae5:	0f 85 09 fe ff ff    	jne    80042048f4 <check_page_alloc+0x7d>
  8004204aeb:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204af2:	00 
  8004204af3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204af7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204afb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204aff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b08:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204b0f:	00 00 00 
  8004204b12:	ff d0                	callq  *%rax
  8004204b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204b18:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204b1d:	75 35                	jne    8004204b54 <check_page_alloc+0x2dd>
  8004204b1f:	48 b9 7f 92 21 04 80 	movabs $0x800421927f,%rcx
  8004204b26:	00 00 00 
  8004204b29:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204b30:	00 00 00 
  8004204b33:	be 51 04 00 00       	mov    $0x451,%esi
  8004204b38:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204b3f:	00 00 00 
  8004204b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b47:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204b4e:	00 00 00 
  8004204b51:	41 ff d0             	callq  *%r8
  8004204b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204b59:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204b60:	00 00 00 
  8004204b63:	ff d0                	callq  *%rax
  8004204b65:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204b69:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204b6e:	75 35                	jne    8004204ba5 <check_page_alloc+0x32e>
  8004204b70:	48 b9 95 92 21 04 80 	movabs $0x8004219295,%rcx
  8004204b77:	00 00 00 
  8004204b7a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204b81:	00 00 00 
  8004204b84:	be 52 04 00 00       	mov    $0x452,%esi
  8004204b89:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204b90:	00 00 00 
  8004204b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b98:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204b9f:	00 00 00 
  8004204ba2:	41 ff d0             	callq  *%r8
  8004204ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204baa:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204bb1:	00 00 00 
  8004204bb4:	ff d0                	callq  *%rax
  8004204bb6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204bba:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204bbf:	75 35                	jne    8004204bf6 <check_page_alloc+0x37f>
  8004204bc1:	48 b9 ab 92 21 04 80 	movabs $0x80042192ab,%rcx
  8004204bc8:	00 00 00 
  8004204bcb:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204bd2:	00 00 00 
  8004204bd5:	be 53 04 00 00       	mov    $0x453,%esi
  8004204bda:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204be1:	00 00 00 
  8004204be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204be9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204bf0:	00 00 00 
  8004204bf3:	41 ff d0             	callq  *%r8
  8004204bf6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204bfb:	75 35                	jne    8004204c32 <check_page_alloc+0x3bb>
  8004204bfd:	48 b9 c1 92 21 04 80 	movabs $0x80042192c1,%rcx
  8004204c04:	00 00 00 
  8004204c07:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204c0e:	00 00 00 
  8004204c11:	be 54 04 00 00       	mov    $0x454,%esi
  8004204c16:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204c1d:	00 00 00 
  8004204c20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c25:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204c2c:	00 00 00 
  8004204c2f:	41 ff d0             	callq  *%r8
  8004204c32:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204c37:	74 0a                	je     8004204c43 <check_page_alloc+0x3cc>
  8004204c39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204c3d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c41:	75 35                	jne    8004204c78 <check_page_alloc+0x401>
  8004204c43:	48 b9 c5 92 21 04 80 	movabs $0x80042192c5,%rcx
  8004204c4a:	00 00 00 
  8004204c4d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204c54:	00 00 00 
  8004204c57:	be 55 04 00 00       	mov    $0x455,%esi
  8004204c5c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204c63:	00 00 00 
  8004204c66:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c6b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204c72:	00 00 00 
  8004204c75:	41 ff d0             	callq  *%r8
  8004204c78:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204c7d:	74 14                	je     8004204c93 <check_page_alloc+0x41c>
  8004204c7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c83:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204c87:	74 0a                	je     8004204c93 <check_page_alloc+0x41c>
  8004204c89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c8d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204c91:	75 35                	jne    8004204cc8 <check_page_alloc+0x451>
  8004204c93:	48 b9 d8 92 21 04 80 	movabs $0x80042192d8,%rcx
  8004204c9a:	00 00 00 
  8004204c9d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204ca4:	00 00 00 
  8004204ca7:	be 56 04 00 00       	mov    $0x456,%esi
  8004204cac:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204cb3:	00 00 00 
  8004204cb6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cbb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204cc2:	00 00 00 
  8004204cc5:	41 ff d0             	callq  *%r8
  8004204cc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204ccc:	48 89 c7             	mov    %rax,%rdi
  8004204ccf:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204cd6:	00 00 00 
  8004204cd9:	ff d0                	callq  *%rax
  8004204cdb:	48 89 c2             	mov    %rax,%rdx
  8004204cde:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204ce5:	00 00 00 
  8004204ce8:	48 8b 00             	mov    (%rax),%rax
  8004204ceb:	48 c1 e0 0c          	shl    $0xc,%rax
  8004204cef:	48 39 c2             	cmp    %rax,%rdx
  8004204cf2:	72 35                	jb     8004204d29 <check_page_alloc+0x4b2>
  8004204cf4:	48 b9 f8 92 21 04 80 	movabs $0x80042192f8,%rcx
  8004204cfb:	00 00 00 
  8004204cfe:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204d05:	00 00 00 
  8004204d08:	be 57 04 00 00       	mov    $0x457,%esi
  8004204d0d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204d14:	00 00 00 
  8004204d17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d1c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204d23:	00 00 00 
  8004204d26:	41 ff d0             	callq  *%r8
  8004204d29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d2d:	48 89 c7             	mov    %rax,%rdi
  8004204d30:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204d37:	00 00 00 
  8004204d3a:	ff d0                	callq  *%rax
  8004204d3c:	48 89 c2             	mov    %rax,%rdx
  8004204d3f:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204d46:	00 00 00 
  8004204d49:	48 8b 00             	mov    (%rax),%rax
  8004204d4c:	48 c1 e0 0c          	shl    $0xc,%rax
  8004204d50:	48 39 c2             	cmp    %rax,%rdx
  8004204d53:	72 35                	jb     8004204d8a <check_page_alloc+0x513>
  8004204d55:	48 b9 15 93 21 04 80 	movabs $0x8004219315,%rcx
  8004204d5c:	00 00 00 
  8004204d5f:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204d66:	00 00 00 
  8004204d69:	be 58 04 00 00       	mov    $0x458,%esi
  8004204d6e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204d75:	00 00 00 
  8004204d78:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d7d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204d84:	00 00 00 
  8004204d87:	41 ff d0             	callq  *%r8
  8004204d8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d8e:	48 89 c7             	mov    %rax,%rdi
  8004204d91:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004204d98:	00 00 00 
  8004204d9b:	ff d0                	callq  *%rax
  8004204d9d:	48 89 c2             	mov    %rax,%rdx
  8004204da0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004204da7:	00 00 00 
  8004204daa:	48 8b 00             	mov    (%rax),%rax
  8004204dad:	48 c1 e0 0c          	shl    $0xc,%rax
  8004204db1:	48 39 c2             	cmp    %rax,%rdx
  8004204db4:	72 35                	jb     8004204deb <check_page_alloc+0x574>
  8004204db6:	48 b9 32 93 21 04 80 	movabs $0x8004219332,%rcx
  8004204dbd:	00 00 00 
  8004204dc0:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204dc7:	00 00 00 
  8004204dca:	be 59 04 00 00       	mov    $0x459,%esi
  8004204dcf:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204dd6:	00 00 00 
  8004204dd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dde:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204de5:	00 00 00 
  8004204de8:	41 ff d0             	callq  *%r8
  8004204deb:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204df2:	00 00 00 
  8004204df5:	48 8b 00             	mov    (%rax),%rax
  8004204df8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204dfc:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004204e03:	00 00 00 
  8004204e06:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204e0d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204e12:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204e19:	00 00 00 
  8004204e1c:	ff d0                	callq  *%rax
  8004204e1e:	48 85 c0             	test   %rax,%rax
  8004204e21:	74 35                	je     8004204e58 <check_page_alloc+0x5e1>
  8004204e23:	48 b9 4f 93 21 04 80 	movabs $0x800421934f,%rcx
  8004204e2a:	00 00 00 
  8004204e2d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204e34:	00 00 00 
  8004204e37:	be 60 04 00 00       	mov    $0x460,%esi
  8004204e3c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204e43:	00 00 00 
  8004204e46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e4b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204e52:	00 00 00 
  8004204e55:	41 ff d0             	callq  *%r8
  8004204e58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204e5c:	48 89 c7             	mov    %rax,%rdi
  8004204e5f:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004204e66:	00 00 00 
  8004204e69:	ff d0                	callq  *%rax
  8004204e6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e6f:	48 89 c7             	mov    %rax,%rdi
  8004204e72:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004204e79:	00 00 00 
  8004204e7c:	ff d0                	callq  *%rax
  8004204e7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e82:	48 89 c7             	mov    %rax,%rdi
  8004204e85:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004204e8c:	00 00 00 
  8004204e8f:	ff d0                	callq  *%rax
  8004204e91:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204e98:	00 
  8004204e99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204e9d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204ea1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ea5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ea9:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204eae:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204eb5:	00 00 00 
  8004204eb8:	ff d0                	callq  *%rax
  8004204eba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204ebe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204ec3:	75 35                	jne    8004204efa <check_page_alloc+0x683>
  8004204ec5:	48 b9 7f 92 21 04 80 	movabs $0x800421927f,%rcx
  8004204ecc:	00 00 00 
  8004204ecf:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204ed6:	00 00 00 
  8004204ed9:	be 67 04 00 00       	mov    $0x467,%esi
  8004204ede:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204ee5:	00 00 00 
  8004204ee8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204eed:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204ef4:	00 00 00 
  8004204ef7:	41 ff d0             	callq  *%r8
  8004204efa:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204eff:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204f06:	00 00 00 
  8004204f09:	ff d0                	callq  *%rax
  8004204f0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204f0f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204f14:	75 35                	jne    8004204f4b <check_page_alloc+0x6d4>
  8004204f16:	48 b9 95 92 21 04 80 	movabs $0x8004219295,%rcx
  8004204f1d:	00 00 00 
  8004204f20:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204f27:	00 00 00 
  8004204f2a:	be 68 04 00 00       	mov    $0x468,%esi
  8004204f2f:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204f36:	00 00 00 
  8004204f39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204f45:	00 00 00 
  8004204f48:	41 ff d0             	callq  *%r8
  8004204f4b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f50:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004204f57:	00 00 00 
  8004204f5a:	ff d0                	callq  *%rax
  8004204f5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204f60:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204f65:	75 35                	jne    8004204f9c <check_page_alloc+0x725>
  8004204f67:	48 b9 ab 92 21 04 80 	movabs $0x80042192ab,%rcx
  8004204f6e:	00 00 00 
  8004204f71:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204f78:	00 00 00 
  8004204f7b:	be 69 04 00 00       	mov    $0x469,%esi
  8004204f80:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204f87:	00 00 00 
  8004204f8a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f8f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204f96:	00 00 00 
  8004204f99:	41 ff d0             	callq  *%r8
  8004204f9c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204fa1:	75 35                	jne    8004204fd8 <check_page_alloc+0x761>
  8004204fa3:	48 b9 c1 92 21 04 80 	movabs $0x80042192c1,%rcx
  8004204faa:	00 00 00 
  8004204fad:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204fb4:	00 00 00 
  8004204fb7:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204fbc:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004204fc3:	00 00 00 
  8004204fc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004204fd2:	00 00 00 
  8004204fd5:	41 ff d0             	callq  *%r8
  8004204fd8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204fdd:	74 0a                	je     8004204fe9 <check_page_alloc+0x772>
  8004204fdf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204fe3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204fe7:	75 35                	jne    800420501e <check_page_alloc+0x7a7>
  8004204fe9:	48 b9 c5 92 21 04 80 	movabs $0x80042192c5,%rcx
  8004204ff0:	00 00 00 
  8004204ff3:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004204ffa:	00 00 00 
  8004204ffd:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004205002:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205009:	00 00 00 
  800420500c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205011:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205018:	00 00 00 
  800420501b:	41 ff d0             	callq  *%r8
  800420501e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004205023:	74 14                	je     8004205039 <check_page_alloc+0x7c2>
  8004205025:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205029:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800420502d:	74 0a                	je     8004205039 <check_page_alloc+0x7c2>
  800420502f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205033:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205037:	75 35                	jne    800420506e <check_page_alloc+0x7f7>
  8004205039:	48 b9 d8 92 21 04 80 	movabs $0x80042192d8,%rcx
  8004205040:	00 00 00 
  8004205043:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420504a:	00 00 00 
  800420504d:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004205052:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205059:	00 00 00 
  800420505c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205061:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205068:	00 00 00 
  800420506b:	41 ff d0             	callq  *%r8
  800420506e:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205073:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  800420507a:	00 00 00 
  800420507d:	ff d0                	callq  *%rax
  800420507f:	48 85 c0             	test   %rax,%rax
  8004205082:	74 35                	je     80042050b9 <check_page_alloc+0x842>
  8004205084:	48 b9 4f 93 21 04 80 	movabs $0x800421934f,%rcx
  800420508b:	00 00 00 
  800420508e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205095:	00 00 00 
  8004205098:	be 6d 04 00 00       	mov    $0x46d,%esi
  800420509d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042050a4:	00 00 00 
  80042050a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050ac:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042050b3:	00 00 00 
  80042050b6:	41 ff d0             	callq  *%r8
  80042050b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050bd:	48 89 c7             	mov    %rax,%rdi
  80042050c0:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  80042050c7:	00 00 00 
  80042050ca:	ff d0                	callq  *%rax
  80042050cc:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042050d1:	be 01 00 00 00       	mov    $0x1,%esi
  80042050d6:	48 89 c7             	mov    %rax,%rdi
  80042050d9:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042050e0:	00 00 00 
  80042050e3:	ff d0                	callq  *%rax
  80042050e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050e9:	48 89 c7             	mov    %rax,%rdi
  80042050ec:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  80042050f3:	00 00 00 
  80042050f6:	ff d0                	callq  *%rax
  80042050f8:	bf 01 00 00 00       	mov    $0x1,%edi
  80042050fd:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205104:	00 00 00 
  8004205107:	ff d0                	callq  *%rax
  8004205109:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420510d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205112:	75 35                	jne    8004205149 <check_page_alloc+0x8d2>
  8004205114:	48 b9 5e 93 21 04 80 	movabs $0x800421935e,%rcx
  800420511b:	00 00 00 
  800420511e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205125:	00 00 00 
  8004205128:	be 72 04 00 00       	mov    $0x472,%esi
  800420512d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205134:	00 00 00 
  8004205137:	b8 00 00 00 00       	mov    $0x0,%eax
  800420513c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205143:	00 00 00 
  8004205146:	41 ff d0             	callq  *%r8
  8004205149:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420514e:	74 0a                	je     800420515a <check_page_alloc+0x8e3>
  8004205150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205154:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205158:	74 35                	je     800420518f <check_page_alloc+0x918>
  800420515a:	48 b9 7c 93 21 04 80 	movabs $0x800421937c,%rcx
  8004205161:	00 00 00 
  8004205164:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420516b:	00 00 00 
  800420516e:	be 73 04 00 00       	mov    $0x473,%esi
  8004205173:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420517a:	00 00 00 
  800420517d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205182:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205189:	00 00 00 
  800420518c:	41 ff d0             	callq  *%r8
  800420518f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205193:	48 89 c7             	mov    %rax,%rdi
  8004205196:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  800420519d:	00 00 00 
  80042051a0:	ff d0                	callq  *%rax
  80042051a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042051a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042051ad:	eb 4d                	jmp    80042051fc <check_page_alloc+0x985>
  80042051af:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042051b2:	48 63 d0             	movslq %eax,%rdx
  80042051b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042051b9:	48 01 d0             	add    %rdx,%rax
  80042051bc:	0f b6 00             	movzbl (%rax),%eax
  80042051bf:	84 c0                	test   %al,%al
  80042051c1:	74 35                	je     80042051f8 <check_page_alloc+0x981>
  80042051c3:	48 b9 8c 93 21 04 80 	movabs $0x800421938c,%rcx
  80042051ca:	00 00 00 
  80042051cd:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042051d4:	00 00 00 
  80042051d7:	be 76 04 00 00       	mov    $0x476,%esi
  80042051dc:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042051e3:	00 00 00 
  80042051e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051eb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042051f2:	00 00 00 
  80042051f5:	41 ff d0             	callq  *%r8
  80042051f8:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042051fc:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205203:	7e aa                	jle    80042051af <check_page_alloc+0x938>
  8004205205:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420520c:	00 00 00 
  800420520f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205213:	48 89 10             	mov    %rdx,(%rax)
  8004205216:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420521a:	48 89 c7             	mov    %rax,%rdi
  800420521d:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004205224:	00 00 00 
  8004205227:	ff d0                	callq  *%rax
  8004205229:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420522d:	48 89 c7             	mov    %rax,%rdi
  8004205230:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004205237:	00 00 00 
  800420523a:	ff d0                	callq  *%rax
  800420523c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205240:	48 89 c7             	mov    %rax,%rdi
  8004205243:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  800420524a:	00 00 00 
  800420524d:	ff d0                	callq  *%rax
  800420524f:	48 bf 98 93 21 04 80 	movabs $0x8004219398,%rdi
  8004205256:	00 00 00 
  8004205259:	b8 00 00 00 00       	mov    $0x0,%eax
  800420525e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004205265:	00 00 00 
  8004205268:	ff d2                	callq  *%rdx
  800420526a:	90                   	nop
  800420526b:	c9                   	leaveq 
  800420526c:	c3                   	retq   

000000800420526d <check_boot_pml4e>:
  800420526d:	55                   	push   %rbp
  800420526e:	48 89 e5             	mov    %rsp,%rbp
  8004205271:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004205278:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  800420527f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004205286:	00 00 00 
  8004205289:	48 8b 00             	mov    (%rax),%rax
  800420528c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004205293:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  800420529a:	00 
  800420529b:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042052a2:	00 00 00 
  80042052a5:	48 8b 00             	mov    (%rax),%rax
  80042052a8:	48 c1 e0 04          	shl    $0x4,%rax
  80042052ac:	48 89 c2             	mov    %rax,%rdx
  80042052af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b3:	48 01 d0             	add    %rdx,%rax
  80042052b6:	48 83 e8 01          	sub    $0x1,%rax
  80042052ba:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042052be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042052c2:	ba 00 00 00 00       	mov    $0x0,%edx
  80042052c7:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042052cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042052cf:	48 29 d0             	sub    %rdx,%rax
  80042052d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042052d6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052dd:	00 
  80042052de:	e9 da 00 00 00       	jmpq   80042053bd <check_boot_pml4e+0x150>
  80042052e3:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  80042052ea:	00 00 00 
  80042052ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052f1:	48 01 c2             	add    %rax,%rdx
  80042052f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042052fb:	48 89 d6             	mov    %rdx,%rsi
  80042052fe:	48 89 c7             	mov    %rax,%rdi
  8004205301:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004205308:	00 00 00 
  800420530b:	ff d0                	callq  *%rax
  800420530d:	48 89 c1             	mov    %rax,%rcx
  8004205310:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004205317:	00 00 00 
  800420531a:	48 8b 00             	mov    (%rax),%rax
  800420531d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205321:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004205328:	00 00 00 
  800420532b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800420532f:	77 32                	ja     8004205363 <check_boot_pml4e+0xf6>
  8004205331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205335:	48 89 c1             	mov    %rax,%rcx
  8004205338:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  800420533f:	00 00 00 
  8004205342:	be 96 04 00 00       	mov    $0x496,%esi
  8004205347:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420534e:	00 00 00 
  8004205351:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205356:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420535d:	00 00 00 
  8004205360:	41 ff d0             	callq  *%r8
  8004205363:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420536a:	ff ff ff 
  800420536d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205371:	48 01 c2             	add    %rax,%rdx
  8004205374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205378:	48 01 d0             	add    %rdx,%rax
  800420537b:	48 39 c1             	cmp    %rax,%rcx
  800420537e:	74 35                	je     80042053b5 <check_boot_pml4e+0x148>
  8004205380:	48 b9 b8 93 21 04 80 	movabs $0x80042193b8,%rcx
  8004205387:	00 00 00 
  800420538a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205391:	00 00 00 
  8004205394:	be 96 04 00 00       	mov    $0x496,%esi
  8004205399:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042053a0:	00 00 00 
  80042053a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053a8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042053af:	00 00 00 
  80042053b2:	41 ff d0             	callq  *%r8
  80042053b5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053bc:	00 
  80042053bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053c1:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042053c5:	0f 82 18 ff ff ff    	jb     80042052e3 <check_boot_pml4e+0x76>
  80042053cb:	48 c7 45 d0 00 10 00 	movq   $0x1000,-0x30(%rbp)
  80042053d2:	00 
  80042053d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042053d7:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  80042053dd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042053e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053e5:	ba 00 00 00 00       	mov    $0x0,%edx
  80042053ea:	48 f7 75 d0          	divq   -0x30(%rbp)
  80042053ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042053f2:	48 29 d0             	sub    %rdx,%rax
  80042053f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042053f9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205400:	00 
  8004205401:	e9 da 00 00 00       	jmpq   80042054e0 <check_boot_pml4e+0x273>
  8004205406:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  800420540d:	00 00 00 
  8004205410:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205414:	48 01 c2             	add    %rax,%rdx
  8004205417:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420541e:	48 89 d6             	mov    %rdx,%rsi
  8004205421:	48 89 c7             	mov    %rax,%rdi
  8004205424:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  800420542b:	00 00 00 
  800420542e:	ff d0                	callq  *%rax
  8004205430:	48 89 c1             	mov    %rax,%rcx
  8004205433:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420543a:	00 00 00 
  800420543d:	48 8b 00             	mov    (%rax),%rax
  8004205440:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205444:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420544b:	00 00 00 
  800420544e:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004205452:	77 32                	ja     8004205486 <check_boot_pml4e+0x219>
  8004205454:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205458:	48 89 c1             	mov    %rax,%rcx
  800420545b:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  8004205462:	00 00 00 
  8004205465:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420546a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205471:	00 00 00 
  8004205474:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205479:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205480:	00 00 00 
  8004205483:	41 ff d0             	callq  *%r8
  8004205486:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420548d:	ff ff ff 
  8004205490:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205494:	48 01 c2             	add    %rax,%rdx
  8004205497:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420549b:	48 01 d0             	add    %rdx,%rax
  800420549e:	48 39 c1             	cmp    %rax,%rcx
  80042054a1:	74 35                	je     80042054d8 <check_boot_pml4e+0x26b>
  80042054a3:	48 b9 f0 93 21 04 80 	movabs $0x80042193f0,%rcx
  80042054aa:	00 00 00 
  80042054ad:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042054b4:	00 00 00 
  80042054b7:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042054bc:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042054c3:	00 00 00 
  80042054c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054cb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042054d2:	00 00 00 
  80042054d5:	41 ff d0             	callq  *%r8
  80042054d8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042054df:	00 
  80042054e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042054e4:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042054e8:	0f 82 18 ff ff ff    	jb     8004205406 <check_boot_pml4e+0x199>
  80042054ee:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042054f5:	00 
  80042054f6:	eb 6d                	jmp    8004205565 <check_boot_pml4e+0x2f8>
  80042054f8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042054ff:	00 00 00 
  8004205502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205506:	48 01 c2             	add    %rax,%rdx
  8004205509:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205510:	48 89 d6             	mov    %rdx,%rsi
  8004205513:	48 89 c7             	mov    %rax,%rdi
  8004205516:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  800420551d:	00 00 00 
  8004205520:	ff d0                	callq  *%rax
  8004205522:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205526:	74 35                	je     800420555d <check_boot_pml4e+0x2f0>
  8004205528:	48 b9 28 94 21 04 80 	movabs $0x8004219428,%rcx
  800420552f:	00 00 00 
  8004205532:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205539:	00 00 00 
  800420553c:	be a2 04 00 00       	mov    $0x4a2,%esi
  8004205541:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205548:	00 00 00 
  800420554b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205550:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205557:	00 00 00 
  800420555a:	41 ff d0             	callq  *%r8
  800420555d:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205564:	00 
  8004205565:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420556c:	00 00 00 
  800420556f:	48 8b 00             	mov    (%rax),%rax
  8004205572:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205576:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420557a:	0f 87 78 ff ff ff    	ja     80042054f8 <check_boot_pml4e+0x28b>
  8004205580:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205587:	00 
  8004205588:	e9 aa 01 00 00       	jmpq   8004205737 <check_boot_pml4e+0x4ca>
  800420558d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205591:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205595:	48 89 d0             	mov    %rdx,%rax
  8004205598:	48 01 c0             	add    %rax,%rax
  800420559b:	48 01 d0             	add    %rdx,%rax
  800420559e:	48 c1 e0 0f          	shl    $0xf,%rax
  80042055a2:	48 89 c2             	mov    %rax,%rdx
  80042055a5:	48 b8 00 00 00 04 80 	movabs $0x8004000000,%rax
  80042055ac:	00 00 00 
  80042055af:	48 29 d0             	sub    %rdx,%rax
  80042055b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042055b6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042055bd:	00 
  80042055be:	e9 e6 00 00 00       	jmpq   80042056a9 <check_boot_pml4e+0x43c>
  80042055c3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042055c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042055cb:	48 01 d0             	add    %rdx,%rax
  80042055ce:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  80042055d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042055dc:	48 89 d6             	mov    %rdx,%rsi
  80042055df:	48 89 c7             	mov    %rax,%rdi
  80042055e2:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  80042055e9:	00 00 00 
  80042055ec:	ff d0                	callq  *%rax
  80042055ee:	48 89 c1             	mov    %rax,%rcx
  80042055f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042055f5:	48 c1 e0 10          	shl    $0x10,%rax
  80042055f9:	48 89 c2             	mov    %rax,%rdx
  80042055fc:	48 b8 00 00 6a 04 80 	movabs $0x80046a0000,%rax
  8004205603:	00 00 00 
  8004205606:	48 01 d0             	add    %rdx,%rax
  8004205609:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420560d:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004205614:	00 00 00 
  8004205617:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420561b:	77 32                	ja     800420564f <check_boot_pml4e+0x3e2>
  800420561d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004205621:	48 89 c1             	mov    %rax,%rcx
  8004205624:	48 ba d8 8f 21 04 80 	movabs $0x8004218fd8,%rdx
  800420562b:	00 00 00 
  800420562e:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205633:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420563a:	00 00 00 
  800420563d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205642:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205649:	00 00 00 
  800420564c:	41 ff d0             	callq  *%r8
  800420564f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004205656:	ff ff ff 
  8004205659:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420565d:	48 01 c2             	add    %rax,%rdx
  8004205660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205664:	48 01 d0             	add    %rdx,%rax
  8004205667:	48 39 c1             	cmp    %rax,%rcx
  800420566a:	74 35                	je     80042056a1 <check_boot_pml4e+0x434>
  800420566c:	48 b9 50 94 21 04 80 	movabs $0x8004219450,%rcx
  8004205673:	00 00 00 
  8004205676:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420567d:	00 00 00 
  8004205680:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205685:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420568c:	00 00 00 
  800420568f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205694:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420569b:	00 00 00 
  800420569e:	41 ff d0             	callq  *%r8
  80042056a1:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042056a8:	00 
  80042056a9:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  80042056b0:	00 
  80042056b1:	0f 86 0c ff ff ff    	jbe    80042055c3 <check_boot_pml4e+0x356>
  80042056b7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056be:	00 
  80042056bf:	eb 67                	jmp    8004205728 <check_boot_pml4e+0x4bb>
  80042056c1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042056c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056c9:	48 01 c2             	add    %rax,%rdx
  80042056cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056d3:	48 89 d6             	mov    %rdx,%rsi
  80042056d6:	48 89 c7             	mov    %rax,%rdi
  80042056d9:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  80042056e0:	00 00 00 
  80042056e3:	ff d0                	callq  *%rax
  80042056e5:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042056e9:	74 35                	je     8004205720 <check_boot_pml4e+0x4b3>
  80042056eb:	48 b9 98 94 21 04 80 	movabs $0x8004219498,%rcx
  80042056f2:	00 00 00 
  80042056f5:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042056fc:	00 00 00 
  80042056ff:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205704:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420570b:	00 00 00 
  800420570e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205713:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420571a:	00 00 00 
  800420571d:	41 ff d0             	callq  *%r8
  8004205720:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205727:	00 
  8004205728:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  800420572f:	00 
  8004205730:	76 8f                	jbe    80042056c1 <check_boot_pml4e+0x454>
  8004205732:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004205737:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  800420573c:	0f 86 4b fe ff ff    	jbe    800420558d <check_boot_pml4e+0x320>
  8004205742:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004205749:	00 00 00 
  800420574c:	48 8b 00             	mov    (%rax),%rax
  800420574f:	48 83 c0 08          	add    $0x8,%rax
  8004205753:	48 8b 00             	mov    (%rax),%rax
  8004205756:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420575c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004205760:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205764:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205768:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  800420576b:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420576e:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205775:	00 00 00 
  8004205778:	48 8b 00             	mov    (%rax),%rax
  800420577b:	48 39 c2             	cmp    %rax,%rdx
  800420577e:	72 32                	jb     80042057b2 <check_boot_pml4e+0x545>
  8004205780:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205784:	48 89 c1             	mov    %rax,%rcx
  8004205787:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420578e:	00 00 00 
  8004205791:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205796:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420579d:	00 00 00 
  80042057a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057a5:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042057ac:	00 00 00 
  80042057af:	41 ff d0             	callq  *%r8
  80042057b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042057b9:	00 00 00 
  80042057bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042057c0:	48 01 d0             	add    %rdx,%rax
  80042057c3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042057c7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042057cb:	48 8b 00             	mov    (%rax),%rax
  80042057ce:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042057d4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042057d8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042057dc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042057e0:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042057e3:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042057e6:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042057ed:	00 00 00 
  80042057f0:	48 8b 00             	mov    (%rax),%rax
  80042057f3:	48 39 c2             	cmp    %rax,%rdx
  80042057f6:	72 32                	jb     800420582a <check_boot_pml4e+0x5bd>
  80042057f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042057fc:	48 89 c1             	mov    %rax,%rcx
  80042057ff:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004205806:	00 00 00 
  8004205809:	be b8 04 00 00       	mov    $0x4b8,%esi
  800420580e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205815:	00 00 00 
  8004205818:	b8 00 00 00 00       	mov    $0x0,%eax
  800420581d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205824:	00 00 00 
  8004205827:	41 ff d0             	callq  *%r8
  800420582a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205831:	00 00 00 
  8004205834:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004205838:	48 01 d0             	add    %rdx,%rax
  800420583b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420583f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205846:	00 
  8004205847:	e9 46 01 00 00       	jmpq   8004205992 <check_boot_pml4e+0x725>
  800420584c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205850:	48 83 f8 04          	cmp    $0x4,%rax
  8004205854:	72 63                	jb     80042058b9 <check_boot_pml4e+0x64c>
  8004205856:	48 83 f8 05          	cmp    $0x5,%rax
  800420585a:	76 06                	jbe    8004205862 <check_boot_pml4e+0x5f5>
  800420585c:	48 83 f8 1f          	cmp    $0x1f,%rax
  8004205860:	75 57                	jne    80042058b9 <check_boot_pml4e+0x64c>
  8004205862:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205866:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420586d:	00 
  800420586e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004205872:	48 01 d0             	add    %rdx,%rax
  8004205875:	48 8b 00             	mov    (%rax),%rax
  8004205878:	83 e0 01             	and    $0x1,%eax
  800420587b:	48 85 c0             	test   %rax,%rax
  800420587e:	0f 85 05 01 00 00    	jne    8004205989 <check_boot_pml4e+0x71c>
  8004205884:	48 b9 bb 94 21 04 80 	movabs $0x80042194bb,%rcx
  800420588b:	00 00 00 
  800420588e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205895:	00 00 00 
  8004205898:	be c2 04 00 00       	mov    $0x4c2,%esi
  800420589d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042058a4:	00 00 00 
  80042058a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058ac:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042058b3:	00 00 00 
  80042058b6:	41 ff d0             	callq  *%r8
  80042058b9:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  80042058be:	0f 86 c8 00 00 00    	jbe    800420598c <check_boot_pml4e+0x71f>
  80042058c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058cf:	00 
  80042058d0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042058d4:	48 01 d0             	add    %rdx,%rax
  80042058d7:	48 8b 00             	mov    (%rax),%rax
  80042058da:	83 e0 01             	and    $0x1,%eax
  80042058dd:	48 85 c0             	test   %rax,%rax
  80042058e0:	74 57                	je     8004205939 <check_boot_pml4e+0x6cc>
  80042058e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042058ed:	00 
  80042058ee:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042058f2:	48 01 d0             	add    %rdx,%rax
  80042058f5:	48 8b 00             	mov    (%rax),%rax
  80042058f8:	83 e0 02             	and    $0x2,%eax
  80042058fb:	48 85 c0             	test   %rax,%rax
  80042058fe:	0f 85 88 00 00 00    	jne    800420598c <check_boot_pml4e+0x71f>
  8004205904:	48 b9 cc 94 21 04 80 	movabs $0x80042194cc,%rcx
  800420590b:	00 00 00 
  800420590e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205915:	00 00 00 
  8004205918:	be c7 04 00 00       	mov    $0x4c7,%esi
  800420591d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205924:	00 00 00 
  8004205927:	b8 00 00 00 00       	mov    $0x0,%eax
  800420592c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205933:	00 00 00 
  8004205936:	41 ff d0             	callq  *%r8
  8004205939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420593d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205944:	00 
  8004205945:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004205949:	48 01 d0             	add    %rdx,%rax
  800420594c:	48 8b 00             	mov    (%rax),%rax
  800420594f:	48 85 c0             	test   %rax,%rax
  8004205952:	74 38                	je     800420598c <check_boot_pml4e+0x71f>
  8004205954:	48 b9 dd 94 21 04 80 	movabs $0x80042194dd,%rcx
  800420595b:	00 00 00 
  800420595e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205965:	00 00 00 
  8004205968:	be c9 04 00 00       	mov    $0x4c9,%esi
  800420596d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205974:	00 00 00 
  8004205977:	b8 00 00 00 00       	mov    $0x0,%eax
  800420597c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205983:	00 00 00 
  8004205986:	41 ff d0             	callq  *%r8
  8004205989:	90                   	nop
  800420598a:	eb 01                	jmp    800420598d <check_boot_pml4e+0x720>
  800420598c:	90                   	nop
  800420598d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205992:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205999:	00 
  800420599a:	0f 86 ac fe ff ff    	jbe    800420584c <check_boot_pml4e+0x5df>
  80042059a0:	48 bf f0 94 21 04 80 	movabs $0x80042194f0,%rdi
  80042059a7:	00 00 00 
  80042059aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059af:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042059b6:	00 00 00 
  80042059b9:	ff d2                	callq  *%rdx
  80042059bb:	90                   	nop
  80042059bc:	c9                   	leaveq 
  80042059bd:	c3                   	retq   

00000080042059be <check_va2pa>:
  80042059be:	55                   	push   %rbp
  80042059bf:	48 89 e5             	mov    %rsp,%rbp
  80042059c2:	48 83 ec 60          	sub    $0x60,%rsp
  80042059c6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042059ca:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042059ce:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059d2:	48 c1 e8 27          	shr    $0x27,%rax
  80042059d6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059db:	48 c1 e0 03          	shl    $0x3,%rax
  80042059df:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  80042059e3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042059e7:	48 8b 00             	mov    (%rax),%rax
  80042059ea:	83 e0 01             	and    $0x1,%eax
  80042059ed:	48 85 c0             	test   %rax,%rax
  80042059f0:	75 0c                	jne    80042059fe <check_va2pa+0x40>
  80042059f2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f9:	e9 38 02 00 00       	jmpq   8004205c36 <check_va2pa+0x278>
  80042059fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205a02:	48 8b 00             	mov    (%rax),%rax
  8004205a05:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004205a0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a13:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a17:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004205a1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004205a1d:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205a24:	00 00 00 
  8004205a27:	48 8b 00             	mov    (%rax),%rax
  8004205a2a:	48 39 c2             	cmp    %rax,%rdx
  8004205a2d:	72 32                	jb     8004205a61 <check_va2pa+0xa3>
  8004205a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a33:	48 89 c1             	mov    %rax,%rcx
  8004205a36:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004205a3d:	00 00 00 
  8004205a40:	be e1 04 00 00       	mov    $0x4e1,%esi
  8004205a45:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205a4c:	00 00 00 
  8004205a4f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a54:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205a5b:	00 00 00 
  8004205a5e:	41 ff d0             	callq  *%r8
  8004205a61:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a68:	00 00 00 
  8004205a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205a6f:	48 01 d0             	add    %rdx,%rax
  8004205a72:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205a76:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a7a:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205a7e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a83:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a8a:	00 
  8004205a8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205a8f:	48 01 d0             	add    %rdx,%rax
  8004205a92:	48 8b 00             	mov    (%rax),%rax
  8004205a95:	83 e0 01             	and    $0x1,%eax
  8004205a98:	48 85 c0             	test   %rax,%rax
  8004205a9b:	75 0c                	jne    8004205aa9 <check_va2pa+0xeb>
  8004205a9d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205aa4:	e9 8d 01 00 00       	jmpq   8004205c36 <check_va2pa+0x278>
  8004205aa9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aad:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205ab1:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205ab6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205abd:	00 
  8004205abe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205ac2:	48 01 d0             	add    %rdx,%rax
  8004205ac5:	48 8b 00             	mov    (%rax),%rax
  8004205ac8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ace:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205ad2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ad6:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205ada:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205add:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004205ae0:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205ae7:	00 00 00 
  8004205aea:	48 8b 00             	mov    (%rax),%rax
  8004205aed:	48 39 c2             	cmp    %rax,%rdx
  8004205af0:	72 32                	jb     8004205b24 <check_va2pa+0x166>
  8004205af2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205af6:	48 89 c1             	mov    %rax,%rcx
  8004205af9:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004205b00:	00 00 00 
  8004205b03:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205b08:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205b0f:	00 00 00 
  8004205b12:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b17:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205b1e:	00 00 00 
  8004205b21:	41 ff d0             	callq  *%r8
  8004205b24:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205b2b:	00 00 00 
  8004205b2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205b32:	48 01 d0             	add    %rdx,%rax
  8004205b35:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205b39:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205b3d:	48 c1 e8 15          	shr    $0x15,%rax
  8004205b41:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205b46:	48 c1 e0 03          	shl    $0x3,%rax
  8004205b4a:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  8004205b4e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b52:	48 8b 00             	mov    (%rax),%rax
  8004205b55:	83 e0 01             	and    $0x1,%eax
  8004205b58:	48 85 c0             	test   %rax,%rax
  8004205b5b:	75 0c                	jne    8004205b69 <check_va2pa+0x1ab>
  8004205b5d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205b64:	e9 cd 00 00 00       	jmpq   8004205c36 <check_va2pa+0x278>
  8004205b69:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205b6d:	48 8b 00             	mov    (%rax),%rax
  8004205b70:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205b76:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205b7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b7e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205b82:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205b85:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205b88:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004205b8f:	00 00 00 
  8004205b92:	48 8b 00             	mov    (%rax),%rax
  8004205b95:	48 39 c2             	cmp    %rax,%rdx
  8004205b98:	72 32                	jb     8004205bcc <check_va2pa+0x20e>
  8004205b9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b9e:	48 89 c1             	mov    %rax,%rcx
  8004205ba1:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004205ba8:	00 00 00 
  8004205bab:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205bb0:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205bb7:	00 00 00 
  8004205bba:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205bbf:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205bc6:	00 00 00 
  8004205bc9:	41 ff d0             	callq  *%r8
  8004205bcc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205bd3:	00 00 00 
  8004205bd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205bda:	48 01 d0             	add    %rdx,%rax
  8004205bdd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205be1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205be5:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205be9:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205bee:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205bf5:	00 
  8004205bf6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205bfa:	48 01 d0             	add    %rdx,%rax
  8004205bfd:	48 8b 00             	mov    (%rax),%rax
  8004205c00:	83 e0 01             	and    $0x1,%eax
  8004205c03:	48 85 c0             	test   %rax,%rax
  8004205c06:	75 09                	jne    8004205c11 <check_va2pa+0x253>
  8004205c08:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205c0f:	eb 25                	jmp    8004205c36 <check_va2pa+0x278>
  8004205c11:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205c15:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205c19:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205c1e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205c25:	00 
  8004205c26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205c2a:	48 01 d0             	add    %rdx,%rax
  8004205c2d:	48 8b 00             	mov    (%rax),%rax
  8004205c30:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205c36:	c9                   	leaveq 
  8004205c37:	c3                   	retq   

0000008004205c38 <page_check>:
  8004205c38:	55                   	push   %rbp
  8004205c39:	48 89 e5             	mov    %rsp,%rbp
  8004205c3c:	53                   	push   %rbx
  8004205c3d:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205c44:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205c4b:	00 
  8004205c4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205c50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205c58:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c5c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205c60:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205c64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205c68:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205c6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205c70:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c74:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c79:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205c80:	00 00 00 
  8004205c83:	ff d0                	callq  *%rax
  8004205c85:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205c89:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205c8e:	75 35                	jne    8004205cc5 <page_check+0x8d>
  8004205c90:	48 b9 0f 95 21 04 80 	movabs $0x800421950f,%rcx
  8004205c97:	00 00 00 
  8004205c9a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205ca1:	00 00 00 
  8004205ca4:	be 02 05 00 00       	mov    $0x502,%esi
  8004205ca9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205cb0:	00 00 00 
  8004205cb3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cb8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205cbf:	00 00 00 
  8004205cc2:	41 ff d0             	callq  *%r8
  8004205cc5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205cca:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205cd1:	00 00 00 
  8004205cd4:	ff d0                	callq  *%rax
  8004205cd6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205cda:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205cdf:	75 35                	jne    8004205d16 <page_check+0xde>
  8004205ce1:	48 b9 23 95 21 04 80 	movabs $0x8004219523,%rcx
  8004205ce8:	00 00 00 
  8004205ceb:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205cf2:	00 00 00 
  8004205cf5:	be 03 05 00 00       	mov    $0x503,%esi
  8004205cfa:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205d01:	00 00 00 
  8004205d04:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d09:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205d10:	00 00 00 
  8004205d13:	41 ff d0             	callq  *%r8
  8004205d16:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d1b:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205d22:	00 00 00 
  8004205d25:	ff d0                	callq  *%rax
  8004205d27:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205d2b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d30:	75 35                	jne    8004205d67 <page_check+0x12f>
  8004205d32:	48 b9 37 95 21 04 80 	movabs $0x8004219537,%rcx
  8004205d39:	00 00 00 
  8004205d3c:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205d43:	00 00 00 
  8004205d46:	be 04 05 00 00       	mov    $0x504,%esi
  8004205d4b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205d52:	00 00 00 
  8004205d55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205d61:	00 00 00 
  8004205d64:	41 ff d0             	callq  *%r8
  8004205d67:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205d6c:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205d73:	00 00 00 
  8004205d76:	ff d0                	callq  *%rax
  8004205d78:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205d7c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205d81:	75 35                	jne    8004205db8 <page_check+0x180>
  8004205d83:	48 b9 4b 95 21 04 80 	movabs $0x800421954b,%rcx
  8004205d8a:	00 00 00 
  8004205d8d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205d94:	00 00 00 
  8004205d97:	be 05 05 00 00       	mov    $0x505,%esi
  8004205d9c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205da3:	00 00 00 
  8004205da6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dab:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205db2:	00 00 00 
  8004205db5:	41 ff d0             	callq  *%r8
  8004205db8:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205dbd:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205dc4:	00 00 00 
  8004205dc7:	ff d0                	callq  *%rax
  8004205dc9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205dcd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205dd2:	75 35                	jne    8004205e09 <page_check+0x1d1>
  8004205dd4:	48 b9 5f 95 21 04 80 	movabs $0x800421955f,%rcx
  8004205ddb:	00 00 00 
  8004205dde:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205de5:	00 00 00 
  8004205de8:	be 06 05 00 00       	mov    $0x506,%esi
  8004205ded:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205df4:	00 00 00 
  8004205df7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dfc:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205e03:	00 00 00 
  8004205e06:	41 ff d0             	callq  *%r8
  8004205e09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205e0e:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004205e15:	00 00 00 
  8004205e18:	ff d0                	callq  *%rax
  8004205e1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205e1e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e23:	75 35                	jne    8004205e5a <page_check+0x222>
  8004205e25:	48 b9 73 95 21 04 80 	movabs $0x8004219573,%rcx
  8004205e2c:	00 00 00 
  8004205e2f:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205e36:	00 00 00 
  8004205e39:	be 07 05 00 00       	mov    $0x507,%esi
  8004205e3e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205e45:	00 00 00 
  8004205e48:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e4d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205e54:	00 00 00 
  8004205e57:	41 ff d0             	callq  *%r8
  8004205e5a:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205e5f:	75 35                	jne    8004205e96 <page_check+0x25e>
  8004205e61:	48 b9 c1 92 21 04 80 	movabs $0x80042192c1,%rcx
  8004205e68:	00 00 00 
  8004205e6b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205e72:	00 00 00 
  8004205e75:	be 09 05 00 00       	mov    $0x509,%esi
  8004205e7a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205e81:	00 00 00 
  8004205e84:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e89:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205e90:	00 00 00 
  8004205e93:	41 ff d0             	callq  *%r8
  8004205e96:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205e9b:	74 0a                	je     8004205ea7 <page_check+0x26f>
  8004205e9d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205ea1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ea5:	75 35                	jne    8004205edc <page_check+0x2a4>
  8004205ea7:	48 b9 c5 92 21 04 80 	movabs $0x80042192c5,%rcx
  8004205eae:	00 00 00 
  8004205eb1:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205eb8:	00 00 00 
  8004205ebb:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205ec0:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205ec7:	00 00 00 
  8004205eca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ecf:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205ed6:	00 00 00 
  8004205ed9:	41 ff d0             	callq  *%r8
  8004205edc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205ee1:	74 14                	je     8004205ef7 <page_check+0x2bf>
  8004205ee3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ee7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205eeb:	74 0a                	je     8004205ef7 <page_check+0x2bf>
  8004205eed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205ef1:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ef5:	75 35                	jne    8004205f2c <page_check+0x2f4>
  8004205ef7:	48 b9 d8 92 21 04 80 	movabs $0x80042192d8,%rcx
  8004205efe:	00 00 00 
  8004205f01:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205f08:	00 00 00 
  8004205f0b:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205f10:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205f17:	00 00 00 
  8004205f1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f1f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205f26:	00 00 00 
  8004205f29:	41 ff d0             	callq  *%r8
  8004205f2c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205f31:	74 1e                	je     8004205f51 <page_check+0x319>
  8004205f33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f37:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f3b:	74 14                	je     8004205f51 <page_check+0x319>
  8004205f3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f41:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205f45:	74 0a                	je     8004205f51 <page_check+0x319>
  8004205f47:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205f4b:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205f4f:	75 35                	jne    8004205f86 <page_check+0x34e>
  8004205f51:	48 b9 88 95 21 04 80 	movabs $0x8004219588,%rcx
  8004205f58:	00 00 00 
  8004205f5b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205f62:	00 00 00 
  8004205f65:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205f6a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205f71:	00 00 00 
  8004205f74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f79:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205f80:	00 00 00 
  8004205f83:	41 ff d0             	callq  *%r8
  8004205f86:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205f8b:	74 28                	je     8004205fb5 <page_check+0x37d>
  8004205f8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f91:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205f95:	74 1e                	je     8004205fb5 <page_check+0x37d>
  8004205f97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205f9b:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205f9f:	74 14                	je     8004205fb5 <page_check+0x37d>
  8004205fa1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205fa5:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205fa9:	74 0a                	je     8004205fb5 <page_check+0x37d>
  8004205fab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205faf:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205fb3:	75 35                	jne    8004205fea <page_check+0x3b2>
  8004205fb5:	48 b9 b8 95 21 04 80 	movabs $0x80042195b8,%rcx
  8004205fbc:	00 00 00 
  8004205fbf:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004205fc6:	00 00 00 
  8004205fc9:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205fce:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004205fd5:	00 00 00 
  8004205fd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fdd:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004205fe4:	00 00 00 
  8004205fe7:	41 ff d0             	callq  *%r8
  8004205fea:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205fef:	74 32                	je     8004206023 <page_check+0x3eb>
  8004205ff1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ff5:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205ff9:	74 28                	je     8004206023 <page_check+0x3eb>
  8004205ffb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205fff:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004206003:	74 1e                	je     8004206023 <page_check+0x3eb>
  8004206005:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206009:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420600d:	74 14                	je     8004206023 <page_check+0x3eb>
  800420600f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004206013:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004206017:	74 0a                	je     8004206023 <page_check+0x3eb>
  8004206019:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420601d:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004206021:	75 35                	jne    8004206058 <page_check+0x420>
  8004206023:	48 b9 f8 95 21 04 80 	movabs $0x80042195f8,%rcx
  800420602a:	00 00 00 
  800420602d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206034:	00 00 00 
  8004206037:	be 0e 05 00 00       	mov    $0x50e,%esi
  800420603c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206043:	00 00 00 
  8004206046:	b8 00 00 00 00       	mov    $0x0,%eax
  800420604b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206052:	00 00 00 
  8004206055:	41 ff d0             	callq  *%r8
  8004206058:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420605f:	00 00 00 
  8004206062:	48 8b 00             	mov    (%rax),%rax
  8004206065:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004206069:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  8004206070:	00 00 00 
  8004206073:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420607a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420607f:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004206086:	00 00 00 
  8004206089:	ff d0                	callq  *%rax
  800420608b:	48 85 c0             	test   %rax,%rax
  800420608e:	74 35                	je     80042060c5 <page_check+0x48d>
  8004206090:	48 b9 4f 93 21 04 80 	movabs $0x800421934f,%rcx
  8004206097:	00 00 00 
  800420609a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042060a1:	00 00 00 
  80042060a4:	be 15 05 00 00       	mov    $0x515,%esi
  80042060a9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042060b0:	00 00 00 
  80042060b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042060b8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042060bf:	00 00 00 
  80042060c2:	41 ff d0             	callq  *%r8
  80042060c5:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042060cc:	00 00 00 
  80042060cf:	48 8b 00             	mov    (%rax),%rax
  80042060d2:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  80042060d9:	be 00 00 00 00       	mov    $0x0,%esi
  80042060de:	48 89 c7             	mov    %rax,%rdi
  80042060e1:	48 b8 ea 3e 20 04 80 	movabs $0x8004203eea,%rax
  80042060e8:	00 00 00 
  80042060eb:	ff d0                	callq  *%rax
  80042060ed:	48 85 c0             	test   %rax,%rax
  80042060f0:	74 35                	je     8004206127 <page_check+0x4ef>
  80042060f2:	48 b9 48 96 21 04 80 	movabs $0x8004219648,%rcx
  80042060f9:	00 00 00 
  80042060fc:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206103:	00 00 00 
  8004206106:	be 18 05 00 00       	mov    $0x518,%esi
  800420610b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206112:	00 00 00 
  8004206115:	b8 00 00 00 00       	mov    $0x0,%eax
  800420611a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206121:	00 00 00 
  8004206124:	41 ff d0             	callq  *%r8
  8004206127:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420612e:	00 00 00 
  8004206131:	48 8b 00             	mov    (%rax),%rax
  8004206134:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206138:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420613d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206142:	48 89 c7             	mov    %rax,%rdi
  8004206145:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420614c:	00 00 00 
  800420614f:	ff d0                	callq  *%rax
  8004206151:	85 c0                	test   %eax,%eax
  8004206153:	78 35                	js     800420618a <page_check+0x552>
  8004206155:	48 b9 80 96 21 04 80 	movabs $0x8004219680,%rcx
  800420615c:	00 00 00 
  800420615f:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206166:	00 00 00 
  8004206169:	be 1b 05 00 00       	mov    $0x51b,%esi
  800420616e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206175:	00 00 00 
  8004206178:	b8 00 00 00 00       	mov    $0x0,%eax
  800420617d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206184:	00 00 00 
  8004206187:	41 ff d0             	callq  *%r8
  800420618a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420618e:	48 89 c7             	mov    %rax,%rdi
  8004206191:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004206198:	00 00 00 
  800420619b:	ff d0                	callq  *%rax
  800420619d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042061a4:	00 00 00 
  80042061a7:	48 8b 00             	mov    (%rax),%rax
  80042061aa:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042061ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042061b3:	ba 00 00 00 00       	mov    $0x0,%edx
  80042061b8:	48 89 c7             	mov    %rax,%rdi
  80042061bb:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  80042061c2:	00 00 00 
  80042061c5:	ff d0                	callq  *%rax
  80042061c7:	85 c0                	test   %eax,%eax
  80042061c9:	78 35                	js     8004206200 <page_check+0x5c8>
  80042061cb:	48 b9 80 96 21 04 80 	movabs $0x8004219680,%rcx
  80042061d2:	00 00 00 
  80042061d5:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042061dc:	00 00 00 
  80042061df:	be 1f 05 00 00       	mov    $0x51f,%esi
  80042061e4:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042061eb:	00 00 00 
  80042061ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061f3:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042061fa:	00 00 00 
  80042061fd:	41 ff d0             	callq  *%r8
  8004206200:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206204:	48 89 c7             	mov    %rax,%rdi
  8004206207:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  800420620e:	00 00 00 
  8004206211:	ff d0                	callq  *%rax
  8004206213:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206217:	48 89 c7             	mov    %rax,%rdi
  800420621a:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  8004206221:	00 00 00 
  8004206224:	ff d0                	callq  *%rax
  8004206226:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420622d:	00 00 00 
  8004206230:	48 8b 00             	mov    (%rax),%rax
  8004206233:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206237:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420623c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206241:	48 89 c7             	mov    %rax,%rdi
  8004206244:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420624b:	00 00 00 
  800420624e:	ff d0                	callq  *%rax
  8004206250:	85 c0                	test   %eax,%eax
  8004206252:	74 35                	je     8004206289 <page_check+0x651>
  8004206254:	48 b9 b0 96 21 04 80 	movabs $0x80042196b0,%rcx
  800420625b:	00 00 00 
  800420625e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206265:	00 00 00 
  8004206268:	be 25 05 00 00       	mov    $0x525,%esi
  800420626d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206274:	00 00 00 
  8004206277:	b8 00 00 00 00       	mov    $0x0,%eax
  800420627c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206283:	00 00 00 
  8004206286:	41 ff d0             	callq  *%r8
  8004206289:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206290:	00 00 00 
  8004206293:	48 8b 00             	mov    (%rax),%rax
  8004206296:	48 8b 00             	mov    (%rax),%rax
  8004206299:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420629f:	48 89 c3             	mov    %rax,%rbx
  80042062a2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042062a6:	48 89 c7             	mov    %rax,%rdi
  80042062a9:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042062b0:	00 00 00 
  80042062b3:	ff d0                	callq  *%rax
  80042062b5:	48 39 c3             	cmp    %rax,%rbx
  80042062b8:	0f 84 97 00 00 00    	je     8004206355 <page_check+0x71d>
  80042062be:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042062c5:	00 00 00 
  80042062c8:	48 8b 00             	mov    (%rax),%rax
  80042062cb:	48 8b 00             	mov    (%rax),%rax
  80042062ce:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042062d4:	48 89 c3             	mov    %rax,%rbx
  80042062d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062db:	48 89 c7             	mov    %rax,%rdi
  80042062de:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042062e5:	00 00 00 
  80042062e8:	ff d0                	callq  *%rax
  80042062ea:	48 39 c3             	cmp    %rax,%rbx
  80042062ed:	74 66                	je     8004206355 <page_check+0x71d>
  80042062ef:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042062f6:	00 00 00 
  80042062f9:	48 8b 00             	mov    (%rax),%rax
  80042062fc:	48 8b 00             	mov    (%rax),%rax
  80042062ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206305:	48 89 c3             	mov    %rax,%rbx
  8004206308:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420630c:	48 89 c7             	mov    %rax,%rdi
  800420630f:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206316:	00 00 00 
  8004206319:	ff d0                	callq  *%rax
  800420631b:	48 39 c3             	cmp    %rax,%rbx
  800420631e:	74 35                	je     8004206355 <page_check+0x71d>
  8004206320:	48 b9 e0 96 21 04 80 	movabs $0x80042196e0,%rcx
  8004206327:	00 00 00 
  800420632a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206331:	00 00 00 
  8004206334:	be 26 05 00 00       	mov    $0x526,%esi
  8004206339:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206340:	00 00 00 
  8004206343:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206348:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420634f:	00 00 00 
  8004206352:	41 ff d0             	callq  *%r8
  8004206355:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420635c:	00 00 00 
  800420635f:	48 8b 00             	mov    (%rax),%rax
  8004206362:	be 00 00 00 00       	mov    $0x0,%esi
  8004206367:	48 89 c7             	mov    %rax,%rdi
  800420636a:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206371:	00 00 00 
  8004206374:	ff d0                	callq  *%rax
  8004206376:	48 89 c3             	mov    %rax,%rbx
  8004206379:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420637d:	48 89 c7             	mov    %rax,%rdi
  8004206380:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206387:	00 00 00 
  800420638a:	ff d0                	callq  *%rax
  800420638c:	48 39 c3             	cmp    %rax,%rbx
  800420638f:	74 35                	je     80042063c6 <page_check+0x78e>
  8004206391:	48 b9 68 97 21 04 80 	movabs $0x8004219768,%rcx
  8004206398:	00 00 00 
  800420639b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042063a2:	00 00 00 
  80042063a5:	be 27 05 00 00       	mov    $0x527,%esi
  80042063aa:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042063b1:	00 00 00 
  80042063b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063b9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042063c0:	00 00 00 
  80042063c3:	41 ff d0             	callq  *%r8
  80042063c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042063ca:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063ce:	66 83 f8 01          	cmp    $0x1,%ax
  80042063d2:	74 35                	je     8004206409 <page_check+0x7d1>
  80042063d4:	48 b9 95 97 21 04 80 	movabs $0x8004219795,%rcx
  80042063db:	00 00 00 
  80042063de:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042063e5:	00 00 00 
  80042063e8:	be 28 05 00 00       	mov    $0x528,%esi
  80042063ed:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042063f4:	00 00 00 
  80042063f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063fc:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206403:	00 00 00 
  8004206406:	41 ff d0             	callq  *%r8
  8004206409:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420640d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206411:	66 83 f8 01          	cmp    $0x1,%ax
  8004206415:	74 35                	je     800420644c <page_check+0x814>
  8004206417:	48 b9 a6 97 21 04 80 	movabs $0x80042197a6,%rcx
  800420641e:	00 00 00 
  8004206421:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206428:	00 00 00 
  800420642b:	be 29 05 00 00       	mov    $0x529,%esi
  8004206430:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206437:	00 00 00 
  800420643a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420643f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206446:	00 00 00 
  8004206449:	41 ff d0             	callq  *%r8
  800420644c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206450:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206454:	66 83 f8 01          	cmp    $0x1,%ax
  8004206458:	74 35                	je     800420648f <page_check+0x857>
  800420645a:	48 b9 b7 97 21 04 80 	movabs $0x80042197b7,%rcx
  8004206461:	00 00 00 
  8004206464:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420646b:	00 00 00 
  800420646e:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206473:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420647a:	00 00 00 
  800420647d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206482:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206489:	00 00 00 
  800420648c:	41 ff d0             	callq  *%r8
  800420648f:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206496:	00 00 00 
  8004206499:	48 8b 00             	mov    (%rax),%rax
  800420649c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042064a0:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042064a5:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042064aa:	48 89 c7             	mov    %rax,%rdi
  80042064ad:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  80042064b4:	00 00 00 
  80042064b7:	ff d0                	callq  *%rax
  80042064b9:	85 c0                	test   %eax,%eax
  80042064bb:	74 35                	je     80042064f2 <page_check+0x8ba>
  80042064bd:	48 b9 c8 97 21 04 80 	movabs $0x80042197c8,%rcx
  80042064c4:	00 00 00 
  80042064c7:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042064ce:	00 00 00 
  80042064d1:	be 2c 05 00 00       	mov    $0x52c,%esi
  80042064d6:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042064dd:	00 00 00 
  80042064e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064e5:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042064ec:	00 00 00 
  80042064ef:	41 ff d0             	callq  *%r8
  80042064f2:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042064f9:	00 00 00 
  80042064fc:	48 8b 00             	mov    (%rax),%rax
  80042064ff:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206504:	48 89 c7             	mov    %rax,%rdi
  8004206507:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  800420650e:	00 00 00 
  8004206511:	ff d0                	callq  *%rax
  8004206513:	48 89 c3             	mov    %rax,%rbx
  8004206516:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420651a:	48 89 c7             	mov    %rax,%rdi
  800420651d:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206524:	00 00 00 
  8004206527:	ff d0                	callq  *%rax
  8004206529:	48 39 c3             	cmp    %rax,%rbx
  800420652c:	74 35                	je     8004206563 <page_check+0x92b>
  800420652e:	48 b9 00 98 21 04 80 	movabs $0x8004219800,%rcx
  8004206535:	00 00 00 
  8004206538:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420653f:	00 00 00 
  8004206542:	be 2d 05 00 00       	mov    $0x52d,%esi
  8004206547:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420654e:	00 00 00 
  8004206551:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206556:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420655d:	00 00 00 
  8004206560:	41 ff d0             	callq  *%r8
  8004206563:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206567:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420656b:	66 83 f8 02          	cmp    $0x2,%ax
  800420656f:	74 35                	je     80042065a6 <page_check+0x96e>
  8004206571:	48 b9 30 98 21 04 80 	movabs $0x8004219830,%rcx
  8004206578:	00 00 00 
  800420657b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206582:	00 00 00 
  8004206585:	be 2e 05 00 00       	mov    $0x52e,%esi
  800420658a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206591:	00 00 00 
  8004206594:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206599:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042065a0:	00 00 00 
  80042065a3:	41 ff d0             	callq  *%r8
  80042065a6:	bf 00 00 00 00       	mov    $0x0,%edi
  80042065ab:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  80042065b2:	00 00 00 
  80042065b5:	ff d0                	callq  *%rax
  80042065b7:	48 85 c0             	test   %rax,%rax
  80042065ba:	74 35                	je     80042065f1 <page_check+0x9b9>
  80042065bc:	48 b9 4f 93 21 04 80 	movabs $0x800421934f,%rcx
  80042065c3:	00 00 00 
  80042065c6:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042065cd:	00 00 00 
  80042065d0:	be 31 05 00 00       	mov    $0x531,%esi
  80042065d5:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042065dc:	00 00 00 
  80042065df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065e4:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042065eb:	00 00 00 
  80042065ee:	41 ff d0             	callq  *%r8
  80042065f1:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042065f8:	00 00 00 
  80042065fb:	48 8b 00             	mov    (%rax),%rax
  80042065fe:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206602:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206607:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420660c:	48 89 c7             	mov    %rax,%rdi
  800420660f:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  8004206616:	00 00 00 
  8004206619:	ff d0                	callq  *%rax
  800420661b:	85 c0                	test   %eax,%eax
  800420661d:	74 35                	je     8004206654 <page_check+0xa1c>
  800420661f:	48 b9 c8 97 21 04 80 	movabs $0x80042197c8,%rcx
  8004206626:	00 00 00 
  8004206629:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206630:	00 00 00 
  8004206633:	be 34 05 00 00       	mov    $0x534,%esi
  8004206638:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420663f:	00 00 00 
  8004206642:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206647:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420664e:	00 00 00 
  8004206651:	41 ff d0             	callq  *%r8
  8004206654:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420665b:	00 00 00 
  800420665e:	48 8b 00             	mov    (%rax),%rax
  8004206661:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206666:	48 89 c7             	mov    %rax,%rdi
  8004206669:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206670:	00 00 00 
  8004206673:	ff d0                	callq  *%rax
  8004206675:	48 89 c3             	mov    %rax,%rbx
  8004206678:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420667c:	48 89 c7             	mov    %rax,%rdi
  800420667f:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206686:	00 00 00 
  8004206689:	ff d0                	callq  *%rax
  800420668b:	48 39 c3             	cmp    %rax,%rbx
  800420668e:	74 35                	je     80042066c5 <page_check+0xa8d>
  8004206690:	48 b9 00 98 21 04 80 	movabs $0x8004219800,%rcx
  8004206697:	00 00 00 
  800420669a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042066a1:	00 00 00 
  80042066a4:	be 35 05 00 00       	mov    $0x535,%esi
  80042066a9:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042066b0:	00 00 00 
  80042066b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042066bf:	00 00 00 
  80042066c2:	41 ff d0             	callq  *%r8
  80042066c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042066c9:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042066cd:	66 83 f8 02          	cmp    $0x2,%ax
  80042066d1:	74 35                	je     8004206708 <page_check+0xad0>
  80042066d3:	48 b9 30 98 21 04 80 	movabs $0x8004219830,%rcx
  80042066da:	00 00 00 
  80042066dd:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042066e4:	00 00 00 
  80042066e7:	be 36 05 00 00       	mov    $0x536,%esi
  80042066ec:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042066f3:	00 00 00 
  80042066f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066fb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206702:	00 00 00 
  8004206705:	41 ff d0             	callq  *%r8
  8004206708:	bf 00 00 00 00       	mov    $0x0,%edi
  800420670d:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004206714:	00 00 00 
  8004206717:	ff d0                	callq  *%rax
  8004206719:	48 85 c0             	test   %rax,%rax
  800420671c:	74 35                	je     8004206753 <page_check+0xb1b>
  800420671e:	48 b9 4f 93 21 04 80 	movabs $0x800421934f,%rcx
  8004206725:	00 00 00 
  8004206728:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420672f:	00 00 00 
  8004206732:	be 3a 05 00 00       	mov    $0x53a,%esi
  8004206737:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420673e:	00 00 00 
  8004206741:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206746:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420674d:	00 00 00 
  8004206750:	41 ff d0             	callq  *%r8
  8004206753:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420675a:	00 00 00 
  800420675d:	48 8b 00             	mov    (%rax),%rax
  8004206760:	48 8b 00             	mov    (%rax),%rax
  8004206763:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206769:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800420676d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206771:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206775:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206778:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420677b:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004206782:	00 00 00 
  8004206785:	48 8b 00             	mov    (%rax),%rax
  8004206788:	48 39 c2             	cmp    %rax,%rdx
  800420678b:	72 32                	jb     80042067bf <page_check+0xb87>
  800420678d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206791:	48 89 c1             	mov    %rax,%rcx
  8004206794:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420679b:	00 00 00 
  800420679e:	be 3c 05 00 00       	mov    $0x53c,%esi
  80042067a3:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042067aa:	00 00 00 
  80042067ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067b2:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042067b9:	00 00 00 
  80042067bc:	41 ff d0             	callq  *%r8
  80042067bf:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042067c6:	00 00 00 
  80042067c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042067cd:	48 01 d0             	add    %rdx,%rax
  80042067d0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042067d4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042067d8:	48 8b 00             	mov    (%rax),%rax
  80042067db:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042067e1:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042067e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042067e9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042067ed:	89 45 8c             	mov    %eax,-0x74(%rbp)
  80042067f0:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042067f3:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042067fa:	00 00 00 
  80042067fd:	48 8b 00             	mov    (%rax),%rax
  8004206800:	48 39 c2             	cmp    %rax,%rdx
  8004206803:	72 32                	jb     8004206837 <page_check+0xbff>
  8004206805:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206809:	48 89 c1             	mov    %rax,%rcx
  800420680c:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004206813:	00 00 00 
  8004206816:	be 3d 05 00 00       	mov    $0x53d,%esi
  800420681b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206822:	00 00 00 
  8004206825:	b8 00 00 00 00       	mov    $0x0,%eax
  800420682a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206831:	00 00 00 
  8004206834:	41 ff d0             	callq  *%r8
  8004206837:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420683e:	00 00 00 
  8004206841:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206845:	48 01 d0             	add    %rdx,%rax
  8004206848:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420684c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004206850:	48 8b 00             	mov    (%rax),%rax
  8004206853:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206859:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004206860:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206867:	48 c1 e8 0c          	shr    $0xc,%rax
  800420686b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206871:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206877:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420687e:	00 00 00 
  8004206881:	48 8b 00             	mov    (%rax),%rax
  8004206884:	48 39 c2             	cmp    %rax,%rdx
  8004206887:	72 35                	jb     80042068be <page_check+0xc86>
  8004206889:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206890:	48 89 c1             	mov    %rax,%rcx
  8004206893:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420689a:	00 00 00 
  800420689d:	be 3e 05 00 00       	mov    $0x53e,%esi
  80042068a2:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042068a9:	00 00 00 
  80042068ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068b1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042068b8:	00 00 00 
  80042068bb:	41 ff d0             	callq  *%r8
  80042068be:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042068c5:	00 00 00 
  80042068c8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042068cf:	48 01 d0             	add    %rdx,%rax
  80042068d2:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042068d9:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042068e0:	00 00 00 
  80042068e3:	48 8b 00             	mov    (%rax),%rax
  80042068e6:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068eb:	be 00 10 00 00       	mov    $0x1000,%esi
  80042068f0:	48 89 c7             	mov    %rax,%rdi
  80042068f3:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  80042068fa:	00 00 00 
  80042068fd:	ff d0                	callq  *%rax
  80042068ff:	48 89 c2             	mov    %rax,%rdx
  8004206902:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004206909:	48 83 c0 08          	add    $0x8,%rax
  800420690d:	48 39 c2             	cmp    %rax,%rdx
  8004206910:	74 35                	je     8004206947 <page_check+0xd0f>
  8004206912:	48 b9 48 98 21 04 80 	movabs $0x8004219848,%rcx
  8004206919:	00 00 00 
  800420691c:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206923:	00 00 00 
  8004206926:	be 3f 05 00 00       	mov    $0x53f,%esi
  800420692b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206932:	00 00 00 
  8004206935:	b8 00 00 00 00       	mov    $0x0,%eax
  800420693a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206941:	00 00 00 
  8004206944:	41 ff d0             	callq  *%r8
  8004206947:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420694e:	00 00 00 
  8004206951:	48 8b 00             	mov    (%rax),%rax
  8004206954:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206958:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420695d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206962:	48 89 c7             	mov    %rax,%rdi
  8004206965:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420696c:	00 00 00 
  800420696f:	ff d0                	callq  *%rax
  8004206971:	85 c0                	test   %eax,%eax
  8004206973:	74 35                	je     80042069aa <page_check+0xd72>
  8004206975:	48 b9 88 98 21 04 80 	movabs $0x8004219888,%rcx
  800420697c:	00 00 00 
  800420697f:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206986:	00 00 00 
  8004206989:	be 42 05 00 00       	mov    $0x542,%esi
  800420698e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206995:	00 00 00 
  8004206998:	b8 00 00 00 00       	mov    $0x0,%eax
  800420699d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042069a4:	00 00 00 
  80042069a7:	41 ff d0             	callq  *%r8
  80042069aa:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042069b1:	00 00 00 
  80042069b4:	48 8b 00             	mov    (%rax),%rax
  80042069b7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042069bc:	48 89 c7             	mov    %rax,%rdi
  80042069bf:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  80042069c6:	00 00 00 
  80042069c9:	ff d0                	callq  *%rax
  80042069cb:	48 89 c3             	mov    %rax,%rbx
  80042069ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042069d2:	48 89 c7             	mov    %rax,%rdi
  80042069d5:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  80042069dc:	00 00 00 
  80042069df:	ff d0                	callq  *%rax
  80042069e1:	48 39 c3             	cmp    %rax,%rbx
  80042069e4:	74 35                	je     8004206a1b <page_check+0xde3>
  80042069e6:	48 b9 00 98 21 04 80 	movabs $0x8004219800,%rcx
  80042069ed:	00 00 00 
  80042069f0:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042069f7:	00 00 00 
  80042069fa:	be 43 05 00 00       	mov    $0x543,%esi
  80042069ff:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206a06:	00 00 00 
  8004206a09:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a0e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206a15:	00 00 00 
  8004206a18:	41 ff d0             	callq  *%r8
  8004206a1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206a1f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206a23:	66 83 f8 02          	cmp    $0x2,%ax
  8004206a27:	74 35                	je     8004206a5e <page_check+0xe26>
  8004206a29:	48 b9 30 98 21 04 80 	movabs $0x8004219830,%rcx
  8004206a30:	00 00 00 
  8004206a33:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206a3a:	00 00 00 
  8004206a3d:	be 44 05 00 00       	mov    $0x544,%esi
  8004206a42:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206a49:	00 00 00 
  8004206a4c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a51:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206a58:	00 00 00 
  8004206a5b:	41 ff d0             	callq  *%r8
  8004206a5e:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206a65:	00 00 00 
  8004206a68:	48 8b 00             	mov    (%rax),%rax
  8004206a6b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a70:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a75:	48 89 c7             	mov    %rax,%rdi
  8004206a78:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004206a7f:	00 00 00 
  8004206a82:	ff d0                	callq  *%rax
  8004206a84:	48 8b 00             	mov    (%rax),%rax
  8004206a87:	83 e0 04             	and    $0x4,%eax
  8004206a8a:	48 85 c0             	test   %rax,%rax
  8004206a8d:	75 35                	jne    8004206ac4 <page_check+0xe8c>
  8004206a8f:	48 b9 c8 98 21 04 80 	movabs $0x80042198c8,%rcx
  8004206a96:	00 00 00 
  8004206a99:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206aa0:	00 00 00 
  8004206aa3:	be 45 05 00 00       	mov    $0x545,%esi
  8004206aa8:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206aaf:	00 00 00 
  8004206ab2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ab7:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206abe:	00 00 00 
  8004206ac1:	41 ff d0             	callq  *%r8
  8004206ac4:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206acb:	00 00 00 
  8004206ace:	48 8b 00             	mov    (%rax),%rax
  8004206ad1:	48 8b 00             	mov    (%rax),%rax
  8004206ad4:	83 e0 04             	and    $0x4,%eax
  8004206ad7:	48 85 c0             	test   %rax,%rax
  8004206ada:	75 35                	jne    8004206b11 <page_check+0xed9>
  8004206adc:	48 b9 fb 98 21 04 80 	movabs $0x80042198fb,%rcx
  8004206ae3:	00 00 00 
  8004206ae6:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206aed:	00 00 00 
  8004206af0:	be 46 05 00 00       	mov    $0x546,%esi
  8004206af5:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206afc:	00 00 00 
  8004206aff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b04:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206b0b:	00 00 00 
  8004206b0e:	41 ff d0             	callq  *%r8
  8004206b11:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206b18:	00 00 00 
  8004206b1b:	48 8b 00             	mov    (%rax),%rax
  8004206b1e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004206b22:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b27:	ba 00 00 20 00       	mov    $0x200000,%edx
  8004206b2c:	48 89 c7             	mov    %rax,%rdi
  8004206b2f:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  8004206b36:	00 00 00 
  8004206b39:	ff d0                	callq  *%rax
  8004206b3b:	85 c0                	test   %eax,%eax
  8004206b3d:	78 35                	js     8004206b74 <page_check+0xf3c>
  8004206b3f:	48 b9 18 99 21 04 80 	movabs $0x8004219918,%rcx
  8004206b46:	00 00 00 
  8004206b49:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206b50:	00 00 00 
  8004206b53:	be 4a 05 00 00       	mov    $0x54a,%esi
  8004206b58:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206b5f:	00 00 00 
  8004206b62:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b67:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206b6e:	00 00 00 
  8004206b71:	41 ff d0             	callq  *%r8
  8004206b74:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206b7b:	00 00 00 
  8004206b7e:	48 8b 00             	mov    (%rax),%rax
  8004206b81:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206b85:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206b8a:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206b8f:	48 89 c7             	mov    %rax,%rdi
  8004206b92:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  8004206b99:	00 00 00 
  8004206b9c:	ff d0                	callq  *%rax
  8004206b9e:	85 c0                	test   %eax,%eax
  8004206ba0:	74 35                	je     8004206bd7 <page_check+0xf9f>
  8004206ba2:	48 b9 50 99 21 04 80 	movabs $0x8004219950,%rcx
  8004206ba9:	00 00 00 
  8004206bac:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206bb3:	00 00 00 
  8004206bb6:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206bbb:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206bc2:	00 00 00 
  8004206bc5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206bca:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206bd1:	00 00 00 
  8004206bd4:	41 ff d0             	callq  *%r8
  8004206bd7:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206bde:	00 00 00 
  8004206be1:	48 8b 00             	mov    (%rax),%rax
  8004206be4:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206be9:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206bee:	48 89 c7             	mov    %rax,%rdi
  8004206bf1:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004206bf8:	00 00 00 
  8004206bfb:	ff d0                	callq  *%rax
  8004206bfd:	48 8b 00             	mov    (%rax),%rax
  8004206c00:	83 e0 04             	and    $0x4,%eax
  8004206c03:	48 85 c0             	test   %rax,%rax
  8004206c06:	74 35                	je     8004206c3d <page_check+0x1005>
  8004206c08:	48 b9 88 99 21 04 80 	movabs $0x8004219988,%rcx
  8004206c0f:	00 00 00 
  8004206c12:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206c19:	00 00 00 
  8004206c1c:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206c21:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206c28:	00 00 00 
  8004206c2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c30:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206c37:	00 00 00 
  8004206c3a:	41 ff d0             	callq  *%r8
  8004206c3d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206c44:	00 00 00 
  8004206c47:	48 8b 00             	mov    (%rax),%rax
  8004206c4a:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c4f:	48 89 c7             	mov    %rax,%rdi
  8004206c52:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206c59:	00 00 00 
  8004206c5c:	ff d0                	callq  *%rax
  8004206c5e:	48 89 c3             	mov    %rax,%rbx
  8004206c61:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206c65:	48 89 c7             	mov    %rax,%rdi
  8004206c68:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206c6f:	00 00 00 
  8004206c72:	ff d0                	callq  *%rax
  8004206c74:	48 39 c3             	cmp    %rax,%rbx
  8004206c77:	74 35                	je     8004206cae <page_check+0x1076>
  8004206c79:	48 b9 c0 99 21 04 80 	movabs $0x80042199c0,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 51 05 00 00       	mov    $0x551,%esi
  8004206c92:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x10e7>
  8004206cea:	48 b9 f0 99 21 04 80 	movabs $0x80042199f0,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 52 05 00 00       	mov    $0x552,%esi
  8004206d03:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 02          	cmp    $0x2,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x112a>
  8004206d2d:	48 b9 20 9a 21 04 80 	movabs $0x8004219a20,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 54 05 00 00       	mov    $0x554,%esi
  8004206d46:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x116d>
  8004206d70:	48 b9 31 9a 21 04 80 	movabs $0x8004219a31,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 55 05 00 00       	mov    $0x555,%esi
  8004206d89:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	be 00 00 00 00       	mov    $0x0,%esi
  8004206db7:	48 89 c7             	mov    %rax,%rdi
  8004206dba:	48 b8 75 3f 20 04 80 	movabs $0x8004203f75,%rax
  8004206dc1:	00 00 00 
  8004206dc4:	ff d0                	callq  *%rax
  8004206dc6:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206dcd:	00 00 00 
  8004206dd0:	48 8b 00             	mov    (%rax),%rax
  8004206dd3:	be 00 00 00 00       	mov    $0x0,%esi
  8004206dd8:	48 89 c7             	mov    %rax,%rdi
  8004206ddb:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206de2:	00 00 00 
  8004206de5:	ff d0                	callq  *%rax
  8004206de7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206deb:	74 35                	je     8004206e22 <page_check+0x11ea>
  8004206ded:	48 b9 48 9a 21 04 80 	movabs $0x8004219a48,%rcx
  8004206df4:	00 00 00 
  8004206df7:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206dfe:	00 00 00 
  8004206e01:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206e06:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206e0d:	00 00 00 
  8004206e10:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e15:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206e1c:	00 00 00 
  8004206e1f:	41 ff d0             	callq  *%r8
  8004206e22:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206e29:	00 00 00 
  8004206e2c:	48 8b 00             	mov    (%rax),%rax
  8004206e2f:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e34:	48 89 c7             	mov    %rax,%rdi
  8004206e37:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004206e3e:	00 00 00 
  8004206e41:	ff d0                	callq  *%rax
  8004206e43:	48 89 c3             	mov    %rax,%rbx
  8004206e46:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4a:	48 89 c7             	mov    %rax,%rdi
  8004206e4d:	48 b8 83 1c 20 04 80 	movabs $0x8004201c83,%rax
  8004206e54:	00 00 00 
  8004206e57:	ff d0                	callq  *%rax
  8004206e59:	48 39 c3             	cmp    %rax,%rbx
  8004206e5c:	74 35                	je     8004206e93 <page_check+0x125b>
  8004206e5e:	48 b9 f0 99 21 04 80 	movabs $0x80042199f0,%rcx
  8004206e65:	00 00 00 
  8004206e68:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206e6f:	00 00 00 
  8004206e72:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206e77:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206e7e:	00 00 00 
  8004206e81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e86:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206e8d:	00 00 00 
  8004206e90:	41 ff d0             	callq  *%r8
  8004206e93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e97:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e9b:	66 83 f8 01          	cmp    $0x1,%ax
  8004206e9f:	74 35                	je     8004206ed6 <page_check+0x129e>
  8004206ea1:	48 b9 95 97 21 04 80 	movabs $0x8004219795,%rcx
  8004206ea8:	00 00 00 
  8004206eab:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206eb2:	00 00 00 
  8004206eb5:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206eba:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206ec1:	00 00 00 
  8004206ec4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ec9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206ed0:	00 00 00 
  8004206ed3:	41 ff d0             	callq  *%r8
  8004206ed6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206eda:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206ede:	66 83 f8 01          	cmp    $0x1,%ax
  8004206ee2:	74 35                	je     8004206f19 <page_check+0x12e1>
  8004206ee4:	48 b9 31 9a 21 04 80 	movabs $0x8004219a31,%rcx
  8004206eeb:	00 00 00 
  8004206eee:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206ef5:	00 00 00 
  8004206ef8:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206efd:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206f04:	00 00 00 
  8004206f07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f0c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206f13:	00 00 00 
  8004206f16:	41 ff d0             	callq  *%r8
  8004206f19:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004206f20:	00 00 00 
  8004206f23:	48 8b 00             	mov    (%rax),%rax
  8004206f26:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206f2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206f2f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206f34:	48 89 c7             	mov    %rax,%rdi
  8004206f37:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  8004206f3e:	00 00 00 
  8004206f41:	ff d0                	callq  *%rax
  8004206f43:	85 c0                	test   %eax,%eax
  8004206f45:	74 35                	je     8004206f7c <page_check+0x1344>
  8004206f47:	48 b9 50 99 21 04 80 	movabs $0x8004219950,%rcx
  8004206f4e:	00 00 00 
  8004206f51:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206f58:	00 00 00 
  8004206f5b:	be 61 05 00 00       	mov    $0x561,%esi
  8004206f60:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206f67:	00 00 00 
  8004206f6a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f6f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206f76:	00 00 00 
  8004206f79:	41 ff d0             	callq  *%r8
  8004206f7c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f80:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f84:	66 85 c0             	test   %ax,%ax
  8004206f87:	75 35                	jne    8004206fbe <page_check+0x1386>
  8004206f89:	48 b9 6b 9a 21 04 80 	movabs $0x8004219a6b,%rcx
  8004206f90:	00 00 00 
  8004206f93:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206f9a:	00 00 00 
  8004206f9d:	be 62 05 00 00       	mov    $0x562,%esi
  8004206fa2:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206fa9:	00 00 00 
  8004206fac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fb1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206fb8:	00 00 00 
  8004206fbb:	41 ff d0             	callq  *%r8
  8004206fbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206fc2:	48 8b 00             	mov    (%rax),%rax
  8004206fc5:	48 85 c0             	test   %rax,%rax
  8004206fc8:	74 35                	je     8004206fff <page_check+0x13c7>
  8004206fca:	48 b9 77 9a 21 04 80 	movabs $0x8004219a77,%rcx
  8004206fd1:	00 00 00 
  8004206fd4:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004206fdb:	00 00 00 
  8004206fde:	be 63 05 00 00       	mov    $0x563,%esi
  8004206fe3:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004206fea:	00 00 00 
  8004206fed:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ff2:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004206ff9:	00 00 00 
  8004206ffc:	41 ff d0             	callq  *%r8
  8004206fff:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207006:	00 00 00 
  8004207009:	48 8b 00             	mov    (%rax),%rax
  800420700c:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207011:	48 89 c7             	mov    %rax,%rdi
  8004207014:	48 b8 75 3f 20 04 80 	movabs $0x8004203f75,%rax
  800420701b:	00 00 00 
  800420701e:	ff d0                	callq  *%rax
  8004207020:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207027:	00 00 00 
  800420702a:	48 8b 00             	mov    (%rax),%rax
  800420702d:	be 00 00 00 00       	mov    $0x0,%esi
  8004207032:	48 89 c7             	mov    %rax,%rdi
  8004207035:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  800420703c:	00 00 00 
  800420703f:	ff d0                	callq  *%rax
  8004207041:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207045:	74 35                	je     800420707c <page_check+0x1444>
  8004207047:	48 b9 48 9a 21 04 80 	movabs $0x8004219a48,%rcx
  800420704e:	00 00 00 
  8004207051:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207058:	00 00 00 
  800420705b:	be 67 05 00 00       	mov    $0x567,%esi
  8004207060:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207067:	00 00 00 
  800420706a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420706f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207076:	00 00 00 
  8004207079:	41 ff d0             	callq  *%r8
  800420707c:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207083:	00 00 00 
  8004207086:	48 8b 00             	mov    (%rax),%rax
  8004207089:	be 00 10 00 00       	mov    $0x1000,%esi
  800420708e:	48 89 c7             	mov    %rax,%rdi
  8004207091:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004207098:	00 00 00 
  800420709b:	ff d0                	callq  *%rax
  800420709d:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  80042070a1:	74 35                	je     80042070d8 <page_check+0x14a0>
  80042070a3:	48 b9 90 9a 21 04 80 	movabs $0x8004219a90,%rcx
  80042070aa:	00 00 00 
  80042070ad:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042070b4:	00 00 00 
  80042070b7:	be 68 05 00 00       	mov    $0x568,%esi
  80042070bc:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042070c3:	00 00 00 
  80042070c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042070cb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042070d2:	00 00 00 
  80042070d5:	41 ff d0             	callq  *%r8
  80042070d8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042070dc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042070e0:	66 85 c0             	test   %ax,%ax
  80042070e3:	74 35                	je     800420711a <page_check+0x14e2>
  80042070e5:	48 b9 b6 9a 21 04 80 	movabs $0x8004219ab6,%rcx
  80042070ec:	00 00 00 
  80042070ef:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042070f6:	00 00 00 
  80042070f9:	be 69 05 00 00       	mov    $0x569,%esi
  80042070fe:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207105:	00 00 00 
  8004207108:	b8 00 00 00 00       	mov    $0x0,%eax
  800420710d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207114:	00 00 00 
  8004207117:	41 ff d0             	callq  *%r8
  800420711a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420711e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207122:	66 83 f8 01          	cmp    $0x1,%ax
  8004207126:	74 35                	je     800420715d <page_check+0x1525>
  8004207128:	48 b9 31 9a 21 04 80 	movabs $0x8004219a31,%rcx
  800420712f:	00 00 00 
  8004207132:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207139:	00 00 00 
  800420713c:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004207141:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207148:	00 00 00 
  800420714b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207150:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207157:	00 00 00 
  800420715a:	41 ff d0             	callq  *%r8
  800420715d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207164:	00 00 00 
  8004207167:	48 8b 00             	mov    (%rax),%rax
  800420716a:	48 8b 00             	mov    (%rax),%rax
  800420716d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207173:	48 89 c7             	mov    %rax,%rdi
  8004207176:	48 b8 a8 1c 20 04 80 	movabs $0x8004201ca8,%rax
  800420717d:	00 00 00 
  8004207180:	ff d0                	callq  *%rax
  8004207182:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207189:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207190:	00 00 00 
  8004207193:	48 8b 00             	mov    (%rax),%rax
  8004207196:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420719d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042071a1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042071a5:	66 83 f8 01          	cmp    $0x1,%ax
  80042071a9:	74 35                	je     80042071e0 <page_check+0x15a8>
  80042071ab:	48 b9 31 9a 21 04 80 	movabs $0x8004219a31,%rcx
  80042071b2:	00 00 00 
  80042071b5:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042071bc:	00 00 00 
  80042071bf:	be 80 05 00 00       	mov    $0x580,%esi
  80042071c4:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042071cb:	00 00 00 
  80042071ce:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071d3:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042071da:	00 00 00 
  80042071dd:	41 ff d0             	callq  *%r8
  80042071e0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071e7:	48 89 c7             	mov    %rax,%rdi
  80042071ea:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  80042071f1:	00 00 00 
  80042071f4:	ff d0                	callq  *%rax
  80042071f6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042071fd:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004207201:	74 13                	je     8004207216 <page_check+0x15de>
  8004207203:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207207:	48 89 c7             	mov    %rax,%rdi
  800420720a:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004207211:	00 00 00 
  8004207214:	ff d0                	callq  *%rax
  8004207216:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420721d:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004207221:	74 13                	je     8004207236 <page_check+0x15fe>
  8004207223:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207227:	48 89 c7             	mov    %rax,%rdi
  800420722a:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004207231:	00 00 00 
  8004207234:	ff d0                	callq  *%rax
  8004207236:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420723d:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004207241:	74 13                	je     8004207256 <page_check+0x161e>
  8004207243:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207247:	48 89 c7             	mov    %rax,%rdi
  800420724a:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004207251:	00 00 00 
  8004207254:	ff d0                	callq  *%rax
  8004207256:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  800420725d:	00 40 06 00 
  8004207261:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207268:	00 00 00 
  800420726b:	48 8b 00             	mov    (%rax),%rax
  800420726e:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207275:	ba 01 00 00 00       	mov    $0x1,%edx
  800420727a:	48 89 ce             	mov    %rcx,%rsi
  800420727d:	48 89 c7             	mov    %rax,%rdi
  8004207280:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207287:	00 00 00 
  800420728a:	ff d0                	callq  *%rax
  800420728c:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207293:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420729a:	00 00 00 
  800420729d:	48 8b 00             	mov    (%rax),%rax
  80042072a0:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042072a7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042072ab:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042072b1:	48 c1 e2 03          	shl    $0x3,%rdx
  80042072b5:	48 01 d0             	add    %rdx,%rax
  80042072b8:	48 8b 00             	mov    (%rax),%rax
  80042072bb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042072c1:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  80042072c8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072cf:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072d3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  80042072d9:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  80042072df:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042072e6:	00 00 00 
  80042072e9:	48 8b 00             	mov    (%rax),%rax
  80042072ec:	48 39 c2             	cmp    %rax,%rdx
  80042072ef:	72 35                	jb     8004207326 <page_check+0x16ee>
  80042072f1:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042072f8:	48 89 c1             	mov    %rax,%rcx
  80042072fb:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004207302:	00 00 00 
  8004207305:	be 88 05 00 00       	mov    $0x588,%esi
  800420730a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207311:	00 00 00 
  8004207314:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207319:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207320:	00 00 00 
  8004207323:	41 ff d0             	callq  *%r8
  8004207326:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420732d:	00 00 00 
  8004207330:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207337:	48 01 d0             	add    %rdx,%rax
  800420733a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420733e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207345:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004207349:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420734e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207355:	00 
  8004207356:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420735a:	48 01 d0             	add    %rdx,%rax
  800420735d:	48 8b 00             	mov    (%rax),%rax
  8004207360:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207366:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420736d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207374:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207378:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420737e:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207384:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420738b:	00 00 00 
  800420738e:	48 8b 00             	mov    (%rax),%rax
  8004207391:	48 39 c2             	cmp    %rax,%rdx
  8004207394:	72 35                	jb     80042073cb <page_check+0x1793>
  8004207396:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420739d:	48 89 c1             	mov    %rax,%rcx
  80042073a0:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  80042073a7:	00 00 00 
  80042073aa:	be 89 05 00 00       	mov    $0x589,%esi
  80042073af:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042073b6:	00 00 00 
  80042073b9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042073be:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042073c5:	00 00 00 
  80042073c8:	41 ff d0             	callq  *%r8
  80042073cb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042073d2:	00 00 00 
  80042073d5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042073dc:	48 01 d0             	add    %rdx,%rax
  80042073df:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042073e3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042073ea:	48 c1 e8 15          	shr    $0x15,%rax
  80042073ee:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042073f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042073fa:	00 
  80042073fb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042073ff:	48 01 d0             	add    %rdx,%rax
  8004207402:	48 8b 00             	mov    (%rax),%rax
  8004207405:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420740b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004207412:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207419:	48 c1 e8 0c          	shr    $0xc,%rax
  800420741d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  8004207423:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  8004207429:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207430:	00 00 00 
  8004207433:	48 8b 00             	mov    (%rax),%rax
  8004207436:	48 39 c2             	cmp    %rax,%rdx
  8004207439:	72 35                	jb     8004207470 <page_check+0x1838>
  800420743b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207442:	48 89 c1             	mov    %rax,%rcx
  8004207445:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  800420744c:	00 00 00 
  800420744f:	be 8a 05 00 00       	mov    $0x58a,%esi
  8004207454:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  800420745b:	00 00 00 
  800420745e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207463:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420746a:	00 00 00 
  800420746d:	41 ff d0             	callq  *%r8
  8004207470:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207477:	00 00 00 
  800420747a:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207481:	48 01 d0             	add    %rdx,%rax
  8004207484:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800420748b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207492:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207496:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420749b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042074a2:	00 
  80042074a3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042074aa:	48 01 c2             	add    %rax,%rdx
  80042074ad:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042074b4:	48 39 c2             	cmp    %rax,%rdx
  80042074b7:	74 35                	je     80042074ee <page_check+0x18b6>
  80042074b9:	48 b9 c7 9a 21 04 80 	movabs $0x8004219ac7,%rcx
  80042074c0:	00 00 00 
  80042074c3:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042074ca:	00 00 00 
  80042074cd:	be 8b 05 00 00       	mov    $0x58b,%esi
  80042074d2:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042074d9:	00 00 00 
  80042074dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074e1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042074e8:	00 00 00 
  80042074eb:	41 ff d0             	callq  *%r8
  80042074ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042074f2:	48 89 c7             	mov    %rax,%rdi
  80042074f5:	48 b8 19 1d 20 04 80 	movabs $0x8004201d19,%rax
  80042074fc:	00 00 00 
  80042074ff:	ff d0                	callq  *%rax
  8004207501:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207506:	be ff 00 00 00       	mov    $0xff,%esi
  800420750b:	48 89 c7             	mov    %rax,%rdi
  800420750e:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004207515:	00 00 00 
  8004207518:	ff d0                	callq  *%rax
  800420751a:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207521:	00 00 00 
  8004207524:	48 8b 00             	mov    (%rax),%rax
  8004207527:	ba 01 00 00 00       	mov    $0x1,%edx
  800420752c:	be 00 00 00 00       	mov    $0x0,%esi
  8004207531:	48 89 c7             	mov    %rax,%rdi
  8004207534:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  800420753b:	00 00 00 
  800420753e:	ff d0                	callq  *%rax
  8004207540:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207547:	00 00 00 
  800420754a:	48 8b 00             	mov    (%rax),%rax
  800420754d:	48 8b 00             	mov    (%rax),%rax
  8004207550:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207556:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  800420755d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207564:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207568:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800420756e:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207574:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420757b:	00 00 00 
  800420757e:	48 8b 00             	mov    (%rax),%rax
  8004207581:	48 39 c2             	cmp    %rax,%rdx
  8004207584:	72 35                	jb     80042075bb <page_check+0x1983>
  8004207586:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420758d:	48 89 c1             	mov    %rax,%rcx
  8004207590:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004207597:	00 00 00 
  800420759a:	be 90 05 00 00       	mov    $0x590,%esi
  800420759f:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042075a6:	00 00 00 
  80042075a9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075ae:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042075b5:	00 00 00 
  80042075b8:	41 ff d0             	callq  *%r8
  80042075bb:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042075c2:	00 00 00 
  80042075c5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042075cc:	48 01 d0             	add    %rdx,%rax
  80042075cf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042075d3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042075d7:	48 8b 00             	mov    (%rax),%rax
  80042075da:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042075e0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  80042075e7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042075ee:	48 c1 e8 0c          	shr    $0xc,%rax
  80042075f2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042075f8:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  80042075fe:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207605:	00 00 00 
  8004207608:	48 8b 00             	mov    (%rax),%rax
  800420760b:	48 39 c2             	cmp    %rax,%rdx
  800420760e:	72 35                	jb     8004207645 <page_check+0x1a0d>
  8004207610:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207617:	48 89 c1             	mov    %rax,%rcx
  800420761a:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  8004207621:	00 00 00 
  8004207624:	be 91 05 00 00       	mov    $0x591,%esi
  8004207629:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207630:	00 00 00 
  8004207633:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207638:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420763f:	00 00 00 
  8004207642:	41 ff d0             	callq  *%r8
  8004207645:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420764c:	00 00 00 
  800420764f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207656:	48 01 d0             	add    %rdx,%rax
  8004207659:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420765d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207661:	48 8b 00             	mov    (%rax),%rax
  8004207664:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420766a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207671:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420767c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  8004207682:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207688:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  800420768f:	00 00 00 
  8004207692:	48 8b 00             	mov    (%rax),%rax
  8004207695:	48 39 c2             	cmp    %rax,%rdx
  8004207698:	72 35                	jb     80042076cf <page_check+0x1a97>
  800420769a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076a1:	48 89 c1             	mov    %rax,%rcx
  80042076a4:	48 ba 28 8e 21 04 80 	movabs $0x8004218e28,%rdx
  80042076ab:	00 00 00 
  80042076ae:	be 92 05 00 00       	mov    $0x592,%esi
  80042076b3:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042076ba:	00 00 00 
  80042076bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076c2:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042076c9:	00 00 00 
  80042076cc:	41 ff d0             	callq  *%r8
  80042076cf:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042076d6:	00 00 00 
  80042076d9:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  80042076e0:	48 01 d0             	add    %rdx,%rax
  80042076e3:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  80042076ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042076f1:	eb 58                	jmp    800420774b <page_check+0x1b13>
  80042076f3:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  80042076fa:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042076fd:	48 63 d2             	movslq %edx,%rdx
  8004207700:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207704:	48 01 d0             	add    %rdx,%rax
  8004207707:	48 8b 00             	mov    (%rax),%rax
  800420770a:	83 e0 01             	and    $0x1,%eax
  800420770d:	48 85 c0             	test   %rax,%rax
  8004207710:	74 35                	je     8004207747 <page_check+0x1b0f>
  8004207712:	48 b9 df 9a 21 04 80 	movabs $0x8004219adf,%rcx
  8004207719:	00 00 00 
  800420771c:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207723:	00 00 00 
  8004207726:	be 94 05 00 00       	mov    $0x594,%esi
  800420772b:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207732:	00 00 00 
  8004207735:	b8 00 00 00 00       	mov    $0x0,%eax
  800420773a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207741:	00 00 00 
  8004207744:	41 ff d0             	callq  *%r8
  8004207747:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800420774b:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  8004207752:	7e 9f                	jle    80042076f3 <page_check+0x1abb>
  8004207754:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420775b:	00 00 00 
  800420775e:	48 8b 00             	mov    (%rax),%rax
  8004207761:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207768:	48 b8 38 e2 49 04 80 	movabs $0x800449e238,%rax
  800420776f:	00 00 00 
  8004207772:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207776:	48 89 10             	mov    %rdx,(%rax)
  8004207779:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420777d:	48 89 c7             	mov    %rax,%rdi
  8004207780:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004207787:	00 00 00 
  800420778a:	ff d0                	callq  *%rax
  800420778c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207790:	48 89 c7             	mov    %rax,%rdi
  8004207793:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  800420779a:	00 00 00 
  800420779d:	ff d0                	callq  *%rax
  800420779f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042077a3:	48 89 c7             	mov    %rax,%rdi
  80042077a6:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  80042077ad:	00 00 00 
  80042077b0:	ff d0                	callq  *%rax
  80042077b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042077b6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077ba:	66 85 c0             	test   %ax,%ax
  80042077bd:	74 35                	je     80042077f4 <page_check+0x1bbc>
  80042077bf:	48 b9 f6 9a 21 04 80 	movabs $0x8004219af6,%rcx
  80042077c6:	00 00 00 
  80042077c9:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042077d0:	00 00 00 
  80042077d3:	be a0 05 00 00       	mov    $0x5a0,%esi
  80042077d8:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042077df:	00 00 00 
  80042077e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077e7:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042077ee:	00 00 00 
  80042077f1:	41 ff d0             	callq  *%r8
  80042077f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042077f8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042077fc:	66 85 c0             	test   %ax,%ax
  80042077ff:	74 35                	je     8004207836 <page_check+0x1bfe>
  8004207801:	48 b9 b6 9a 21 04 80 	movabs $0x8004219ab6,%rcx
  8004207808:	00 00 00 
  800420780b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207812:	00 00 00 
  8004207815:	be a1 05 00 00       	mov    $0x5a1,%esi
  800420781a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207821:	00 00 00 
  8004207824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207829:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207830:	00 00 00 
  8004207833:	41 ff d0             	callq  *%r8
  8004207836:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420783a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420783e:	66 85 c0             	test   %ax,%ax
  8004207841:	74 35                	je     8004207878 <page_check+0x1c40>
  8004207843:	48 b9 07 9b 21 04 80 	movabs $0x8004219b07,%rcx
  800420784a:	00 00 00 
  800420784d:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207854:	00 00 00 
  8004207857:	be a2 05 00 00       	mov    $0x5a2,%esi
  800420785c:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207863:	00 00 00 
  8004207866:	b8 00 00 00 00       	mov    $0x0,%eax
  800420786b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207872:	00 00 00 
  8004207875:	41 ff d0             	callq  *%r8
  8004207878:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420787c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207880:	66 85 c0             	test   %ax,%ax
  8004207883:	74 35                	je     80042078ba <page_check+0x1c82>
  8004207885:	48 b9 18 9b 21 04 80 	movabs $0x8004219b18,%rcx
  800420788c:	00 00 00 
  800420788f:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207896:	00 00 00 
  8004207899:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420789e:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042078a5:	00 00 00 
  80042078a8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078ad:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042078b4:	00 00 00 
  80042078b7:	41 ff d0             	callq  *%r8
  80042078ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042078be:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042078c2:	66 85 c0             	test   %ax,%ax
  80042078c5:	74 35                	je     80042078fc <page_check+0x1cc4>
  80042078c7:	48 b9 29 9b 21 04 80 	movabs $0x8004219b29,%rcx
  80042078ce:	00 00 00 
  80042078d1:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042078d8:	00 00 00 
  80042078db:	be a4 05 00 00       	mov    $0x5a4,%esi
  80042078e0:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042078e7:	00 00 00 
  80042078ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078ef:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042078f6:	00 00 00 
  80042078f9:	41 ff d0             	callq  *%r8
  80042078fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004207900:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207904:	66 85 c0             	test   %ax,%ax
  8004207907:	74 35                	je     800420793e <page_check+0x1d06>
  8004207909:	48 b9 3a 9b 21 04 80 	movabs $0x8004219b3a,%rcx
  8004207910:	00 00 00 
  8004207913:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  800420791a:	00 00 00 
  800420791d:	be a5 05 00 00       	mov    $0x5a5,%esi
  8004207922:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207929:	00 00 00 
  800420792c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207931:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207938:	00 00 00 
  800420793b:	41 ff d0             	callq  *%r8
  800420793e:	be 01 10 00 00       	mov    $0x1001,%esi
  8004207943:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207948:	48 b8 b9 40 20 04 80 	movabs $0x80042040b9,%rax
  800420794f:	00 00 00 
  8004207952:	ff d0                	callq  *%rax
  8004207954:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  800420795b:	be 00 10 00 00       	mov    $0x1000,%esi
  8004207960:	bf 00 00 00 00       	mov    $0x0,%edi
  8004207965:	48 b8 b9 40 20 04 80 	movabs $0x80042040b9,%rax
  800420796c:	00 00 00 
  800420796f:	ff d0                	callq  *%rax
  8004207971:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207978:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420797f:	00 00 00 
  8004207982:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207989:	76 1d                	jbe    80042079a8 <page_check+0x1d70>
  800420798b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207992:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207999:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  80042079a0:	00 00 00 
  80042079a3:	48 39 c2             	cmp    %rax,%rdx
  80042079a6:	76 35                	jbe    80042079dd <page_check+0x1da5>
  80042079a8:	48 b9 50 9b 21 04 80 	movabs $0x8004219b50,%rcx
  80042079af:	00 00 00 
  80042079b2:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  80042079b9:	00 00 00 
  80042079bc:	be ac 05 00 00       	mov    $0x5ac,%esi
  80042079c1:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  80042079c8:	00 00 00 
  80042079cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079d0:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042079d7:	00 00 00 
  80042079da:	41 ff d0             	callq  *%r8
  80042079dd:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  80042079e4:	00 00 00 
  80042079e7:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  80042079ee:	76 1d                	jbe    8004207a0d <page_check+0x1dd5>
  80042079f0:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042079f7:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  80042079fe:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207a05:	00 00 00 
  8004207a08:	48 39 c2             	cmp    %rax,%rdx
  8004207a0b:	76 35                	jbe    8004207a42 <page_check+0x1e0a>
  8004207a0d:	48 b9 78 9b 21 04 80 	movabs $0x8004219b78,%rcx
  8004207a14:	00 00 00 
  8004207a17:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207a1e:	00 00 00 
  8004207a21:	be ad 05 00 00       	mov    $0x5ad,%esi
  8004207a26:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207a2d:	00 00 00 
  8004207a30:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a35:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207a3c:	00 00 00 
  8004207a3f:	41 ff d0             	callq  *%r8
  8004207a42:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207a49:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a4e:	48 85 c0             	test   %rax,%rax
  8004207a51:	75 11                	jne    8004207a64 <page_check+0x1e2c>
  8004207a53:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207a5a:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004207a5f:	48 85 c0             	test   %rax,%rax
  8004207a62:	74 35                	je     8004207a99 <page_check+0x1e61>
  8004207a64:	48 b9 a0 9b 21 04 80 	movabs $0x8004219ba0,%rcx
  8004207a6b:	00 00 00 
  8004207a6e:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207a75:	00 00 00 
  8004207a78:	be af 05 00 00       	mov    $0x5af,%esi
  8004207a7d:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207a84:	00 00 00 
  8004207a87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207a93:	00 00 00 
  8004207a96:	41 ff d0             	callq  *%r8
  8004207a99:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207aa0:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207aa6:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207aad:	76 35                	jbe    8004207ae4 <page_check+0x1eac>
  8004207aaf:	48 b9 c7 9b 21 04 80 	movabs $0x8004219bc7,%rcx
  8004207ab6:	00 00 00 
  8004207ab9:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207ac0:	00 00 00 
  8004207ac3:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207ac8:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207acf:	00 00 00 
  8004207ad2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ad7:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207ade:	00 00 00 
  8004207ae1:	41 ff d0             	callq  *%r8
  8004207ae4:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207aeb:	00 00 00 
  8004207aee:	48 8b 00             	mov    (%rax),%rax
  8004207af1:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207af8:	48 89 d6             	mov    %rdx,%rsi
  8004207afb:	48 89 c7             	mov    %rax,%rdi
  8004207afe:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004207b05:	00 00 00 
  8004207b08:	ff d0                	callq  *%rax
  8004207b0a:	48 85 c0             	test   %rax,%rax
  8004207b0d:	74 35                	je     8004207b44 <page_check+0x1f0c>
  8004207b0f:	48 b9 e0 9b 21 04 80 	movabs $0x8004219be0,%rcx
  8004207b16:	00 00 00 
  8004207b19:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207b20:	00 00 00 
  8004207b23:	be b4 05 00 00       	mov    $0x5b4,%esi
  8004207b28:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207b2f:	00 00 00 
  8004207b32:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b37:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207b3e:	00 00 00 
  8004207b41:	41 ff d0             	callq  *%r8
  8004207b44:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207b4b:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207b52:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207b59:	00 00 00 
  8004207b5c:	48 8b 00             	mov    (%rax),%rax
  8004207b5f:	48 89 d6             	mov    %rdx,%rsi
  8004207b62:	48 89 c7             	mov    %rax,%rdi
  8004207b65:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004207b6c:	00 00 00 
  8004207b6f:	ff d0                	callq  *%rax
  8004207b71:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207b77:	74 35                	je     8004207bae <page_check+0x1f76>
  8004207b79:	48 b9 08 9c 21 04 80 	movabs $0x8004219c08,%rcx
  8004207b80:	00 00 00 
  8004207b83:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207b8a:	00 00 00 
  8004207b8d:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207b92:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207b99:	00 00 00 
  8004207b9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ba1:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207ba8:	00 00 00 
  8004207bab:	41 ff d0             	callq  *%r8
  8004207bae:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207bb5:	00 00 00 
  8004207bb8:	48 8b 00             	mov    (%rax),%rax
  8004207bbb:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207bc2:	48 89 d6             	mov    %rdx,%rsi
  8004207bc5:	48 89 c7             	mov    %rax,%rdi
  8004207bc8:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004207bcf:	00 00 00 
  8004207bd2:	ff d0                	callq  *%rax
  8004207bd4:	48 85 c0             	test   %rax,%rax
  8004207bd7:	74 35                	je     8004207c0e <page_check+0x1fd6>
  8004207bd9:	48 b9 38 9c 21 04 80 	movabs $0x8004219c38,%rcx
  8004207be0:	00 00 00 
  8004207be3:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207bea:	00 00 00 
  8004207bed:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207bf2:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207bf9:	00 00 00 
  8004207bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c01:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207c08:	00 00 00 
  8004207c0b:	41 ff d0             	callq  *%r8
  8004207c0e:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207c15:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207c1c:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207c23:	00 00 00 
  8004207c26:	48 8b 00             	mov    (%rax),%rax
  8004207c29:	48 89 d6             	mov    %rdx,%rsi
  8004207c2c:	48 89 c7             	mov    %rax,%rdi
  8004207c2f:	48 b8 be 59 20 04 80 	movabs $0x80042059be,%rax
  8004207c36:	00 00 00 
  8004207c39:	ff d0                	callq  *%rax
  8004207c3b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207c3f:	74 35                	je     8004207c76 <page_check+0x203e>
  8004207c41:	48 b9 60 9c 21 04 80 	movabs $0x8004219c60,%rcx
  8004207c48:	00 00 00 
  8004207c4b:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207c52:	00 00 00 
  8004207c55:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207c5a:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207c61:	00 00 00 
  8004207c64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c69:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207c70:	00 00 00 
  8004207c73:	41 ff d0             	callq  *%r8
  8004207c76:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207c7d:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207c84:	00 00 00 
  8004207c87:	48 8b 00             	mov    (%rax),%rax
  8004207c8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c8f:	48 89 ce             	mov    %rcx,%rsi
  8004207c92:	48 89 c7             	mov    %rax,%rdi
  8004207c95:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207c9c:	00 00 00 
  8004207c9f:	ff d0                	callq  *%rax
  8004207ca1:	48 8b 00             	mov    (%rax),%rax
  8004207ca4:	83 e0 1a             	and    $0x1a,%eax
  8004207ca7:	48 85 c0             	test   %rax,%rax
  8004207caa:	75 35                	jne    8004207ce1 <page_check+0x20a9>
  8004207cac:	48 b9 90 9c 21 04 80 	movabs $0x8004219c90,%rcx
  8004207cb3:	00 00 00 
  8004207cb6:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207cbd:	00 00 00 
  8004207cc0:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207cc5:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207ccc:	00 00 00 
  8004207ccf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207cd4:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207cdb:	00 00 00 
  8004207cde:	41 ff d0             	callq  *%r8
  8004207ce1:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207ce8:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207cef:	00 00 00 
  8004207cf2:	48 8b 00             	mov    (%rax),%rax
  8004207cf5:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207cfa:	48 89 ce             	mov    %rcx,%rsi
  8004207cfd:	48 89 c7             	mov    %rax,%rdi
  8004207d00:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207d07:	00 00 00 
  8004207d0a:	ff d0                	callq  *%rax
  8004207d0c:	48 8b 00             	mov    (%rax),%rax
  8004207d0f:	83 e0 04             	and    $0x4,%eax
  8004207d12:	48 85 c0             	test   %rax,%rax
  8004207d15:	74 35                	je     8004207d4c <page_check+0x2114>
  8004207d17:	48 b9 d8 9c 21 04 80 	movabs $0x8004219cd8,%rcx
  8004207d1e:	00 00 00 
  8004207d21:	48 ba a1 8e 21 04 80 	movabs $0x8004218ea1,%rdx
  8004207d28:	00 00 00 
  8004207d2b:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207d30:	48 bf b6 8e 21 04 80 	movabs $0x8004218eb6,%rdi
  8004207d37:	00 00 00 
  8004207d3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d3f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207d46:	00 00 00 
  8004207d49:	41 ff d0             	callq  *%r8
  8004207d4c:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207d53:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207d5a:	00 00 00 
  8004207d5d:	48 8b 00             	mov    (%rax),%rax
  8004207d60:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207d65:	48 89 ce             	mov    %rcx,%rsi
  8004207d68:	48 89 c7             	mov    %rax,%rdi
  8004207d6b:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207d72:	00 00 00 
  8004207d75:	ff d0                	callq  *%rax
  8004207d77:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207d7e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207d85:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207d8b:	48 89 c1             	mov    %rax,%rcx
  8004207d8e:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207d95:	00 00 00 
  8004207d98:	48 8b 00             	mov    (%rax),%rax
  8004207d9b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207da0:	48 89 ce             	mov    %rcx,%rsi
  8004207da3:	48 89 c7             	mov    %rax,%rdi
  8004207da6:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207dad:	00 00 00 
  8004207db0:	ff d0                	callq  *%rax
  8004207db2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207db9:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207dc0:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  8004207dc7:	00 00 00 
  8004207dca:	48 8b 00             	mov    (%rax),%rax
  8004207dcd:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207dd2:	48 89 ce             	mov    %rcx,%rsi
  8004207dd5:	48 89 c7             	mov    %rax,%rdi
  8004207dd8:	48 b8 6c 31 20 04 80 	movabs $0x800420316c,%rax
  8004207ddf:	00 00 00 
  8004207de2:	ff d0                	callq  *%rax
  8004207de4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207deb:	48 bf 0b 9d 21 04 80 	movabs $0x8004219d0b,%rdi
  8004207df2:	00 00 00 
  8004207df5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dfa:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004207e01:	00 00 00 
  8004207e04:	ff d2                	callq  *%rdx
  8004207e06:	90                   	nop
  8004207e07:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207e0e:	5b                   	pop    %rbx
  8004207e0f:	5d                   	pop    %rbp
  8004207e10:	c3                   	retq   

0000008004207e11 <page2ppn>:
  8004207e11:	55                   	push   %rbp
  8004207e12:	48 89 e5             	mov    %rsp,%rbp
  8004207e15:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e1d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207e21:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004207e28:	00 00 00 
  8004207e2b:	48 8b 00             	mov    (%rax),%rax
  8004207e2e:	48 29 c2             	sub    %rax,%rdx
  8004207e31:	48 89 d0             	mov    %rdx,%rax
  8004207e34:	48 c1 f8 04          	sar    $0x4,%rax
  8004207e38:	c9                   	leaveq 
  8004207e39:	c3                   	retq   

0000008004207e3a <page2pa>:
  8004207e3a:	55                   	push   %rbp
  8004207e3b:	48 89 e5             	mov    %rsp,%rbp
  8004207e3e:	48 83 ec 08          	sub    $0x8,%rsp
  8004207e42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e4a:	48 89 c7             	mov    %rax,%rdi
  8004207e4d:	48 b8 11 7e 20 04 80 	movabs $0x8004207e11,%rax
  8004207e54:	00 00 00 
  8004207e57:	ff d0                	callq  *%rax
  8004207e59:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207e5d:	c9                   	leaveq 
  8004207e5e:	c3                   	retq   

0000008004207e5f <pa2page>:
  8004207e5f:	55                   	push   %rbp
  8004207e60:	48 89 e5             	mov    %rsp,%rbp
  8004207e63:	48 83 ec 10          	sub    $0x10,%rsp
  8004207e67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207e6f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207e73:	48 89 c2             	mov    %rax,%rdx
  8004207e76:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207e7d:	00 00 00 
  8004207e80:	48 8b 00             	mov    (%rax),%rax
  8004207e83:	48 39 c2             	cmp    %rax,%rdx
  8004207e86:	72 2a                	jb     8004207eb2 <pa2page+0x53>
  8004207e88:	48 ba 28 9d 21 04 80 	movabs $0x8004219d28,%rdx
  8004207e8f:	00 00 00 
  8004207e92:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207e97:	48 bf 47 9d 21 04 80 	movabs $0x8004219d47,%rdi
  8004207e9e:	00 00 00 
  8004207ea1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207ea6:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  8004207ead:	00 00 00 
  8004207eb0:	ff d1                	callq  *%rcx
  8004207eb2:	48 b8 f8 d5 69 04 80 	movabs $0x800469d5f8,%rax
  8004207eb9:	00 00 00 
  8004207ebc:	48 8b 00             	mov    (%rax),%rax
  8004207ebf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207ec3:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207ec7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207ecb:	48 01 d0             	add    %rdx,%rax
  8004207ece:	c9                   	leaveq 
  8004207ecf:	c3                   	retq   

0000008004207ed0 <page2kva>:
  8004207ed0:	55                   	push   %rbp
  8004207ed1:	48 89 e5             	mov    %rsp,%rbp
  8004207ed4:	48 83 ec 20          	sub    $0x20,%rsp
  8004207ed8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ee0:	48 89 c7             	mov    %rax,%rdi
  8004207ee3:	48 b8 3a 7e 20 04 80 	movabs $0x8004207e3a,%rax
  8004207eea:	00 00 00 
  8004207eed:	ff d0                	callq  *%rax
  8004207eef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ef7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207efb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207efe:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207f01:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004207f08:	00 00 00 
  8004207f0b:	48 8b 00             	mov    (%rax),%rax
  8004207f0e:	48 39 c2             	cmp    %rax,%rdx
  8004207f11:	72 32                	jb     8004207f45 <page2kva+0x75>
  8004207f13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f17:	48 89 c1             	mov    %rax,%rcx
  8004207f1a:	48 ba 58 9d 21 04 80 	movabs $0x8004219d58,%rdx
  8004207f21:	00 00 00 
  8004207f24:	be 62 00 00 00       	mov    $0x62,%esi
  8004207f29:	48 bf 47 9d 21 04 80 	movabs $0x8004219d47,%rdi
  8004207f30:	00 00 00 
  8004207f33:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207f38:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004207f3f:	00 00 00 
  8004207f42:	41 ff d0             	callq  *%r8
  8004207f45:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207f4c:	00 00 00 
  8004207f4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207f53:	48 01 d0             	add    %rdx,%rax
  8004207f56:	c9                   	leaveq 
  8004207f57:	c3                   	retq   

0000008004207f58 <unlock_kernel>:
  8004207f58:	55                   	push   %rbp
  8004207f59:	48 89 e5             	mov    %rsp,%rbp
  8004207f5c:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  8004207f63:	00 00 00 
  8004207f66:	48 b8 04 75 21 04 80 	movabs $0x8004217504,%rax
  8004207f6d:	00 00 00 
  8004207f70:	ff d0                	callq  *%rax
  8004207f72:	f3 90                	pause  
  8004207f74:	90                   	nop
  8004207f75:	5d                   	pop    %rbp
  8004207f76:	c3                   	retq   

0000008004207f77 <envid2env>:
//   On success, sets *env_store to the environment.
//   On error, sets *env_store to NULL.
//
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207f77:	55                   	push   %rbp
  8004207f78:	48 89 e5             	mov    %rsp,%rbp
  8004207f7b:	53                   	push   %rbx
  8004207f7c:	48 83 ec 28          	sub    $0x28,%rsp
  8004207f80:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207f83:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207f87:	89 d0                	mov    %edx,%eax
  8004207f89:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
  8004207f8c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207f90:	75 41                	jne    8004207fd3 <envid2env+0x5c>
		*env_store = curenv;
  8004207f92:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004207f99:	00 00 00 
  8004207f9c:	ff d0                	callq  *%rax
  8004207f9e:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004207fa5:	00 00 00 
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 c1 e0 03          	shl    $0x3,%rax
  8004207fae:	48 89 c1             	mov    %rax,%rcx
  8004207fb1:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207fb5:	48 01 c8             	add    %rcx,%rax
  8004207fb8:	48 01 d0             	add    %rdx,%rax
  8004207fbb:	48 83 c0 08          	add    $0x8,%rax
  8004207fbf:	48 8b 10             	mov    (%rax),%rdx
  8004207fc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207fc6:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207fc9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207fce:	e9 fd 00 00 00       	jmpq   80042080d0 <envid2env+0x159>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
  8004207fd3:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004207fda:	00 00 00 
  8004207fdd:	48 8b 10             	mov    (%rax),%rdx
  8004207fe0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207fe3:	48 98                	cltq   
  8004207fe5:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207fea:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207ff1:	48 01 d0             	add    %rdx,%rax
  8004207ff4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207ff8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ffc:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208002:	85 c0                	test   %eax,%eax
  8004208004:	74 0f                	je     8004208015 <envid2env+0x9e>
  8004208006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420800a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208010:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004208013:	74 15                	je     800420802a <envid2env+0xb3>
		*env_store = 0;
  8004208015:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208019:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004208020:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004208025:	e9 a6 00 00 00       	jmpq   80042080d0 <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  800420802a:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  800420802e:	0f 84 8c 00 00 00    	je     80042080c0 <envid2env+0x149>
  8004208034:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420803b:	00 00 00 
  800420803e:	ff d0                	callq  *%rax
  8004208040:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208047:	00 00 00 
  800420804a:	48 98                	cltq   
  800420804c:	48 c1 e0 03          	shl    $0x3,%rax
  8004208050:	48 89 c1             	mov    %rax,%rcx
  8004208053:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208057:	48 01 c8             	add    %rcx,%rax
  800420805a:	48 01 d0             	add    %rdx,%rax
  800420805d:	48 83 c0 08          	add    $0x8,%rax
  8004208061:	48 8b 00             	mov    (%rax),%rax
  8004208064:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004208068:	74 56                	je     80042080c0 <envid2env+0x149>
  800420806a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420806e:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004208074:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420807b:	00 00 00 
  800420807e:	ff d0                	callq  *%rax
  8004208080:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208087:	00 00 00 
  800420808a:	48 98                	cltq   
  800420808c:	48 c1 e0 03          	shl    $0x3,%rax
  8004208090:	48 89 c1             	mov    %rax,%rcx
  8004208093:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208097:	48 01 c8             	add    %rcx,%rax
  800420809a:	48 01 d0             	add    %rdx,%rax
  800420809d:	48 83 c0 08          	add    $0x8,%rax
  80042080a1:	48 8b 00             	mov    (%rax),%rax
  80042080a4:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042080aa:	39 c3                	cmp    %eax,%ebx
  80042080ac:	74 12                	je     80042080c0 <envid2env+0x149>
		*env_store = 0;
  80042080ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042080b2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  80042080b9:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  80042080be:	eb 10                	jmp    80042080d0 <envid2env+0x159>
	}

	*env_store = e;
  80042080c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042080c4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080c8:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  80042080cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042080d0:	48 83 c4 28          	add    $0x28,%rsp
  80042080d4:	5b                   	pop    %rbx
  80042080d5:	5d                   	pop    %rbp
  80042080d6:	c3                   	retq   

00000080042080d7 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  80042080d7:	55                   	push   %rbp
  80042080d8:	48 89 e5             	mov    %rsp,%rbp
  80042080db:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  80042080df:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042080e6:	eb 6d                	jmp    8004208155 <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  80042080e8:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  80042080ef:	00 00 00 
  80042080f2:	48 8b 10             	mov    (%rax),%rdx
  80042080f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042080f8:	48 98                	cltq   
  80042080fa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208101:	48 01 d0             	add    %rdx,%rax
  8004208104:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  800420810b:	00 00 00 
		envs[i].env_link = &envs[i+1];
  800420810e:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208115:	00 00 00 
  8004208118:	48 8b 10             	mov    (%rax),%rdx
  800420811b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420811e:	48 98                	cltq   
  8004208120:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208127:	48 01 c2             	add    %rax,%rdx
  800420812a:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208131:	00 00 00 
  8004208134:	48 8b 08             	mov    (%rax),%rcx
  8004208137:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420813a:	48 98                	cltq   
  800420813c:	48 83 c0 01          	add    $0x1,%rax
  8004208140:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004208147:	48 01 c8             	add    %rcx,%rax
  800420814a:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004208151:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004208155:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420815c:	7e 8a                	jle    80042080e8 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  800420815e:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208165:	00 00 00 
  8004208168:	48 8b 00             	mov    (%rax),%rax
  800420816b:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208171:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208178:	00 00 00 00 
	env_free_list = &envs[0];
  800420817c:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208183:	00 00 00 
  8004208186:	48 8b 10             	mov    (%rax),%rdx
  8004208189:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208190:	00 00 00 
  8004208193:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208196:	48 b8 a5 81 20 04 80 	movabs $0x80042081a5,%rax
  800420819d:	00 00 00 
  80042081a0:	ff d0                	callq  *%rax
}
  80042081a2:	90                   	nop
  80042081a3:	c9                   	leaveq 
  80042081a4:	c3                   	retq   

00000080042081a5 <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  80042081a5:	55                   	push   %rbp
  80042081a6:	48 89 e5             	mov    %rsp,%rbp
  80042081a9:	53                   	push   %rbx
  80042081aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042081ae:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  80042081b5:	00 00 00 
  80042081b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  80042081bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c0:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  80042081c3:	b8 23 00 00 00       	mov    $0x23,%eax
  80042081c8:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  80042081ca:	b8 23 00 00 00       	mov    $0x23,%eax
  80042081cf:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  80042081d1:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081d6:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  80042081d8:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081dd:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  80042081df:	b8 10 00 00 00       	mov    $0x10,%eax
  80042081e4:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  80042081e6:	b8 08 00 00 00       	mov    $0x8,%eax
  80042081eb:	89 c3                	mov    %eax,%ebx
  80042081ed:	53                   	push   %rbx
  80042081ee:	48 b8 fb 81 20 04 80 	movabs $0x80042081fb,%rax
  80042081f5:	00 00 00 
  80042081f8:	50                   	push   %rax
  80042081f9:	48 cb                	lretq  
  80042081fb:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004208201:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  8004208205:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208208:	90                   	nop
  8004208209:	48 83 c4 10          	add    $0x10,%rsp
  800420820d:	5b                   	pop    %rbx
  800420820e:	5d                   	pop    %rbp
  800420820f:	c3                   	retq   

0000008004208210 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208210:	55                   	push   %rbp
  8004208211:	48 89 e5             	mov    %rsp,%rbp
  8004208214:	48 83 ec 20          	sub    $0x20,%rsp
  8004208218:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  800420821c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208223:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  8004208224:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208229:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  8004208230:	00 00 00 
  8004208233:	ff d0                	callq  *%rax
  8004208235:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208239:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420823e:	75 0a                	jne    800420824a <env_setup_vm+0x3a>
		return -E_NO_MEM;
  8004208240:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208245:	e9 c2 00 00 00       	jmpq   800420830c <env_setup_vm+0xfc>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  800420824a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420824e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208252:	8d 50 01             	lea    0x1(%rax),%edx
  8004208255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208259:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  800420825d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208261:	48 89 c7             	mov    %rax,%rdi
  8004208264:	48 b8 d0 7e 20 04 80 	movabs $0x8004207ed0,%rax
  800420826b:	00 00 00 
  800420826e:	ff d0                	callq  *%rax
  8004208270:	48 89 c2             	mov    %rax,%rdx
  8004208273:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208277:	48 89 90 e0 00 00 00 	mov    %rdx,0xe0(%rax)
	e->env_cr3      = page2pa(p);
  800420827e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208282:	48 89 c7             	mov    %rax,%rdi
  8004208285:	48 b8 3a 7e 20 04 80 	movabs $0x8004207e3a,%rax
  800420828c:	00 00 00 
  800420828f:	ff d0                	callq  *%rax
  8004208291:	48 89 c2             	mov    %rax,%rdx
  8004208294:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208298:	48 89 90 e8 00 00 00 	mov    %rdx,0xe8(%rax)

	memset(e->env_pml4e, 0, PGSIZE);
  800420829f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082a3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082aa:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042082af:	be 00 00 00 00       	mov    $0x0,%esi
  80042082b4:	48 89 c7             	mov    %rax,%rdi
  80042082b7:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042082be:	00 00 00 
  80042082c1:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  80042082c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082c7:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082ce:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042082d2:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  80042082d9:	00 00 00 
  80042082dc:	48 8b 00             	mov    (%rax),%rax
  80042082df:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042082e3:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  80042082e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082ea:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042082f1:	48 8d 50 10          	lea    0x10(%rax),%rdx
  80042082f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082f9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208300:	48 83 c8 05          	or     $0x5,%rax
  8004208304:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208307:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420830c:	c9                   	leaveq 
  800420830d:	c3                   	retq   

000000800420830e <env_alloc>:
//	-E_NO_FREE_ENV if all NENVS environments are allocated
//	-E_NO_MEM on memory exhaustion
//
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  800420830e:	55                   	push   %rbp
  800420830f:	48 89 e5             	mov    %rsp,%rbp
  8004208312:	48 83 ec 30          	sub    $0x30,%rsp
  8004208316:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420831a:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  800420831d:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208324:	00 00 00 
  8004208327:	48 8b 00             	mov    (%rax),%rax
  800420832a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420832e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208333:	75 0a                	jne    800420833f <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208335:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420833a:	e9 69 01 00 00       	jmpq   80042084a8 <env_alloc+0x19a>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  800420833f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208343:	48 89 c7             	mov    %rax,%rdi
  8004208346:	48 b8 10 82 20 04 80 	movabs $0x8004208210,%rax
  800420834d:	00 00 00 
  8004208350:	ff d0                	callq  *%rax
  8004208352:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208355:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208359:	79 08                	jns    8004208363 <env_alloc+0x55>
		return r;
  800420835b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420835e:	e9 45 01 00 00       	jmpq   80042084a8 <env_alloc+0x19a>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  8004208363:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208367:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420836d:	05 00 10 00 00       	add    $0x1000,%eax
  8004208372:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  8004208377:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  800420837a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420837e:	7f 07                	jg     8004208387 <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  8004208380:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  8004208387:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420838b:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  8004208392:	00 00 00 
  8004208395:	48 8b 00             	mov    (%rax),%rax
  8004208398:	48 29 c2             	sub    %rax,%rdx
  800420839b:	48 89 d0             	mov    %rdx,%rax
  800420839e:	48 c1 f8 03          	sar    $0x3,%rax
  80042083a2:	48 89 c2             	mov    %rax,%rdx
  80042083a5:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042083ac:	fa a4 4f 
  80042083af:	48 0f af c2          	imul   %rdx,%rax
  80042083b3:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042083b6:	89 c2                	mov    %eax,%edx
  80042083b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083bc:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  80042083c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083c6:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042083c9:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  80042083cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083d3:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  80042083da:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  80042083dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083e1:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042083e8:	00 00 00 
	e->env_runs = 0;
  80042083eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083ef:	c7 80 d8 00 00 00 00 	movl   $0x0,0xd8(%rax)
  80042083f6:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042083f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042083fd:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208402:	be 00 00 00 00       	mov    $0x0,%esi
  8004208407:	48 89 c7             	mov    %rax,%rdi
  800420840a:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004208411:	00 00 00 
  8004208414:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420841a:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208421:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208423:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208427:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  800420842d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208431:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208438:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  800420843a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420843e:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208443:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  800420844a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420844e:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208455:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420845b:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208462:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208466:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420846a:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208471:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208479:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208480:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208484:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  800420848b:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208492:	00 00 00 
  8004208495:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208498:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420849c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084a0:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  80042084a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042084a8:	c9                   	leaveq 
  80042084a9:	c3                   	retq   

00000080042084aa <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  80042084aa:	55                   	push   %rbp
  80042084ab:	48 89 e5             	mov    %rsp,%rbp
  80042084ae:	48 83 ec 40          	sub    $0x40,%rsp
  80042084b2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042084b6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042084ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  80042084be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042084c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084c6:	48 01 d0             	add    %rdx,%rax
  80042084c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  80042084cd:	e9 c8 00 00 00       	jmpq   800420859a <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  80042084d2:	bf 00 00 00 00       	mov    $0x0,%edi
  80042084d7:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  80042084de:	00 00 00 
  80042084e1:	ff d0                	callq  *%rax
  80042084e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042084e7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042084ec:	75 30                	jne    800420851e <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  80042084ee:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  80042084f3:	48 ba 80 9d 21 04 80 	movabs $0x8004219d80,%rdx
  80042084fa:	00 00 00 
  80042084fd:	be a9 01 00 00       	mov    $0x1a9,%esi
  8004208502:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208509:	00 00 00 
  800420850c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208511:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004208518:	00 00 00 
  800420851b:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  800420851e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208522:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208529:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420852d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208531:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208536:	48 89 c7             	mov    %rax,%rdi
  8004208539:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  8004208540:	00 00 00 
  8004208543:	ff d0                	callq  *%rax
  8004208545:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208548:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420854c:	79 30                	jns    800420857e <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  800420854e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208551:	89 c1                	mov    %eax,%ecx
  8004208553:	48 ba b8 9d 21 04 80 	movabs $0x8004219db8,%rdx
  800420855a:	00 00 00 
  800420855d:	be ad 01 00 00       	mov    $0x1ad,%esi
  8004208562:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208569:	00 00 00 
  800420856c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208571:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004208578:	00 00 00 
  800420857b:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  800420857e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208582:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208588:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420858c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208590:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208596:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  800420859a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420859e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042085a2:	0f 82 2a ff ff ff    	jb     80042084d2 <region_alloc+0x28>
	//
	// Hint: It is easier to use region_alloc if the caller can pass
	//   'va' and 'len' values that are not page-aligned.
	//   You should round va down, and round (va + len) up.
	//   (Watch out for corner-cases!)
}
  80042085a8:	90                   	nop
  80042085a9:	c9                   	leaveq 
  80042085aa:	c3                   	retq   

00000080042085ab <load_icode>:
// load_icode panics if it encounters problems.
//  - How might load_icode fail?  What might be wrong with the given input?
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  80042085ab:	55                   	push   %rbp
  80042085ac:	48 89 e5             	mov    %rsp,%rbp
  80042085af:	48 83 ec 70          	sub    $0x70,%rsp
  80042085b3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  80042085b7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  80042085bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042085bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  80042085c3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042085c8:	0f 84 72 03 00 00    	je     8004208940 <load_icode+0x395>
  80042085ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042085d2:	8b 00                	mov    (%rax),%eax
  80042085d4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  80042085d9:	0f 85 61 03 00 00    	jne    8004208940 <load_icode+0x395>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  80042085df:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042085e3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042085ea:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042085ee:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042085f5:	00 00 00 
  80042085f8:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042085fc:	77 32                	ja     8004208630 <load_icode+0x85>
  80042085fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208602:	48 89 c1             	mov    %rax,%rcx
  8004208605:	48 ba e0 9d 21 04 80 	movabs $0x8004219de0,%rdx
  800420860c:	00 00 00 
  800420860f:	be d7 01 00 00       	mov    $0x1d7,%esi
  8004208614:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  800420861b:	00 00 00 
  800420861e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208623:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420862a:	00 00 00 
  800420862d:	41 ff d0             	callq  *%r8
  8004208630:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208637:	ff ff ff 
  800420863a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420863e:	48 01 d0             	add    %rdx,%rax
  8004208641:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208645:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208649:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  800420864c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208650:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208654:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208658:	48 01 d0             	add    %rdx,%rax
  800420865b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		eph = ph + elf->e_phnum;
  800420865f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208663:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208667:	0f b7 c0             	movzwl %ax,%eax
  800420866a:	48 c1 e0 03          	shl    $0x3,%rax
  800420866e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208675:	00 
  8004208676:	48 29 c2             	sub    %rax,%rdx
  8004208679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420867d:	48 01 d0             	add    %rdx,%rax
  8004208680:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		for(;ph < eph; ph++) {
  8004208684:	e9 c0 00 00 00       	jmpq   8004208749 <load_icode+0x19e>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208689:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420868d:	8b 00                	mov    (%rax),%eax
  800420868f:	83 f8 01             	cmp    $0x1,%eax
  8004208692:	0f 85 ac 00 00 00    	jne    8004208744 <load_icode+0x199>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420869c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042086a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042086a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042086a8:	48 89 c1             	mov    %rax,%rcx
  80042086ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042086af:	48 89 ce             	mov    %rcx,%rsi
  80042086b2:	48 89 c7             	mov    %rax,%rdi
  80042086b5:	48 b8 aa 84 20 04 80 	movabs $0x80042084aa,%rax
  80042086bc:	00 00 00 
  80042086bf:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  80042086c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042086c5:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042086c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042086cd:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042086d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042086d5:	48 01 d1             	add    %rdx,%rcx
  80042086d8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042086dc:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042086e0:	48 89 d7             	mov    %rdx,%rdi
  80042086e3:	48 89 c2             	mov    %rax,%rdx
  80042086e6:	48 89 ce             	mov    %rcx,%rsi
  80042086e9:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  80042086f0:	00 00 00 
  80042086f3:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  80042086f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042086f9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042086fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208701:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208705:	48 39 c2             	cmp    %rax,%rdx
  8004208708:	73 3a                	jae    8004208744 <load_icode+0x199>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  800420870a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420870e:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208716:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420871a:	48 29 c2             	sub    %rax,%rdx
  800420871d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208721:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208729:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420872d:	48 01 c8             	add    %rcx,%rax
  8004208730:	be 00 00 00 00       	mov    $0x0,%esi
  8004208735:	48 89 c7             	mov    %rax,%rdi
  8004208738:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  800420873f:	00 00 00 
  8004208742:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208744:	48 83 45 f8 38       	addq   $0x38,-0x8(%rbp)
  8004208749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420874d:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004208751:	0f 82 32 ff ff ff    	jb     8004208689 <load_icode+0xde>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208757:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420875b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208760:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208765:	48 89 c7             	mov    %rax,%rdi
  8004208768:	48 b8 aa 84 20 04 80 	movabs $0x80042084aa,%rax
  800420876f:	00 00 00 
  8004208772:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208774:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208778:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800420877c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208780:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208787:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420878b:	be 00 e0 7f ef       	mov    $0xef7fe000,%esi
  8004208790:	48 89 b0 b0 00 00 00 	mov    %rsi,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208797:	48 c7 45 f0 00 00 20 	movq   $0x200000,-0x10(%rbp)
  800420879e:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  800420879f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042087a3:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042087a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042087ab:	48 01 d0             	add    %rdx,%rax
  80042087ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  80042087b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042087b6:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042087ba:	0f b7 c0             	movzwl %ax,%eax
  80042087bd:	48 c1 e0 06          	shl    $0x6,%rax
  80042087c1:	48 89 c2             	mov    %rax,%rdx
  80042087c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042087c8:	48 01 d0             	add    %rdx,%rax
  80042087cb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  80042087cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042087d3:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042087d7:	0f b7 c0             	movzwl %ax,%eax
  80042087da:	48 c1 e0 06          	shl    $0x6,%rax
  80042087de:	48 89 c2             	mov    %rax,%rdx
  80042087e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042087e5:	48 01 d0             	add    %rdx,%rax
  80042087e8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		for(;sh < esh; sh++) {
  80042087ec:	e9 27 01 00 00       	jmpq   8004208918 <load_icode+0x36d>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  80042087f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042087f5:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042087f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042087fd:	8b 00                	mov    (%rax),%eax
  80042087ff:	89 c0                	mov    %eax,%eax
  8004208801:	48 01 c2             	add    %rax,%rdx
  8004208804:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208808:	48 01 d0             	add    %rdx,%rax
  800420880b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  800420880f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004208813:	48 be 04 9e 21 04 80 	movabs $0x8004219e04,%rsi
  800420881a:	00 00 00 
  800420881d:	48 89 c7             	mov    %rax,%rdi
  8004208820:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004208827:	00 00 00 
  800420882a:	ff d0                	callq  *%rax
  800420882c:	85 c0                	test   %eax,%eax
  800420882e:	0f 84 84 00 00 00    	je     80042088b8 <load_icode+0x30d>
  8004208834:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004208838:	48 be 10 9e 21 04 80 	movabs $0x8004219e10,%rsi
  800420883f:	00 00 00 
  8004208842:	48 89 c7             	mov    %rax,%rdi
  8004208845:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  800420884c:	00 00 00 
  800420884f:	ff d0                	callq  *%rax
  8004208851:	85 c0                	test   %eax,%eax
  8004208853:	74 63                	je     80042088b8 <load_icode+0x30d>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208855:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004208859:	48 be 1e 9e 21 04 80 	movabs $0x8004219e1e,%rsi
  8004208860:	00 00 00 
  8004208863:	48 89 c7             	mov    %rax,%rdi
  8004208866:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  800420886d:	00 00 00 
  8004208870:	ff d0                	callq  *%rax
  8004208872:	85 c0                	test   %eax,%eax
  8004208874:	74 42                	je     80042088b8 <load_icode+0x30d>
  8004208876:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420887a:	48 be 2a 9e 21 04 80 	movabs $0x8004219e2a,%rsi
  8004208881:	00 00 00 
  8004208884:	48 89 c7             	mov    %rax,%rdi
  8004208887:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  800420888e:	00 00 00 
  8004208891:	ff d0                	callq  *%rax
  8004208893:	85 c0                	test   %eax,%eax
  8004208895:	74 21                	je     80042088b8 <load_icode+0x30d>
			   || !strcmp(name, ".debug_str")) {
  8004208897:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420889b:	48 be 34 9e 21 04 80 	movabs $0x8004219e34,%rsi
  80042088a2:	00 00 00 
  80042088a5:	48 89 c7             	mov    %rax,%rdi
  80042088a8:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  80042088af:	00 00 00 
  80042088b2:	ff d0                	callq  *%rax
  80042088b4:	85 c0                	test   %eax,%eax
  80042088b6:	75 5b                	jne    8004208913 <load_icode+0x368>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  80042088b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042088bc:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042088c0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  80042088c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042088c8:	48 89 ce             	mov    %rcx,%rsi
  80042088cb:	48 89 c7             	mov    %rax,%rdi
  80042088ce:	48 b8 aa 84 20 04 80 	movabs $0x80042084aa,%rax
  80042088d5:	00 00 00 
  80042088d8:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset), 
  80042088da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042088de:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042088e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042088e6:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042088ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042088ee:	48 01 c1             	add    %rax,%rcx
  80042088f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042088f5:	48 89 ce             	mov    %rcx,%rsi
  80042088f8:	48 89 c7             	mov    %rax,%rdi
  80042088fb:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  8004208902:	00 00 00 
  8004208905:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208907:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420890b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420890f:	48 01 45 f0          	add    %rax,-0x10(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208913:	48 83 45 e8 40       	addq   $0x40,-0x18(%rbp)
  8004208918:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420891c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004208920:	0f 82 cb fe ff ff    	jb     80042087f1 <load_icode+0x246>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset), 
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208926:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  800420892d:	00 00 00 
  8004208930:	48 8b 00             	mov    (%rax),%rax
  8004208933:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208937:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420893b:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  800420893e:	eb 2a                	jmp    800420896a <load_icode+0x3bf>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208940:	48 ba 3f 9e 21 04 80 	movabs $0x8004219e3f,%rdx
  8004208947:	00 00 00 
  800420894a:	be f8 01 00 00       	mov    $0x1f8,%esi
  800420894f:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208956:	00 00 00 
  8004208959:	b8 00 00 00 00       	mov    $0x0,%eax
  800420895e:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  8004208965:	00 00 00 
  8004208968:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  800420896a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420896e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004208972:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208979:	90                   	nop
  800420897a:	c9                   	leaveq 
  800420897b:	c3                   	retq   

000000800420897c <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  800420897c:	55                   	push   %rbp
  800420897d:	48 89 e5             	mov    %rsp,%rbp
  8004208980:	48 83 ec 20          	sub    $0x20,%rsp
  8004208984:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208988:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  800420898b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420898f:	be 00 00 00 00       	mov    $0x0,%esi
  8004208994:	48 89 c7             	mov    %rax,%rdi
  8004208997:	48 b8 0e 83 20 04 80 	movabs $0x800420830e,%rax
  800420899e:	00 00 00 
  80042089a1:	ff d0                	callq  *%rax
  80042089a3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042089a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089aa:	79 30                	jns    80042089dc <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  80042089ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042089af:	89 c1                	mov    %eax,%ecx
  80042089b1:	48 ba 50 9e 21 04 80 	movabs $0x8004219e50,%rdx
  80042089b8:	00 00 00 
  80042089bb:	be 0c 02 00 00       	mov    $0x20c,%esi
  80042089c0:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  80042089c7:	00 00 00 
  80042089ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042089cf:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042089d6:	00 00 00 
  80042089d9:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  80042089dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042089e4:	48 89 d6             	mov    %rdx,%rsi
  80042089e7:	48 89 c7             	mov    %rax,%rdi
  80042089ea:	48 b8 ab 85 20 04 80 	movabs $0x80042085ab,%rax
  80042089f1:	00 00 00 
  80042089f4:	ff d0                	callq  *%rax
	e->env_type = type;
  80042089f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089fa:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042089fd:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004208a03:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004208a07:	75 19                	jne    8004208a22 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  8004208a09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a0d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208a11:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  8004208a18:	80 ce 30             	or     $0x30,%dh
  8004208a1b:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004208a22:	90                   	nop
  8004208a23:	c9                   	leaveq 
  8004208a24:	c3                   	retq   

0000008004208a25 <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  8004208a25:	55                   	push   %rbp
  8004208a26:	48 89 e5             	mov    %rsp,%rbp
  8004208a29:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004208a30:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004208a37:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208a3e:	00 00 00 
  8004208a41:	ff d0                	callq  *%rax
  8004208a43:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208a4a:	00 00 00 
  8004208a4d:	48 98                	cltq   
  8004208a4f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208a53:	48 89 c1             	mov    %rax,%rcx
  8004208a56:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208a5a:	48 01 c8             	add    %rcx,%rax
  8004208a5d:	48 01 d0             	add    %rdx,%rax
  8004208a60:	48 83 c0 08          	add    $0x8,%rax
  8004208a64:	48 8b 00             	mov    (%rax),%rax
  8004208a67:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  8004208a6e:	75 18                	jne    8004208a88 <env_free+0x63>
		lcr3(boot_cr3);
  8004208a70:	48 b8 e0 d5 69 04 80 	movabs $0x800469d5e0,%rax
  8004208a77:	00 00 00 
  8004208a7a:	48 8b 00             	mov    (%rax),%rax
  8004208a7d:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004208a81:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208a85:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  8004208a88:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208a8f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208a96:	48 8b 00             	mov    (%rax),%rax
  8004208a99:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208a9f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208aa3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208aa7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208aab:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004208aae:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004208ab1:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208ab8:	00 00 00 
  8004208abb:	48 8b 00             	mov    (%rax),%rax
  8004208abe:	48 39 c2             	cmp    %rax,%rdx
  8004208ac1:	72 32                	jb     8004208af5 <env_free+0xd0>
  8004208ac3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208ac7:	48 89 c1             	mov    %rax,%rcx
  8004208aca:	48 ba 58 9d 21 04 80 	movabs $0x8004219d58,%rdx
  8004208ad1:	00 00 00 
  8004208ad4:	be 31 02 00 00       	mov    $0x231,%esi
  8004208ad9:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208ae0:	00 00 00 
  8004208ae3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ae8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004208aef:	00 00 00 
  8004208af2:	41 ff d0             	callq  *%r8
  8004208af5:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208afc:	00 00 00 
  8004208aff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208b03:	48 01 d0             	add    %rdx,%rax
  8004208b06:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208b0a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004208b11:	00 
  8004208b12:	e9 af 02 00 00       	jmpq   8004208dc6 <env_free+0x3a1>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004208b17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208b1b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b22:	00 
  8004208b23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b27:	48 01 d0             	add    %rdx,%rax
  8004208b2a:	48 8b 00             	mov    (%rax),%rax
  8004208b2d:	83 e0 01             	and    $0x1,%eax
  8004208b30:	48 85 c0             	test   %rax,%rax
  8004208b33:	0f 84 87 02 00 00    	je     8004208dc0 <env_free+0x39b>
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  8004208b39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208b3d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208b44:	00 
  8004208b45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b49:	48 01 d0             	add    %rdx,%rax
  8004208b4c:	48 8b 00             	mov    (%rax),%rax
  8004208b4f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b55:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208b59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b5d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208b61:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004208b64:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004208b67:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208b6e:	00 00 00 
  8004208b71:	48 8b 00             	mov    (%rax),%rax
  8004208b74:	48 39 c2             	cmp    %rax,%rdx
  8004208b77:	72 32                	jb     8004208bab <env_free+0x186>
  8004208b79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b7d:	48 89 c1             	mov    %rax,%rcx
  8004208b80:	48 ba 58 9d 21 04 80 	movabs $0x8004219d58,%rdx
  8004208b87:	00 00 00 
  8004208b8a:	be 39 02 00 00       	mov    $0x239,%esi
  8004208b8f:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208b96:	00 00 00 
  8004208b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b9e:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004208ba5:	00 00 00 
  8004208ba8:	41 ff d0             	callq  *%r8
  8004208bab:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208bb2:	00 00 00 
  8004208bb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208bb9:	48 01 d0             	add    %rdx,%rax
  8004208bbc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004208bc0:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208bc5:	75 07                	jne    8004208bce <env_free+0x1a9>
  8004208bc7:	b8 04 00 00 00       	mov    $0x4,%eax
  8004208bcc:	eb 05                	jmp    8004208bd3 <env_free+0x1ae>
  8004208bce:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004208bd3:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208bd6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004208bdd:	00 
  8004208bde:	e9 70 01 00 00       	jmpq   8004208d53 <env_free+0x32e>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004208be3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208be7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208bee:	00 
  8004208bef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208bf3:	48 01 d0             	add    %rdx,%rax
  8004208bf6:	48 8b 00             	mov    (%rax),%rax
  8004208bf9:	83 e0 01             	and    $0x1,%eax
  8004208bfc:	48 85 c0             	test   %rax,%rax
  8004208bff:	0f 84 48 01 00 00    	je     8004208d4d <env_free+0x328>
				continue;
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004208c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208c09:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c10:	00 
  8004208c11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208c15:	48 01 d0             	add    %rdx,%rax
  8004208c18:	48 8b 00             	mov    (%rax),%rax
  8004208c1b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208c21:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004208c25:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208c29:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004208c2d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c31:	48 c1 e8 0c          	shr    $0xc,%rax
  8004208c35:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004208c38:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004208c3b:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004208c42:	00 00 00 
  8004208c45:	48 8b 00             	mov    (%rax),%rax
  8004208c48:	48 39 c2             	cmp    %rax,%rdx
  8004208c4b:	72 32                	jb     8004208c7f <env_free+0x25a>
  8004208c4d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c51:	48 89 c1             	mov    %rax,%rcx
  8004208c54:	48 ba 58 9d 21 04 80 	movabs $0x8004219d58,%rdx
  8004208c5b:	00 00 00 
  8004208c5e:	be 43 02 00 00       	mov    $0x243,%esi
  8004208c63:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  8004208c6a:	00 00 00 
  8004208c6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c72:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004208c79:	00 00 00 
  8004208c7c:	41 ff d0             	callq  *%r8
  8004208c7f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004208c86:	00 00 00 
  8004208c89:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c8d:	48 01 d0             	add    %rdx,%rax
  8004208c90:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208c94:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004208c9b:	00 
  8004208c9c:	eb 67                	jmp    8004208d05 <env_free+0x2e0>
				if (pt[pteno] & PTE_P){
  8004208c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ca2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208ca9:	00 
  8004208caa:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004208cae:	48 01 d0             	add    %rdx,%rax
  8004208cb1:	48 8b 00             	mov    (%rax),%rax
  8004208cb4:	83 e0 01             	and    $0x1,%eax
  8004208cb7:	48 85 c0             	test   %rax,%rax
  8004208cba:	74 44                	je     8004208d00 <env_free+0x2db>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004208cbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc0:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004208cc4:	48 89 c2             	mov    %rax,%rdx
  8004208cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ccb:	48 c1 e0 15          	shl    $0x15,%rax
  8004208ccf:	48 09 c2             	or     %rax,%rdx
  8004208cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208cd6:	48 c1 e0 0c          	shl    $0xc,%rax
  8004208cda:	48 09 d0             	or     %rdx,%rax
  8004208cdd:	48 89 c2             	mov    %rax,%rdx
  8004208ce0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208ce7:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208cee:	48 89 d6             	mov    %rdx,%rsi
  8004208cf1:	48 89 c7             	mov    %rax,%rdi
  8004208cf4:	48 b8 75 3f 20 04 80 	movabs $0x8004203f75,%rax
  8004208cfb:	00 00 00 
  8004208cfe:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004208d00:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004208d05:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004208d0c:	00 
  8004208d0d:	76 8f                	jbe    8004208c9e <env_free+0x279>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004208d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208d13:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d1a:	00 
  8004208d1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208d1f:	48 01 d0             	add    %rdx,%rax
  8004208d22:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004208d29:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208d2d:	48 89 c7             	mov    %rax,%rdi
  8004208d30:	48 b8 5f 7e 20 04 80 	movabs $0x8004207e5f,%rax
  8004208d37:	00 00 00 
  8004208d3a:	ff d0                	callq  *%rax
  8004208d3c:	48 89 c7             	mov    %rax,%rdi
  8004208d3f:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004208d46:	00 00 00 
  8004208d49:	ff d0                	callq  *%rax
  8004208d4b:	eb 01                	jmp    8004208d4e <env_free+0x329>
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
				continue;
  8004208d4d:	90                   	nop
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004208d4e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004208d53:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  8004208d56:	48 98                	cltq   
  8004208d58:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208d5c:	0f 87 81 fe ff ff    	ja     8004208be3 <env_free+0x1be>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  8004208d62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d6d:	00 
  8004208d6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d72:	48 01 d0             	add    %rdx,%rax
  8004208d75:	48 8b 00             	mov    (%rax),%rax
  8004208d78:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208d7e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  8004208d82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d86:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208d8d:	00 
  8004208d8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d92:	48 01 d0             	add    %rdx,%rax
  8004208d95:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004208d9c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208da0:	48 89 c7             	mov    %rax,%rdi
  8004208da3:	48 b8 5f 7e 20 04 80 	movabs $0x8004207e5f,%rax
  8004208daa:	00 00 00 
  8004208dad:	ff d0                	callq  *%rax
  8004208daf:	48 89 c7             	mov    %rax,%rdi
  8004208db2:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004208db9:	00 00 00 
  8004208dbc:	ff d0                	callq  *%rax
  8004208dbe:	eb 01                	jmp    8004208dc1 <env_free+0x39c>
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
  8004208dc0:	90                   	nop
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004208dc1:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004208dc6:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004208dcb:	0f 86 46 fd ff ff    	jbe    8004208b17 <env_free+0xf2>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  8004208dd1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208dd8:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208ddf:	48 8b 00             	mov    (%rax),%rax
  8004208de2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208de8:	48 89 c7             	mov    %rax,%rdi
  8004208deb:	48 b8 5f 7e 20 04 80 	movabs $0x8004207e5f,%rax
  8004208df2:	00 00 00 
  8004208df5:	ff d0                	callq  *%rax
  8004208df7:	48 89 c7             	mov    %rax,%rdi
  8004208dfa:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004208e01:	00 00 00 
  8004208e04:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004208e06:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e0d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208e14:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004208e1b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e22:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208e29:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004208e2d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e34:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208e3b:	00 00 00 00 
	e->env_cr3 = 0;
  8004208e3f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e46:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208e4d:	00 00 00 00 
	page_decref(pa2page(pa));
  8004208e51:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e55:	48 89 c7             	mov    %rax,%rdi
  8004208e58:	48 b8 5f 7e 20 04 80 	movabs $0x8004207e5f,%rax
  8004208e5f:	00 00 00 
  8004208e62:	ff d0                	callq  *%rax
  8004208e64:	48 89 c7             	mov    %rax,%rdi
  8004208e67:	48 b8 2a 31 20 04 80 	movabs $0x800420312a,%rax
  8004208e6e:	00 00 00 
  8004208e71:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208e73:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e7a:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208e81:	00 00 00 
	e->env_link = env_free_list;
  8004208e84:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208e8b:	00 00 00 
  8004208e8e:	48 8b 10             	mov    (%rax),%rdx
  8004208e91:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004208e98:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004208e9f:	48 b8 60 e2 49 04 80 	movabs $0x800449e260,%rax
  8004208ea6:	00 00 00 
  8004208ea9:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004208eb0:	48 89 10             	mov    %rdx,(%rax)
}
  8004208eb3:	90                   	nop
  8004208eb4:	c9                   	leaveq 
  8004208eb5:	c3                   	retq   

0000008004208eb6 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004208eb6:	55                   	push   %rbp
  8004208eb7:	48 89 e5             	mov    %rsp,%rbp
  8004208eba:	48 83 ec 10          	sub    $0x10,%rsp
  8004208ebe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  8004208ec2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208ec6:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004208ecc:	83 f8 03             	cmp    $0x3,%eax
  8004208ecf:	75 49                	jne    8004208f1a <env_destroy+0x64>
  8004208ed1:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208ed8:	00 00 00 
  8004208edb:	ff d0                	callq  *%rax
  8004208edd:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208ee4:	00 00 00 
  8004208ee7:	48 98                	cltq   
  8004208ee9:	48 c1 e0 03          	shl    $0x3,%rax
  8004208eed:	48 89 c1             	mov    %rax,%rcx
  8004208ef0:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208ef4:	48 01 c8             	add    %rcx,%rax
  8004208ef7:	48 01 d0             	add    %rdx,%rax
  8004208efa:	48 83 c0 08          	add    $0x8,%rax
  8004208efe:	48 8b 00             	mov    (%rax),%rax
  8004208f01:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208f05:	74 13                	je     8004208f1a <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004208f07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208f0b:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004208f12:	00 00 00 
		return;
  8004208f15:	e9 89 00 00 00       	jmpq   8004208fa3 <env_destroy+0xed>
	}

	env_free(e);
  8004208f1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208f1e:	48 89 c7             	mov    %rax,%rdi
  8004208f21:	48 b8 25 8a 20 04 80 	movabs $0x8004208a25,%rax
  8004208f28:	00 00 00 
  8004208f2b:	ff d0                	callq  *%rax
	if (curenv == e) {
  8004208f2d:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208f34:	00 00 00 
  8004208f37:	ff d0                	callq  *%rax
  8004208f39:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208f40:	00 00 00 
  8004208f43:	48 98                	cltq   
  8004208f45:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f49:	48 89 c1             	mov    %rax,%rcx
  8004208f4c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f50:	48 01 c8             	add    %rcx,%rax
  8004208f53:	48 01 d0             	add    %rdx,%rax
  8004208f56:	48 83 c0 08          	add    $0x8,%rax
  8004208f5a:	48 8b 00             	mov    (%rax),%rax
  8004208f5d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208f61:	75 40                	jne    8004208fa3 <env_destroy+0xed>
		curenv = NULL;
  8004208f63:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208f6a:	00 00 00 
  8004208f6d:	ff d0                	callq  *%rax
  8004208f6f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208f76:	00 00 00 
  8004208f79:	48 98                	cltq   
  8004208f7b:	48 c1 e0 03          	shl    $0x3,%rax
  8004208f7f:	48 89 c1             	mov    %rax,%rcx
  8004208f82:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208f86:	48 01 c8             	add    %rcx,%rax
  8004208f89:	48 01 d0             	add    %rdx,%rax
  8004208f8c:	48 83 c0 08          	add    $0x8,%rax
  8004208f90:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004208f97:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  8004208f9e:	00 00 00 
  8004208fa1:	ff d0                	callq  *%rax
	}
}
  8004208fa3:	c9                   	leaveq 
  8004208fa4:	c3                   	retq   

0000008004208fa5 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004208fa5:	55                   	push   %rbp
  8004208fa6:	48 89 e5             	mov    %rsp,%rbp
  8004208fa9:	53                   	push   %rbx
  8004208faa:	48 83 ec 18          	sub    $0x18,%rsp
  8004208fae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  8004208fb2:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208fb9:	00 00 00 
  8004208fbc:	ff d0                	callq  *%rax
  8004208fbe:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004208fc5:	00 00 00 
  8004208fc8:	48 98                	cltq   
  8004208fca:	48 c1 e0 03          	shl    $0x3,%rax
  8004208fce:	48 89 c1             	mov    %rax,%rcx
  8004208fd1:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208fd5:	48 01 c8             	add    %rcx,%rax
  8004208fd8:	48 01 d0             	add    %rdx,%rax
  8004208fdb:	48 83 c0 08          	add    $0x8,%rax
  8004208fdf:	48 8b 18             	mov    (%rax),%rbx
  8004208fe2:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004208fe9:	00 00 00 
  8004208fec:	ff d0                	callq  *%rax
  8004208fee:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004208ff4:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004208ff8:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004208ffc:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004209001:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209006:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  800420900b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209010:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209015:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  800420901a:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420901f:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209024:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209029:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420902e:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209033:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209038:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420903d:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004209042:	48 83 c4 78          	add    $0x78,%rsp
  8004209046:	8e 04 24             	mov    (%rsp),%es
  8004209049:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  800420904d:	48 83 c4 10          	add    $0x10,%rsp
  8004209051:	48 83 c4 10          	add    $0x10,%rsp
  8004209055:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  8004209057:	48 ba 78 9e 21 04 80 	movabs $0x8004219e78,%rdx
  800420905e:	00 00 00 
  8004209061:	be 8f 02 00 00       	mov    $0x28f,%esi
  8004209066:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  800420906d:	00 00 00 
  8004209070:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209075:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420907c:	00 00 00 
  800420907f:	ff d1                	callq  *%rcx

0000008004209081 <env_run>:
//
// This function does not return.
//
void
env_run(struct Env *e)
{
  8004209081:	55                   	push   %rbp
  8004209082:	48 89 e5             	mov    %rsp,%rbp
  8004209085:	48 83 ec 20          	sub    $0x20,%rsp
  8004209089:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  800420908d:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004209094:	00 00 00 
  8004209097:	ff d0                	callq  *%rax
  8004209099:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042090a0:	00 00 00 
  80042090a3:	48 98                	cltq   
  80042090a5:	48 c1 e0 03          	shl    $0x3,%rax
  80042090a9:	48 89 c1             	mov    %rax,%rcx
  80042090ac:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090b0:	48 01 c8             	add    %rcx,%rax
  80042090b3:	48 01 d0             	add    %rdx,%rax
  80042090b6:	48 83 c0 08          	add    $0x8,%rax
  80042090ba:	48 8b 00             	mov    (%rax),%rax
  80042090bd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042090c1:	0f 84 28 01 00 00    	je     80042091ef <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  80042090c7:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042090ce:	00 00 00 
  80042090d1:	ff d0                	callq  *%rax
  80042090d3:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042090da:	00 00 00 
  80042090dd:	48 98                	cltq   
  80042090df:	48 c1 e0 03          	shl    $0x3,%rax
  80042090e3:	48 89 c1             	mov    %rax,%rcx
  80042090e6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090ea:	48 01 c8             	add    %rcx,%rax
  80042090ed:	48 01 d0             	add    %rdx,%rax
  80042090f0:	48 83 c0 08          	add    $0x8,%rax
  80042090f4:	48 8b 00             	mov    (%rax),%rax
  80042090f7:	48 85 c0             	test   %rax,%rax
  80042090fa:	74 75                	je     8004209171 <env_run+0xf0>
  80042090fc:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004209103:	00 00 00 
  8004209106:	ff d0                	callq  *%rax
  8004209108:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420910f:	00 00 00 
  8004209112:	48 98                	cltq   
  8004209114:	48 c1 e0 03          	shl    $0x3,%rax
  8004209118:	48 89 c1             	mov    %rax,%rcx
  800420911b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420911f:	48 01 c8             	add    %rcx,%rax
  8004209122:	48 01 d0             	add    %rdx,%rax
  8004209125:	48 83 c0 08          	add    $0x8,%rax
  8004209129:	48 8b 00             	mov    (%rax),%rax
  800420912c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209132:	83 f8 03             	cmp    $0x3,%eax
  8004209135:	75 3a                	jne    8004209171 <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209137:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420913e:	00 00 00 
  8004209141:	ff d0                	callq  *%rax
  8004209143:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420914a:	00 00 00 
  800420914d:	48 98                	cltq   
  800420914f:	48 c1 e0 03          	shl    $0x3,%rax
  8004209153:	48 89 c1             	mov    %rax,%rcx
  8004209156:	48 c1 e1 04          	shl    $0x4,%rcx
  800420915a:	48 01 c8             	add    %rcx,%rax
  800420915d:	48 01 d0             	add    %rdx,%rax
  8004209160:	48 83 c0 08          	add    $0x8,%rax
  8004209164:	48 8b 00             	mov    (%rax),%rax
  8004209167:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420916e:	00 00 00 
		//cprintf("cpu %d switch from env %d to env %d\n",
		//	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  8004209171:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004209178:	00 00 00 
  800420917b:	ff d0                	callq  *%rax
  800420917d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004209184:	00 00 00 
  8004209187:	48 98                	cltq   
  8004209189:	48 c1 e0 03          	shl    $0x3,%rax
  800420918d:	48 89 c1             	mov    %rax,%rcx
  8004209190:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209194:	48 01 c8             	add    %rcx,%rax
  8004209197:	48 01 d0             	add    %rdx,%rax
  800420919a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420919e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a2:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  80042091a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a9:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  80042091b0:	00 00 00 
		e->env_runs++;
  80042091b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091b7:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  80042091bd:	8d 50 01             	lea    0x1(%rax),%edx
  80042091c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091c4:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  80042091ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091ce:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042091d4:	83 f8 03             	cmp    $0x3,%eax
  80042091d7:	74 16                	je     80042091ef <env_run+0x16e>
			lcr3(e->env_cr3);
  80042091d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091dd:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042091e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042091e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091ec:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  80042091ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091f3:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042091f9:	83 f8 03             	cmp    $0x3,%eax
  80042091fc:	74 35                	je     8004209233 <env_run+0x1b2>
  80042091fe:	48 b9 84 9e 21 04 80 	movabs $0x8004219e84,%rcx
  8004209205:	00 00 00 
  8004209208:	48 ba a1 9e 21 04 80 	movabs $0x8004219ea1,%rdx
  800420920f:	00 00 00 
  8004209212:	be ae 02 00 00       	mov    $0x2ae,%esi
  8004209217:	48 bf a7 9d 21 04 80 	movabs $0x8004219da7,%rdi
  800420921e:	00 00 00 
  8004209221:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209226:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420922d:	00 00 00 
  8004209230:	41 ff d0             	callq  *%r8
	else {
		unlock_kernel();
		env_pop_tf(&e->env_tf);
	}
#else	/* VMM_GUEST */
	unlock_kernel();
  8004209233:	48 b8 58 7f 20 04 80 	movabs $0x8004207f58,%rax
  800420923a:	00 00 00 
  800420923d:	ff d0                	callq  *%rax
	env_pop_tf(&e->env_tf);
  800420923f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209243:	48 89 c7             	mov    %rax,%rdi
  8004209246:	48 b8 a5 8f 20 04 80 	movabs $0x8004208fa5,%rax
  800420924d:	00 00 00 
  8004209250:	ff d0                	callq  *%rax

0000008004209252 <mc146818_read>:
  8004209252:	55                   	push   %rbp
  8004209253:	48 89 e5             	mov    %rsp,%rbp
  8004209256:	48 83 ec 18          	sub    $0x18,%rsp
  800420925a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420925d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209260:	0f b6 c0             	movzbl %al,%eax
  8004209263:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420926a:	88 45 f6             	mov    %al,-0xa(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420926d:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  8004209271:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209274:	ee                   	out    %al,(%dx)
  8004209275:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420927c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800420927f:	89 c2                	mov    %eax,%edx
  8004209281:	ec                   	in     (%dx),%al
  8004209282:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004209285:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209289:	0f b6 c0             	movzbl %al,%eax
  800420928c:	c9                   	leaveq 
  800420928d:	c3                   	retq   

000000800420928e <mc146818_write>:
  800420928e:	55                   	push   %rbp
  800420928f:	48 89 e5             	mov    %rsp,%rbp
  8004209292:	48 83 ec 18          	sub    $0x18,%rsp
  8004209296:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209299:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800420929c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420929f:	0f b6 c0             	movzbl %al,%eax
  80042092a2:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042092a9:	88 45 f6             	mov    %al,-0xa(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042092ac:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  80042092b0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092b3:	ee                   	out    %al,(%dx)
  80042092b4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042092b7:	0f b6 c0             	movzbl %al,%eax
  80042092ba:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%rbp)
  80042092c1:	88 45 f7             	mov    %al,-0x9(%rbp)
  80042092c4:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042092c8:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042092cb:	ee                   	out    %al,(%dx)
  80042092cc:	90                   	nop
  80042092cd:	c9                   	leaveq 
  80042092ce:	c3                   	retq   

00000080042092cf <pic_init>:
  80042092cf:	55                   	push   %rbp
  80042092d0:	48 89 e5             	mov    %rsp,%rbp
  80042092d3:	48 83 ec 50          	sub    $0x50,%rsp
  80042092d7:	48 b8 68 e2 49 04 80 	movabs $0x800449e268,%rax
  80042092de:	00 00 00 
  80042092e1:	c6 00 01             	movb   $0x1,(%rax)
  80042092e4:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  80042092eb:	c6 45 ba ff          	movb   $0xff,-0x46(%rbp)
  80042092ef:	0f b6 45 ba          	movzbl -0x46(%rbp),%eax
  80042092f3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042092f6:	ee                   	out    %al,(%dx)
  80042092f7:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%rbp)
  80042092fe:	c6 45 bb ff          	movb   $0xff,-0x45(%rbp)
  8004209302:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209306:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209309:	ee                   	out    %al,(%dx)
  800420930a:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%rbp)
  8004209311:	c6 45 bc 11          	movb   $0x11,-0x44(%rbp)
  8004209315:	0f b6 45 bc          	movzbl -0x44(%rbp),%eax
  8004209319:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420931c:	ee                   	out    %al,(%dx)
  800420931d:	c7 45 f0 21 00 00 00 	movl   $0x21,-0x10(%rbp)
  8004209324:	c6 45 bd 20          	movb   $0x20,-0x43(%rbp)
  8004209328:	0f b6 45 bd          	movzbl -0x43(%rbp),%eax
  800420932c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420932f:	ee                   	out    %al,(%dx)
  8004209330:	c7 45 ec 21 00 00 00 	movl   $0x21,-0x14(%rbp)
  8004209337:	c6 45 be 04          	movb   $0x4,-0x42(%rbp)
  800420933b:	0f b6 45 be          	movzbl -0x42(%rbp),%eax
  800420933f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004209342:	ee                   	out    %al,(%dx)
  8004209343:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%rbp)
  800420934a:	c6 45 bf 03          	movb   $0x3,-0x41(%rbp)
  800420934e:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
  8004209352:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004209355:	ee                   	out    %al,(%dx)
  8004209356:	c7 45 e4 a0 00 00 00 	movl   $0xa0,-0x1c(%rbp)
  800420935d:	c6 45 c0 11          	movb   $0x11,-0x40(%rbp)
  8004209361:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
  8004209365:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209368:	ee                   	out    %al,(%dx)
  8004209369:	c7 45 e0 a1 00 00 00 	movl   $0xa1,-0x20(%rbp)
  8004209370:	c6 45 c1 28          	movb   $0x28,-0x3f(%rbp)
  8004209374:	0f b6 45 c1          	movzbl -0x3f(%rbp),%eax
  8004209378:	8b 55 e0             	mov    -0x20(%rbp),%edx
  800420937b:	ee                   	out    %al,(%dx)
  800420937c:	c7 45 dc a1 00 00 00 	movl   $0xa1,-0x24(%rbp)
  8004209383:	c6 45 c2 02          	movb   $0x2,-0x3e(%rbp)
  8004209387:	0f b6 45 c2          	movzbl -0x3e(%rbp),%eax
  800420938b:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420938e:	ee                   	out    %al,(%dx)
  800420938f:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%rbp)
  8004209396:	c6 45 c3 01          	movb   $0x1,-0x3d(%rbp)
  800420939a:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  800420939e:	8b 55 d8             	mov    -0x28(%rbp),%edx
  80042093a1:	ee                   	out    %al,(%dx)
  80042093a2:	c7 45 d4 20 00 00 00 	movl   $0x20,-0x2c(%rbp)
  80042093a9:	c6 45 c4 68          	movb   $0x68,-0x3c(%rbp)
  80042093ad:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
  80042093b1:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042093b4:	ee                   	out    %al,(%dx)
  80042093b5:	c7 45 d0 20 00 00 00 	movl   $0x20,-0x30(%rbp)
  80042093bc:	c6 45 c5 0a          	movb   $0xa,-0x3b(%rbp)
  80042093c0:	0f b6 45 c5          	movzbl -0x3b(%rbp),%eax
  80042093c4:	8b 55 d0             	mov    -0x30(%rbp),%edx
  80042093c7:	ee                   	out    %al,(%dx)
  80042093c8:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  80042093cf:	c6 45 c6 68          	movb   $0x68,-0x3a(%rbp)
  80042093d3:	0f b6 45 c6          	movzbl -0x3a(%rbp),%eax
  80042093d7:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042093da:	ee                   	out    %al,(%dx)
  80042093db:	c7 45 c8 a0 00 00 00 	movl   $0xa0,-0x38(%rbp)
  80042093e2:	c6 45 c7 0a          	movb   $0xa,-0x39(%rbp)
  80042093e6:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
  80042093ea:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042093ed:	ee                   	out    %al,(%dx)
  80042093ee:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  80042093f5:	00 00 00 
  80042093f8:	0f b7 00             	movzwl (%rax),%eax
  80042093fb:	66 83 f8 ff          	cmp    $0xffff,%ax
  80042093ff:	74 1e                	je     800420941f <pic_init+0x150>
  8004209401:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004209408:	00 00 00 
  800420940b:	0f b7 00             	movzwl (%rax),%eax
  800420940e:	0f b7 c0             	movzwl %ax,%eax
  8004209411:	89 c7                	mov    %eax,%edi
  8004209413:	48 b8 22 94 20 04 80 	movabs $0x8004209422,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
  800420941f:	90                   	nop
  8004209420:	c9                   	leaveq 
  8004209421:	c3                   	retq   

0000008004209422 <irq_setmask_8259A>:
  8004209422:	55                   	push   %rbp
  8004209423:	48 89 e5             	mov    %rsp,%rbp
  8004209426:	48 83 ec 20          	sub    $0x20,%rsp
  800420942a:	89 f8                	mov    %edi,%eax
  800420942c:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
  8004209430:	48 b8 72 c6 22 04 80 	movabs $0x800422c672,%rax
  8004209437:	00 00 00 
  800420943a:	0f b7 55 ec          	movzwl -0x14(%rbp),%edx
  800420943e:	66 89 10             	mov    %dx,(%rax)
  8004209441:	48 b8 68 e2 49 04 80 	movabs $0x800449e268,%rax
  8004209448:	00 00 00 
  800420944b:	0f b6 00             	movzbl (%rax),%eax
  800420944e:	83 f0 01             	xor    $0x1,%eax
  8004209451:	84 c0                	test   %al,%al
  8004209453:	0f 85 b9 00 00 00    	jne    8004209512 <irq_setmask_8259A+0xf0>
  8004209459:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  800420945d:	0f b6 c0             	movzbl %al,%eax
  8004209460:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209467:	88 45 f2             	mov    %al,-0xe(%rbp)
  800420946a:	0f b6 45 f2          	movzbl -0xe(%rbp),%eax
  800420946e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209471:	ee                   	out    %al,(%dx)
  8004209472:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  8004209476:	66 c1 e8 08          	shr    $0x8,%ax
  800420947a:	0f b6 c0             	movzbl %al,%eax
  800420947d:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  8004209484:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209487:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420948b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420948e:	ee                   	out    %al,(%dx)
  800420948f:	48 bf b6 9e 21 04 80 	movabs $0x8004219eb6,%rdi
  8004209496:	00 00 00 
  8004209499:	b8 00 00 00 00       	mov    $0x0,%eax
  800420949e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042094a5:	00 00 00 
  80042094a8:	ff d2                	callq  *%rdx
  80042094aa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042094b1:	eb 3c                	jmp    80042094ef <irq_setmask_8259A+0xcd>
  80042094b3:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
  80042094b7:	f7 d0                	not    %eax
  80042094b9:	89 c2                	mov    %eax,%edx
  80042094bb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042094be:	89 c1                	mov    %eax,%ecx
  80042094c0:	d3 fa                	sar    %cl,%edx
  80042094c2:	89 d0                	mov    %edx,%eax
  80042094c4:	83 e0 01             	and    $0x1,%eax
  80042094c7:	85 c0                	test   %eax,%eax
  80042094c9:	74 20                	je     80042094eb <irq_setmask_8259A+0xc9>
  80042094cb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042094ce:	89 c6                	mov    %eax,%esi
  80042094d0:	48 bf ca 9e 21 04 80 	movabs $0x8004219eca,%rdi
  80042094d7:	00 00 00 
  80042094da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042094df:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042094e6:	00 00 00 
  80042094e9:	ff d2                	callq  *%rdx
  80042094eb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042094ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042094f3:	7e be                	jle    80042094b3 <irq_setmask_8259A+0x91>
  80042094f5:	48 bf ce 9e 21 04 80 	movabs $0x8004219ece,%rdi
  80042094fc:	00 00 00 
  80042094ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209504:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420950b:	00 00 00 
  800420950e:	ff d2                	callq  *%rdx
  8004209510:	eb 01                	jmp    8004209513 <irq_setmask_8259A+0xf1>
  8004209512:	90                   	nop
  8004209513:	c9                   	leaveq 
  8004209514:	c3                   	retq   

0000008004209515 <irq_eoi>:
  8004209515:	55                   	push   %rbp
  8004209516:	48 89 e5             	mov    %rsp,%rbp
  8004209519:	48 83 ec 10          	sub    $0x10,%rsp
  800420951d:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209524:	c6 45 f6 20          	movb   $0x20,-0xa(%rbp)
  8004209528:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  800420952c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420952f:	ee                   	out    %al,(%dx)
  8004209530:	c7 45 f8 a0 00 00 00 	movl   $0xa0,-0x8(%rbp)
  8004209537:	c6 45 f7 20          	movb   $0x20,-0x9(%rbp)
  800420953b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420953f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209542:	ee                   	out    %al,(%dx)
  8004209543:	90                   	nop
  8004209544:	c9                   	leaveq 
  8004209545:	c3                   	retq   

0000008004209546 <putch>:
  8004209546:	55                   	push   %rbp
  8004209547:	48 89 e5             	mov    %rsp,%rbp
  800420954a:	48 83 ec 10          	sub    $0x10,%rsp
  800420954e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209551:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209555:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209558:	89 c7                	mov    %eax,%edi
  800420955a:	48 b8 54 13 20 04 80 	movabs $0x8004201354,%rax
  8004209561:	00 00 00 
  8004209564:	ff d0                	callq  *%rax
  8004209566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420956a:	48 83 c0 04          	add    $0x4,%rax
  800420956e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209572:	90                   	nop
  8004209573:	c9                   	leaveq 
  8004209574:	c3                   	retq   

0000008004209575 <vcprintf>:
  8004209575:	55                   	push   %rbp
  8004209576:	48 89 e5             	mov    %rsp,%rbp
  8004209579:	48 83 ec 30          	sub    $0x30,%rsp
  800420957d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209581:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420958c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209590:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209594:	48 8b 0a             	mov    (%rdx),%rcx
  8004209597:	48 89 08             	mov    %rcx,(%rax)
  800420959a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420959e:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042095a2:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042095a6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042095aa:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  80042095ae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042095b2:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  80042095b6:	48 89 c6             	mov    %rax,%rsi
  80042095b9:	48 bf 46 95 20 04 80 	movabs $0x8004209546,%rdi
  80042095c0:	00 00 00 
  80042095c3:	48 b8 7c f5 20 04 80 	movabs $0x800420f57c,%rax
  80042095ca:	00 00 00 
  80042095cd:	ff d0                	callq  *%rax
  80042095cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042095d2:	c9                   	leaveq 
  80042095d3:	c3                   	retq   

00000080042095d4 <cprintf>:
  80042095d4:	55                   	push   %rbp
  80042095d5:	48 89 e5             	mov    %rsp,%rbp
  80042095d8:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  80042095df:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  80042095e6:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  80042095ed:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  80042095f4:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042095fb:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209602:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209609:	84 c0                	test   %al,%al
  800420960b:	74 20                	je     800420962d <cprintf+0x59>
  800420960d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209611:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209615:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209619:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420961d:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209621:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209625:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209629:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420962d:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209634:	00 00 00 
  8004209637:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420963e:	00 00 00 
  8004209641:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209645:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420964c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209653:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420965a:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209661:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209668:	48 8b 0a             	mov    (%rdx),%rcx
  800420966b:	48 89 08             	mov    %rcx,(%rax)
  800420966e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209672:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209676:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420967a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420967e:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209685:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420968c:	48 89 d6             	mov    %rdx,%rsi
  800420968f:	48 89 c7             	mov    %rax,%rdi
  8004209692:	48 b8 75 95 20 04 80 	movabs $0x8004209575,%rax
  8004209699:	00 00 00 
  800420969c:	ff d0                	callq  *%rax
  800420969e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  80042096a4:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  80042096aa:	c9                   	leaveq 
  80042096ab:	c3                   	retq   

00000080042096ac <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042096ac:	55                   	push   %rbp
  80042096ad:	48 89 e5             	mov    %rsp,%rbp
  80042096b0:	48 83 ec 20          	sub    $0x20,%rsp
  80042096b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042096b8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042096bb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042096bf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042096c2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042096c6:	f0 87 02             	lock xchg %eax,(%rdx)
  80042096c9:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042096cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042096cf:	c9                   	leaveq 
  80042096d0:	c3                   	retq   

00000080042096d1 <lock_kernel>:
  80042096d1:	55                   	push   %rbp
  80042096d2:	48 89 e5             	mov    %rsp,%rbp
  80042096d5:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  80042096dc:	00 00 00 
  80042096df:	48 b8 2e 74 21 04 80 	movabs $0x800421742e,%rax
  80042096e6:	00 00 00 
  80042096e9:	ff d0                	callq  *%rax
  80042096eb:	90                   	nop
  80042096ec:	5d                   	pop    %rbp
  80042096ed:	c3                   	retq   

00000080042096ee <trapname>:
  80042096ee:	55                   	push   %rbp
  80042096ef:	48 89 e5             	mov    %rsp,%rbp
  80042096f2:	48 83 ec 08          	sub    $0x8,%rsp
  80042096f6:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042096f9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042096fc:	83 f8 13             	cmp    $0x13,%eax
  80042096ff:	77 16                	ja     8004209717 <trapname+0x29>
  8004209701:	48 b8 e0 a2 21 04 80 	movabs $0x800421a2e0,%rax
  8004209708:	00 00 00 
  800420970b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420970e:	48 63 d2             	movslq %edx,%rdx
  8004209711:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209715:	eb 34                	jmp    800420974b <trapname+0x5d>
  8004209717:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  800420971b:	75 0c                	jne    8004209729 <trapname+0x3b>
  800420971d:	48 b8 e0 9e 21 04 80 	movabs $0x8004219ee0,%rax
  8004209724:	00 00 00 
  8004209727:	eb 22                	jmp    800420974b <trapname+0x5d>
  8004209729:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  800420972d:	7e 12                	jle    8004209741 <trapname+0x53>
  800420972f:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209733:	7f 0c                	jg     8004209741 <trapname+0x53>
  8004209735:	48 b8 ec 9e 21 04 80 	movabs $0x8004219eec,%rax
  800420973c:	00 00 00 
  800420973f:	eb 0a                	jmp    800420974b <trapname+0x5d>
  8004209741:	48 b8 ff 9e 21 04 80 	movabs $0x8004219eff,%rax
  8004209748:	00 00 00 
  800420974b:	c9                   	leaveq 
  800420974c:	c3                   	retq   

000000800420974d <trap_init>:
  800420974d:	55                   	push   %rbp
  800420974e:	48 89 e5             	mov    %rsp,%rbp
  8004209751:	48 83 ec 10          	sub    $0x10,%rsp
  8004209755:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420975c:	e9 8f 01 00 00       	jmpq   80042098f0 <trap_init+0x1a3>
  8004209761:	48 b8 26 d2 20 04 80 	movabs $0x800420d226,%rax
  8004209768:	00 00 00 
  800420976b:	89 c1                	mov    %eax,%ecx
  800420976d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209774:	00 00 00 
  8004209777:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420977a:	48 63 d2             	movslq %edx,%rdx
  800420977d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209781:	48 01 d0             	add    %rdx,%rax
  8004209784:	66 89 08             	mov    %cx,(%rax)
  8004209787:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420978e:	00 00 00 
  8004209791:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209794:	48 63 d2             	movslq %edx,%rdx
  8004209797:	48 c1 e2 04          	shl    $0x4,%rdx
  800420979b:	48 01 d0             	add    %rdx,%rax
  800420979e:	48 83 c0 02          	add    $0x2,%rax
  80042097a2:	66 c7 00 08 00       	movw   $0x8,(%rax)
  80042097a7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097ae:	00 00 00 
  80042097b1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097b4:	48 63 d2             	movslq %edx,%rdx
  80042097b7:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097bb:	48 01 d0             	add    %rdx,%rax
  80042097be:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042097c2:	83 e2 f8             	and    $0xfffffff8,%edx
  80042097c5:	88 50 04             	mov    %dl,0x4(%rax)
  80042097c8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097cf:	00 00 00 
  80042097d2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097d5:	48 63 d2             	movslq %edx,%rdx
  80042097d8:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097dc:	48 01 d0             	add    %rdx,%rax
  80042097df:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  80042097e3:	83 e2 07             	and    $0x7,%edx
  80042097e6:	88 50 04             	mov    %dl,0x4(%rax)
  80042097e9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042097f0:	00 00 00 
  80042097f3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042097f6:	48 63 d2             	movslq %edx,%rdx
  80042097f9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042097fd:	48 01 d0             	add    %rdx,%rax
  8004209800:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209804:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209807:	83 ca 0e             	or     $0xe,%edx
  800420980a:	88 50 05             	mov    %dl,0x5(%rax)
  800420980d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209814:	00 00 00 
  8004209817:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420981a:	48 63 d2             	movslq %edx,%rdx
  800420981d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209821:	48 01 d0             	add    %rdx,%rax
  8004209824:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209828:	83 e2 ef             	and    $0xffffffef,%edx
  800420982b:	88 50 05             	mov    %dl,0x5(%rax)
  800420982e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209835:	00 00 00 
  8004209838:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420983b:	48 63 d2             	movslq %edx,%rdx
  800420983e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209842:	48 01 d0             	add    %rdx,%rax
  8004209845:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209849:	83 e2 9f             	and    $0xffffff9f,%edx
  800420984c:	88 50 05             	mov    %dl,0x5(%rax)
  800420984f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209856:	00 00 00 
  8004209859:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420985c:	48 63 d2             	movslq %edx,%rdx
  800420985f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209863:	48 01 d0             	add    %rdx,%rax
  8004209866:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420986a:	83 ca 80             	or     $0xffffff80,%edx
  800420986d:	88 50 05             	mov    %dl,0x5(%rax)
  8004209870:	48 b8 26 d2 20 04 80 	movabs $0x800420d226,%rax
  8004209877:	00 00 00 
  800420987a:	48 c1 e8 10          	shr    $0x10,%rax
  800420987e:	89 c1                	mov    %eax,%ecx
  8004209880:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209887:	00 00 00 
  800420988a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420988d:	48 63 d2             	movslq %edx,%rdx
  8004209890:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209894:	48 01 d0             	add    %rdx,%rax
  8004209897:	48 83 c0 06          	add    $0x6,%rax
  800420989b:	66 89 08             	mov    %cx,(%rax)
  800420989e:	48 b8 26 d2 20 04 80 	movabs $0x800420d226,%rax
  80042098a5:	00 00 00 
  80042098a8:	48 c1 e8 20          	shr    $0x20,%rax
  80042098ac:	89 c1                	mov    %eax,%ecx
  80042098ae:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098b5:	00 00 00 
  80042098b8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042098bb:	48 63 d2             	movslq %edx,%rdx
  80042098be:	48 c1 e2 04          	shl    $0x4,%rdx
  80042098c2:	48 01 d0             	add    %rdx,%rax
  80042098c5:	48 83 c0 08          	add    $0x8,%rax
  80042098c9:	89 08                	mov    %ecx,(%rax)
  80042098cb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042098d2:	00 00 00 
  80042098d5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042098d8:	48 63 d2             	movslq %edx,%rdx
  80042098db:	48 c1 e2 04          	shl    $0x4,%rdx
  80042098df:	48 01 d0             	add    %rdx,%rax
  80042098e2:	48 83 c0 0c          	add    $0xc,%rax
  80042098e6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042098ec:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042098f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042098f3:	3d ff 00 00 00       	cmp    $0xff,%eax
  80042098f8:	0f 86 63 fe ff ff    	jbe    8004209761 <trap_init+0x14>
  80042098fe:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  8004209905:	00 00 00 
  8004209908:	89 c2                	mov    %eax,%edx
  800420990a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209911:	00 00 00 
  8004209914:	66 89 10             	mov    %dx,(%rax)
  8004209917:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420991e:	00 00 00 
  8004209921:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209927:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420992e:	00 00 00 
  8004209931:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209935:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209938:	88 50 04             	mov    %dl,0x4(%rax)
  800420993b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209942:	00 00 00 
  8004209945:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209949:	83 e2 07             	and    $0x7,%edx
  800420994c:	88 50 04             	mov    %dl,0x4(%rax)
  800420994f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209956:	00 00 00 
  8004209959:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420995d:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209960:	83 ca 0e             	or     $0xe,%edx
  8004209963:	88 50 05             	mov    %dl,0x5(%rax)
  8004209966:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420996d:	00 00 00 
  8004209970:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209974:	83 e2 ef             	and    $0xffffffef,%edx
  8004209977:	88 50 05             	mov    %dl,0x5(%rax)
  800420997a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209981:	00 00 00 
  8004209984:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209988:	83 e2 9f             	and    $0xffffff9f,%edx
  800420998b:	88 50 05             	mov    %dl,0x5(%rax)
  800420998e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209995:	00 00 00 
  8004209998:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420999c:	83 ca 80             	or     $0xffffff80,%edx
  800420999f:	88 50 05             	mov    %dl,0x5(%rax)
  80042099a2:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  80042099a9:	00 00 00 
  80042099ac:	48 c1 e8 10          	shr    $0x10,%rax
  80042099b0:	89 c2                	mov    %eax,%edx
  80042099b2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099b9:	00 00 00 
  80042099bc:	66 89 50 06          	mov    %dx,0x6(%rax)
  80042099c0:	48 b8 30 d1 20 04 80 	movabs $0x800420d130,%rax
  80042099c7:	00 00 00 
  80042099ca:	48 c1 e8 20          	shr    $0x20,%rax
  80042099ce:	89 c2                	mov    %eax,%edx
  80042099d0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099d7:	00 00 00 
  80042099da:	89 50 08             	mov    %edx,0x8(%rax)
  80042099dd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  80042099e4:	00 00 00 
  80042099e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  80042099ee:	48 b8 3a d1 20 04 80 	movabs $0x800420d13a,%rax
  80042099f5:	00 00 00 
  80042099f8:	89 c2                	mov    %eax,%edx
  80042099fa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a01:	00 00 00 
  8004209a04:	66 89 50 10          	mov    %dx,0x10(%rax)
  8004209a08:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a0f:	00 00 00 
  8004209a12:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  8004209a18:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a1f:	00 00 00 
  8004209a22:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004209a26:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209a29:	88 50 14             	mov    %dl,0x14(%rax)
  8004209a2c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a33:	00 00 00 
  8004209a36:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  8004209a3a:	83 e2 07             	and    $0x7,%edx
  8004209a3d:	88 50 14             	mov    %dl,0x14(%rax)
  8004209a40:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a47:	00 00 00 
  8004209a4a:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a4e:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209a51:	83 ca 0e             	or     $0xe,%edx
  8004209a54:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a57:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a5e:	00 00 00 
  8004209a61:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a65:	83 e2 ef             	and    $0xffffffef,%edx
  8004209a68:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a6b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a72:	00 00 00 
  8004209a75:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a79:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209a7c:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a7f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209a86:	00 00 00 
  8004209a89:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  8004209a8d:	83 ca 80             	or     $0xffffff80,%edx
  8004209a90:	88 50 15             	mov    %dl,0x15(%rax)
  8004209a93:	48 b8 3a d1 20 04 80 	movabs $0x800420d13a,%rax
  8004209a9a:	00 00 00 
  8004209a9d:	48 c1 e8 10          	shr    $0x10,%rax
  8004209aa1:	89 c2                	mov    %eax,%edx
  8004209aa3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209aaa:	00 00 00 
  8004209aad:	66 89 50 16          	mov    %dx,0x16(%rax)
  8004209ab1:	48 b8 3a d1 20 04 80 	movabs $0x800420d13a,%rax
  8004209ab8:	00 00 00 
  8004209abb:	48 c1 e8 20          	shr    $0x20,%rax
  8004209abf:	89 c2                	mov    %eax,%edx
  8004209ac1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ac8:	00 00 00 
  8004209acb:	89 50 18             	mov    %edx,0x18(%rax)
  8004209ace:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ad5:	00 00 00 
  8004209ad8:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  8004209adf:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  8004209ae6:	00 00 00 
  8004209ae9:	89 c2                	mov    %eax,%edx
  8004209aeb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209af2:	00 00 00 
  8004209af5:	66 89 50 20          	mov    %dx,0x20(%rax)
  8004209af9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b00:	00 00 00 
  8004209b03:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  8004209b09:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b10:	00 00 00 
  8004209b13:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209b17:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209b1a:	88 50 24             	mov    %dl,0x24(%rax)
  8004209b1d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b24:	00 00 00 
  8004209b27:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  8004209b2b:	83 e2 07             	and    $0x7,%edx
  8004209b2e:	88 50 24             	mov    %dl,0x24(%rax)
  8004209b31:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b38:	00 00 00 
  8004209b3b:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b3f:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209b42:	83 ca 0e             	or     $0xe,%edx
  8004209b45:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b48:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b4f:	00 00 00 
  8004209b52:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b56:	83 e2 ef             	and    $0xffffffef,%edx
  8004209b59:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b5c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b63:	00 00 00 
  8004209b66:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b6a:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209b6d:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b70:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b77:	00 00 00 
  8004209b7a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  8004209b7e:	83 ca 80             	or     $0xffffff80,%edx
  8004209b81:	88 50 25             	mov    %dl,0x25(%rax)
  8004209b84:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  8004209b8b:	00 00 00 
  8004209b8e:	48 c1 e8 10          	shr    $0x10,%rax
  8004209b92:	89 c2                	mov    %eax,%edx
  8004209b94:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209b9b:	00 00 00 
  8004209b9e:	66 89 50 26          	mov    %dx,0x26(%rax)
  8004209ba2:	48 b8 44 d1 20 04 80 	movabs $0x800420d144,%rax
  8004209ba9:	00 00 00 
  8004209bac:	48 c1 e8 20          	shr    $0x20,%rax
  8004209bb0:	89 c2                	mov    %eax,%edx
  8004209bb2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bb9:	00 00 00 
  8004209bbc:	89 50 28             	mov    %edx,0x28(%rax)
  8004209bbf:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bc6:	00 00 00 
  8004209bc9:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  8004209bd0:	48 b8 4e d1 20 04 80 	movabs $0x800420d14e,%rax
  8004209bd7:	00 00 00 
  8004209bda:	89 c2                	mov    %eax,%edx
  8004209bdc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209be3:	00 00 00 
  8004209be6:	66 89 50 30          	mov    %dx,0x30(%rax)
  8004209bea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209bf1:	00 00 00 
  8004209bf4:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  8004209bfa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c01:	00 00 00 
  8004209c04:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209c08:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209c0b:	88 50 34             	mov    %dl,0x34(%rax)
  8004209c0e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c15:	00 00 00 
  8004209c18:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  8004209c1c:	83 e2 07             	and    $0x7,%edx
  8004209c1f:	88 50 34             	mov    %dl,0x34(%rax)
  8004209c22:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c29:	00 00 00 
  8004209c2c:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c30:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209c33:	83 ca 0e             	or     $0xe,%edx
  8004209c36:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c39:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c40:	00 00 00 
  8004209c43:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c47:	83 e2 ef             	and    $0xffffffef,%edx
  8004209c4a:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c4d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c54:	00 00 00 
  8004209c57:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c5b:	83 ca 60             	or     $0x60,%edx
  8004209c5e:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c61:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c68:	00 00 00 
  8004209c6b:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  8004209c6f:	83 ca 80             	or     $0xffffff80,%edx
  8004209c72:	88 50 35             	mov    %dl,0x35(%rax)
  8004209c75:	48 b8 4e d1 20 04 80 	movabs $0x800420d14e,%rax
  8004209c7c:	00 00 00 
  8004209c7f:	48 c1 e8 10          	shr    $0x10,%rax
  8004209c83:	89 c2                	mov    %eax,%edx
  8004209c85:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209c8c:	00 00 00 
  8004209c8f:	66 89 50 36          	mov    %dx,0x36(%rax)
  8004209c93:	48 b8 4e d1 20 04 80 	movabs $0x800420d14e,%rax
  8004209c9a:	00 00 00 
  8004209c9d:	48 c1 e8 20          	shr    $0x20,%rax
  8004209ca1:	89 c2                	mov    %eax,%edx
  8004209ca3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209caa:	00 00 00 
  8004209cad:	89 50 38             	mov    %edx,0x38(%rax)
  8004209cb0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cb7:	00 00 00 
  8004209cba:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  8004209cc1:	48 b8 58 d1 20 04 80 	movabs $0x800420d158,%rax
  8004209cc8:	00 00 00 
  8004209ccb:	89 c2                	mov    %eax,%edx
  8004209ccd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cd4:	00 00 00 
  8004209cd7:	66 89 50 40          	mov    %dx,0x40(%rax)
  8004209cdb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ce2:	00 00 00 
  8004209ce5:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  8004209ceb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209cf2:	00 00 00 
  8004209cf5:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209cf9:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209cfc:	88 50 44             	mov    %dl,0x44(%rax)
  8004209cff:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d06:	00 00 00 
  8004209d09:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  8004209d0d:	83 e2 07             	and    $0x7,%edx
  8004209d10:	88 50 44             	mov    %dl,0x44(%rax)
  8004209d13:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d1a:	00 00 00 
  8004209d1d:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d21:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209d24:	83 ca 0e             	or     $0xe,%edx
  8004209d27:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d2a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d31:	00 00 00 
  8004209d34:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d38:	83 e2 ef             	and    $0xffffffef,%edx
  8004209d3b:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d3e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d45:	00 00 00 
  8004209d48:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d4c:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209d4f:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d52:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d59:	00 00 00 
  8004209d5c:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  8004209d60:	83 ca 80             	or     $0xffffff80,%edx
  8004209d63:	88 50 45             	mov    %dl,0x45(%rax)
  8004209d66:	48 b8 58 d1 20 04 80 	movabs $0x800420d158,%rax
  8004209d6d:	00 00 00 
  8004209d70:	48 c1 e8 10          	shr    $0x10,%rax
  8004209d74:	89 c2                	mov    %eax,%edx
  8004209d76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d7d:	00 00 00 
  8004209d80:	66 89 50 46          	mov    %dx,0x46(%rax)
  8004209d84:	48 b8 58 d1 20 04 80 	movabs $0x800420d158,%rax
  8004209d8b:	00 00 00 
  8004209d8e:	48 c1 e8 20          	shr    $0x20,%rax
  8004209d92:	89 c2                	mov    %eax,%edx
  8004209d94:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209d9b:	00 00 00 
  8004209d9e:	89 50 48             	mov    %edx,0x48(%rax)
  8004209da1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209da8:	00 00 00 
  8004209dab:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  8004209db2:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  8004209db9:	00 00 00 
  8004209dbc:	89 c2                	mov    %eax,%edx
  8004209dbe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209dc5:	00 00 00 
  8004209dc8:	66 89 50 50          	mov    %dx,0x50(%rax)
  8004209dcc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209dd3:	00 00 00 
  8004209dd6:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  8004209ddc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209de3:	00 00 00 
  8004209de6:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209dea:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ded:	88 50 54             	mov    %dl,0x54(%rax)
  8004209df0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209df7:	00 00 00 
  8004209dfa:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  8004209dfe:	83 e2 07             	and    $0x7,%edx
  8004209e01:	88 50 54             	mov    %dl,0x54(%rax)
  8004209e04:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e0b:	00 00 00 
  8004209e0e:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e12:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209e15:	83 ca 0e             	or     $0xe,%edx
  8004209e18:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e1b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e22:	00 00 00 
  8004209e25:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e29:	83 e2 ef             	and    $0xffffffef,%edx
  8004209e2c:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e2f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e36:	00 00 00 
  8004209e39:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e3d:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209e40:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e43:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e4a:	00 00 00 
  8004209e4d:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  8004209e51:	83 ca 80             	or     $0xffffff80,%edx
  8004209e54:	88 50 55             	mov    %dl,0x55(%rax)
  8004209e57:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  8004209e5e:	00 00 00 
  8004209e61:	48 c1 e8 10          	shr    $0x10,%rax
  8004209e65:	89 c2                	mov    %eax,%edx
  8004209e67:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e6e:	00 00 00 
  8004209e71:	66 89 50 56          	mov    %dx,0x56(%rax)
  8004209e75:	48 b8 62 d1 20 04 80 	movabs $0x800420d162,%rax
  8004209e7c:	00 00 00 
  8004209e7f:	48 c1 e8 20          	shr    $0x20,%rax
  8004209e83:	89 c2                	mov    %eax,%edx
  8004209e85:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e8c:	00 00 00 
  8004209e8f:	89 50 58             	mov    %edx,0x58(%rax)
  8004209e92:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209e99:	00 00 00 
  8004209e9c:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  8004209ea3:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  8004209eaa:	00 00 00 
  8004209ead:	89 c2                	mov    %eax,%edx
  8004209eaf:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209eb6:	00 00 00 
  8004209eb9:	66 89 50 60          	mov    %dx,0x60(%rax)
  8004209ebd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ec4:	00 00 00 
  8004209ec7:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  8004209ecd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ed4:	00 00 00 
  8004209ed7:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209edb:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209ede:	88 50 64             	mov    %dl,0x64(%rax)
  8004209ee1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209ee8:	00 00 00 
  8004209eeb:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  8004209eef:	83 e2 07             	and    $0x7,%edx
  8004209ef2:	88 50 64             	mov    %dl,0x64(%rax)
  8004209ef5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209efc:	00 00 00 
  8004209eff:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f03:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209f06:	83 ca 0e             	or     $0xe,%edx
  8004209f09:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f0c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f13:	00 00 00 
  8004209f16:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f1a:	83 e2 ef             	and    $0xffffffef,%edx
  8004209f1d:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f20:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f27:	00 00 00 
  8004209f2a:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f2e:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209f31:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f34:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f3b:	00 00 00 
  8004209f3e:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  8004209f42:	83 ca 80             	or     $0xffffff80,%edx
  8004209f45:	88 50 65             	mov    %dl,0x65(%rax)
  8004209f48:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  8004209f4f:	00 00 00 
  8004209f52:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f56:	89 c2                	mov    %eax,%edx
  8004209f58:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f5f:	00 00 00 
  8004209f62:	66 89 50 66          	mov    %dx,0x66(%rax)
  8004209f66:	48 b8 6c d1 20 04 80 	movabs $0x800420d16c,%rax
  8004209f6d:	00 00 00 
  8004209f70:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f74:	89 c2                	mov    %eax,%edx
  8004209f76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f7d:	00 00 00 
  8004209f80:	89 50 68             	mov    %edx,0x68(%rax)
  8004209f83:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209f8a:	00 00 00 
  8004209f8d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  8004209f94:	48 b8 76 d1 20 04 80 	movabs $0x800420d176,%rax
  8004209f9b:	00 00 00 
  8004209f9e:	89 c2                	mov    %eax,%edx
  8004209fa0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fa7:	00 00 00 
  8004209faa:	66 89 50 70          	mov    %dx,0x70(%rax)
  8004209fae:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fb5:	00 00 00 
  8004209fb8:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  8004209fbe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fc5:	00 00 00 
  8004209fc8:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209fcc:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fcf:	88 50 74             	mov    %dl,0x74(%rax)
  8004209fd2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fd9:	00 00 00 
  8004209fdc:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  8004209fe0:	83 e2 07             	and    $0x7,%edx
  8004209fe3:	88 50 74             	mov    %dl,0x74(%rax)
  8004209fe6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  8004209fed:	00 00 00 
  8004209ff0:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  8004209ff4:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ff7:	83 ca 0e             	or     $0xe,%edx
  8004209ffa:	88 50 75             	mov    %dl,0x75(%rax)
  8004209ffd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a004:	00 00 00 
  800420a007:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a00b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a00e:	88 50 75             	mov    %dl,0x75(%rax)
  800420a011:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a018:	00 00 00 
  800420a01b:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a01f:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a022:	88 50 75             	mov    %dl,0x75(%rax)
  800420a025:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a02c:	00 00 00 
  800420a02f:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a033:	83 ca 80             	or     $0xffffff80,%edx
  800420a036:	88 50 75             	mov    %dl,0x75(%rax)
  800420a039:	48 b8 76 d1 20 04 80 	movabs $0x800420d176,%rax
  800420a040:	00 00 00 
  800420a043:	48 c1 e8 10          	shr    $0x10,%rax
  800420a047:	89 c2                	mov    %eax,%edx
  800420a049:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a050:	00 00 00 
  800420a053:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a057:	48 b8 76 d1 20 04 80 	movabs $0x800420d176,%rax
  800420a05e:	00 00 00 
  800420a061:	48 c1 e8 20          	shr    $0x20,%rax
  800420a065:	89 c2                	mov    %eax,%edx
  800420a067:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a06e:	00 00 00 
  800420a071:	89 50 78             	mov    %edx,0x78(%rax)
  800420a074:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a07b:	00 00 00 
  800420a07e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a085:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a08c:	00 00 00 
  800420a08f:	89 c2                	mov    %eax,%edx
  800420a091:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a098:	00 00 00 
  800420a09b:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a0a2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0a9:	00 00 00 
  800420a0ac:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a0b3:	08 00 
  800420a0b5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0bc:	00 00 00 
  800420a0bf:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a0c6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0c9:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a0cf:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0d6:	00 00 00 
  800420a0d9:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a0e0:	83 e2 07             	and    $0x7,%edx
  800420a0e3:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a0e9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a0f0:	00 00 00 
  800420a0f3:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a0fa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0fd:	83 ca 0e             	or     $0xe,%edx
  800420a100:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a106:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a10d:	00 00 00 
  800420a110:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a117:	83 e2 ef             	and    $0xffffffef,%edx
  800420a11a:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a120:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a127:	00 00 00 
  800420a12a:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a131:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a134:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a13a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a141:	00 00 00 
  800420a144:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a14b:	83 ca 80             	or     $0xffffff80,%edx
  800420a14e:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a154:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a15b:	00 00 00 
  800420a15e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a162:	89 c2                	mov    %eax,%edx
  800420a164:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a16b:	00 00 00 
  800420a16e:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a175:	48 b8 80 d1 20 04 80 	movabs $0x800420d180,%rax
  800420a17c:	00 00 00 
  800420a17f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a183:	89 c2                	mov    %eax,%edx
  800420a185:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a18c:	00 00 00 
  800420a18f:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a195:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a19c:	00 00 00 
  800420a19f:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a1a6:	00 00 00 
  800420a1a9:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a1b0:	00 00 00 
  800420a1b3:	89 c2                	mov    %eax,%edx
  800420a1b5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1bc:	00 00 00 
  800420a1bf:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a1c6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1cd:	00 00 00 
  800420a1d0:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a1d7:	08 00 
  800420a1d9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1e0:	00 00 00 
  800420a1e3:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a1ea:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1ed:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a1f3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a1fa:	00 00 00 
  800420a1fd:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a204:	83 e2 07             	and    $0x7,%edx
  800420a207:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a20d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a214:	00 00 00 
  800420a217:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a21e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a221:	83 ca 0e             	or     $0xe,%edx
  800420a224:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a22a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a231:	00 00 00 
  800420a234:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a23b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a23e:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a244:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a24b:	00 00 00 
  800420a24e:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a255:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a258:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a25e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a265:	00 00 00 
  800420a268:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a26f:	83 ca 80             	or     $0xffffff80,%edx
  800420a272:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a278:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a27f:	00 00 00 
  800420a282:	48 c1 e8 10          	shr    $0x10,%rax
  800420a286:	89 c2                	mov    %eax,%edx
  800420a288:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a28f:	00 00 00 
  800420a292:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a299:	48 b8 88 d1 20 04 80 	movabs $0x800420d188,%rax
  800420a2a0:	00 00 00 
  800420a2a3:	48 c1 e8 20          	shr    $0x20,%rax
  800420a2a7:	89 c2                	mov    %eax,%edx
  800420a2a9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2b0:	00 00 00 
  800420a2b3:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a2b9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2c0:	00 00 00 
  800420a2c3:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a2ca:	00 00 00 
  800420a2cd:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a2d4:	00 00 00 
  800420a2d7:	89 c2                	mov    %eax,%edx
  800420a2d9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2e0:	00 00 00 
  800420a2e3:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a2ea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a2f1:	00 00 00 
  800420a2f4:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a2fb:	08 00 
  800420a2fd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a304:	00 00 00 
  800420a307:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a30e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a311:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a317:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a31e:	00 00 00 
  800420a321:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a328:	83 e2 07             	and    $0x7,%edx
  800420a32b:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a331:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a338:	00 00 00 
  800420a33b:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a342:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a345:	83 ca 0e             	or     $0xe,%edx
  800420a348:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a34e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a355:	00 00 00 
  800420a358:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a35f:	83 e2 ef             	and    $0xffffffef,%edx
  800420a362:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a368:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a36f:	00 00 00 
  800420a372:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a379:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a37c:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a382:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a389:	00 00 00 
  800420a38c:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a393:	83 ca 80             	or     $0xffffff80,%edx
  800420a396:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a39c:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a3a3:	00 00 00 
  800420a3a6:	48 c1 e8 10          	shr    $0x10,%rax
  800420a3aa:	89 c2                	mov    %eax,%edx
  800420a3ac:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3b3:	00 00 00 
  800420a3b6:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a3bd:	48 b8 90 d1 20 04 80 	movabs $0x800420d190,%rax
  800420a3c4:	00 00 00 
  800420a3c7:	48 c1 e8 20          	shr    $0x20,%rax
  800420a3cb:	89 c2                	mov    %eax,%edx
  800420a3cd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3d4:	00 00 00 
  800420a3d7:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420a3dd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a3e4:	00 00 00 
  800420a3e7:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420a3ee:	00 00 00 
  800420a3f1:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420a3f8:	00 00 00 
  800420a3fb:	89 c2                	mov    %eax,%edx
  800420a3fd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a404:	00 00 00 
  800420a407:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420a40e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a415:	00 00 00 
  800420a418:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420a41f:	08 00 
  800420a421:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a428:	00 00 00 
  800420a42b:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a432:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a435:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a43b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a442:	00 00 00 
  800420a445:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420a44c:	83 e2 07             	and    $0x7,%edx
  800420a44f:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420a455:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a45c:	00 00 00 
  800420a45f:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a466:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a469:	83 ca 0e             	or     $0xe,%edx
  800420a46c:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a472:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a479:	00 00 00 
  800420a47c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a483:	83 e2 ef             	and    $0xffffffef,%edx
  800420a486:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a48c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a493:	00 00 00 
  800420a496:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a49d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4a0:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a4a6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4ad:	00 00 00 
  800420a4b0:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420a4b7:	83 ca 80             	or     $0xffffff80,%edx
  800420a4ba:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420a4c0:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420a4c7:	00 00 00 
  800420a4ca:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4ce:	89 c2                	mov    %eax,%edx
  800420a4d0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4d7:	00 00 00 
  800420a4da:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420a4e1:	48 b8 98 d1 20 04 80 	movabs $0x800420d198,%rax
  800420a4e8:	00 00 00 
  800420a4eb:	48 c1 e8 20          	shr    $0x20,%rax
  800420a4ef:	89 c2                	mov    %eax,%edx
  800420a4f1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a4f8:	00 00 00 
  800420a4fb:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420a501:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a508:	00 00 00 
  800420a50b:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420a512:	00 00 00 
  800420a515:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420a51c:	00 00 00 
  800420a51f:	89 c2                	mov    %eax,%edx
  800420a521:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a528:	00 00 00 
  800420a52b:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420a532:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a539:	00 00 00 
  800420a53c:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420a543:	08 00 
  800420a545:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a54c:	00 00 00 
  800420a54f:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a556:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a559:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a55f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a566:	00 00 00 
  800420a569:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420a570:	83 e2 07             	and    $0x7,%edx
  800420a573:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420a579:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a580:	00 00 00 
  800420a583:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a58a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a58d:	83 ca 0e             	or     $0xe,%edx
  800420a590:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a596:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a59d:	00 00 00 
  800420a5a0:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a5a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5aa:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a5b0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a5c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5c4:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a5ca:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5d1:	00 00 00 
  800420a5d4:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420a5db:	83 ca 80             	or     $0xffffff80,%edx
  800420a5de:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420a5e4:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420a5eb:	00 00 00 
  800420a5ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5f2:	89 c2                	mov    %eax,%edx
  800420a5f4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a5fb:	00 00 00 
  800420a5fe:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420a605:	48 b8 a0 d1 20 04 80 	movabs $0x800420d1a0,%rax
  800420a60c:	00 00 00 
  800420a60f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a613:	89 c2                	mov    %eax,%edx
  800420a615:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a61c:	00 00 00 
  800420a61f:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420a625:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a62c:	00 00 00 
  800420a62f:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420a636:	00 00 00 
  800420a639:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420a640:	00 00 00 
  800420a643:	89 c2                	mov    %eax,%edx
  800420a645:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a64c:	00 00 00 
  800420a64f:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420a656:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a65d:	00 00 00 
  800420a660:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420a667:	08 00 
  800420a669:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a670:	00 00 00 
  800420a673:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a67a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a67d:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a683:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a68a:	00 00 00 
  800420a68d:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420a694:	83 e2 07             	and    $0x7,%edx
  800420a697:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420a69d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6a4:	00 00 00 
  800420a6a7:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a6b1:	83 ca 0e             	or     $0xe,%edx
  800420a6b4:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6ba:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6c1:	00 00 00 
  800420a6c4:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a6ce:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6d4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6db:	00 00 00 
  800420a6de:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6e8:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a6ee:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a6f5:	00 00 00 
  800420a6f8:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420a6ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a702:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420a708:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420a70f:	00 00 00 
  800420a712:	48 c1 e8 10          	shr    $0x10,%rax
  800420a716:	89 c2                	mov    %eax,%edx
  800420a718:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a71f:	00 00 00 
  800420a722:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420a729:	48 b8 a8 d1 20 04 80 	movabs $0x800420d1a8,%rax
  800420a730:	00 00 00 
  800420a733:	48 c1 e8 20          	shr    $0x20,%rax
  800420a737:	89 c2                	mov    %eax,%edx
  800420a739:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a740:	00 00 00 
  800420a743:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420a749:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a750:	00 00 00 
  800420a753:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420a75a:	00 00 00 
  800420a75d:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420a764:	00 00 00 
  800420a767:	89 c2                	mov    %eax,%edx
  800420a769:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a770:	00 00 00 
  800420a773:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420a77a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a781:	00 00 00 
  800420a784:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420a78b:	08 00 
  800420a78d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a794:	00 00 00 
  800420a797:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a79e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a7a1:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a7a7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7ae:	00 00 00 
  800420a7b1:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420a7b8:	83 e2 07             	and    $0x7,%edx
  800420a7bb:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420a7c1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7c8:	00 00 00 
  800420a7cb:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a7d5:	83 ca 0e             	or     $0xe,%edx
  800420a7d8:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7de:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7e5:	00 00 00 
  800420a7e8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a7ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7f2:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a7f8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a7ff:	00 00 00 
  800420a802:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a809:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a80c:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a812:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a819:	00 00 00 
  800420a81c:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420a823:	83 ca 80             	or     $0xffffff80,%edx
  800420a826:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420a82c:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420a833:	00 00 00 
  800420a836:	48 c1 e8 10          	shr    $0x10,%rax
  800420a83a:	89 c2                	mov    %eax,%edx
  800420a83c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a843:	00 00 00 
  800420a846:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420a84d:	48 b8 b0 d1 20 04 80 	movabs $0x800420d1b0,%rax
  800420a854:	00 00 00 
  800420a857:	48 c1 e8 20          	shr    $0x20,%rax
  800420a85b:	89 c2                	mov    %eax,%edx
  800420a85d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a864:	00 00 00 
  800420a867:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420a86d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a874:	00 00 00 
  800420a877:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420a87e:	00 00 00 
  800420a881:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  800420a888:	00 00 00 
  800420a88b:	89 c2                	mov    %eax,%edx
  800420a88d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a894:	00 00 00 
  800420a897:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420a89e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8a5:	00 00 00 
  800420a8a8:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420a8af:	08 00 
  800420a8b1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8b8:	00 00 00 
  800420a8bb:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a8c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a8c5:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a8cb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8d2:	00 00 00 
  800420a8d5:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420a8dc:	83 e2 07             	and    $0x7,%edx
  800420a8df:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420a8e5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a8ec:	00 00 00 
  800420a8ef:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a8f6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8f9:	83 ca 0e             	or     $0xe,%edx
  800420a8fc:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a902:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a909:	00 00 00 
  800420a90c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a913:	83 e2 ef             	and    $0xffffffef,%edx
  800420a916:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a91c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a923:	00 00 00 
  800420a926:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a92d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a930:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a936:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a93d:	00 00 00 
  800420a940:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420a947:	83 ca 80             	or     $0xffffff80,%edx
  800420a94a:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420a950:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  800420a957:	00 00 00 
  800420a95a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a95e:	89 c2                	mov    %eax,%edx
  800420a960:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a967:	00 00 00 
  800420a96a:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420a971:	48 b8 b6 d1 20 04 80 	movabs $0x800420d1b6,%rax
  800420a978:	00 00 00 
  800420a97b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a97f:	89 c2                	mov    %eax,%edx
  800420a981:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a988:	00 00 00 
  800420a98b:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420a991:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a998:	00 00 00 
  800420a99b:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420a9a2:	00 00 00 
  800420a9a5:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420a9ac:	00 00 00 
  800420a9af:	89 c2                	mov    %eax,%edx
  800420a9b1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9b8:	00 00 00 
  800420a9bb:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420a9c2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9c9:	00 00 00 
  800420a9cc:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420a9d3:	08 00 
  800420a9d5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9dc:	00 00 00 
  800420a9df:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420a9e6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9e9:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420a9ef:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420a9f6:	00 00 00 
  800420a9f9:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420aa00:	83 e2 07             	and    $0x7,%edx
  800420aa03:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420aa09:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa10:	00 00 00 
  800420aa13:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aa1d:	83 ca 0e             	or     $0xe,%edx
  800420aa20:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa26:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa2d:	00 00 00 
  800420aa30:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa37:	83 e2 ef             	and    $0xffffffef,%edx
  800420aa3a:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa40:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa47:	00 00 00 
  800420aa4a:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa54:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa5a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa61:	00 00 00 
  800420aa64:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420aa6b:	83 ca 80             	or     $0xffffff80,%edx
  800420aa6e:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420aa74:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420aa7b:	00 00 00 
  800420aa7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa82:	89 c2                	mov    %eax,%edx
  800420aa84:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aa8b:	00 00 00 
  800420aa8e:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420aa95:	48 b8 ba d1 20 04 80 	movabs $0x800420d1ba,%rax
  800420aa9c:	00 00 00 
  800420aa9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aaa3:	89 c2                	mov    %eax,%edx
  800420aaa5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aaac:	00 00 00 
  800420aaaf:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420aab5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aabc:	00 00 00 
  800420aabf:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420aac6:	00 00 00 
  800420aac9:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420aad0:	00 00 00 
  800420aad3:	89 c2                	mov    %eax,%edx
  800420aad5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aadc:	00 00 00 
  800420aadf:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420aae6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aaed:	00 00 00 
  800420aaf0:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420aaf7:	08 00 
  800420aaf9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab00:	00 00 00 
  800420ab03:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420ab0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ab0d:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420ab13:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab1a:	00 00 00 
  800420ab1d:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420ab24:	83 e2 07             	and    $0x7,%edx
  800420ab27:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420ab2d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab34:	00 00 00 
  800420ab37:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab41:	83 ca 0e             	or     $0xe,%edx
  800420ab44:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab4a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab51:	00 00 00 
  800420ab54:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab5e:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab64:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab6b:	00 00 00 
  800420ab6e:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab78:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab7e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ab85:	00 00 00 
  800420ab88:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420ab8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ab92:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420ab98:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420ab9f:	00 00 00 
  800420aba2:	48 c1 e8 10          	shr    $0x10,%rax
  800420aba6:	89 c2                	mov    %eax,%edx
  800420aba8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abaf:	00 00 00 
  800420abb2:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420abb9:	48 b8 c0 d1 20 04 80 	movabs $0x800420d1c0,%rax
  800420abc0:	00 00 00 
  800420abc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420abc7:	89 c2                	mov    %eax,%edx
  800420abc9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abd0:	00 00 00 
  800420abd3:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420abd9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420abe0:	00 00 00 
  800420abe3:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420abea:	00 00 00 
  800420abed:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  800420abf4:	00 00 00 
  800420abf7:	89 c2                	mov    %eax,%edx
  800420abf9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac00:	00 00 00 
  800420ac03:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420ac0a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac11:	00 00 00 
  800420ac14:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420ac1b:	08 00 
  800420ac1d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac24:	00 00 00 
  800420ac27:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ac2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ac31:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ac37:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac3e:	00 00 00 
  800420ac41:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420ac48:	83 e2 07             	and    $0x7,%edx
  800420ac4b:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420ac51:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac58:	00 00 00 
  800420ac5b:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac65:	83 ca 0e             	or     $0xe,%edx
  800420ac68:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac6e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac75:	00 00 00 
  800420ac78:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac82:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420ac88:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ac8f:	00 00 00 
  800420ac92:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420ac99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac9c:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420aca2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aca9:	00 00 00 
  800420acac:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420acb3:	83 ca 80             	or     $0xffffff80,%edx
  800420acb6:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420acbc:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  800420acc3:	00 00 00 
  800420acc6:	48 c1 e8 10          	shr    $0x10,%rax
  800420acca:	89 c2                	mov    %eax,%edx
  800420accc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420acd3:	00 00 00 
  800420acd6:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420acdd:	48 b8 c6 d1 20 04 80 	movabs $0x800420d1c6,%rax
  800420ace4:	00 00 00 
  800420ace7:	48 c1 e8 20          	shr    $0x20,%rax
  800420aceb:	89 c2                	mov    %eax,%edx
  800420aced:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420acf4:	00 00 00 
  800420acf7:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420acfd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad04:	00 00 00 
  800420ad07:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420ad0e:	00 00 00 
  800420ad11:	48 b8 cc d1 20 04 80 	movabs $0x800420d1cc,%rax
  800420ad18:	00 00 00 
  800420ad1b:	89 c2                	mov    %eax,%edx
  800420ad1d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad24:	00 00 00 
  800420ad27:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420ad2e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad35:	00 00 00 
  800420ad38:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420ad3f:	08 00 
  800420ad41:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad48:	00 00 00 
  800420ad4b:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad55:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad5b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad62:	00 00 00 
  800420ad65:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420ad6c:	83 e2 07             	and    $0x7,%edx
  800420ad6f:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420ad75:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad7c:	00 00 00 
  800420ad7f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ad86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad89:	83 ca 0e             	or     $0xe,%edx
  800420ad8c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ad92:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ad99:	00 00 00 
  800420ad9c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420ada3:	83 e2 ef             	and    $0xffffffef,%edx
  800420ada6:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420adac:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420adb3:	00 00 00 
  800420adb6:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420adbd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420adc0:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420adc6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420adcd:	00 00 00 
  800420add0:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420add7:	83 ca 80             	or     $0xffffff80,%edx
  800420adda:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420ade0:	48 b8 cc d1 20 04 80 	movabs $0x800420d1cc,%rax
  800420ade7:	00 00 00 
  800420adea:	48 c1 e8 10          	shr    $0x10,%rax
  800420adee:	89 c2                	mov    %eax,%edx
  800420adf0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420adf7:	00 00 00 
  800420adfa:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420ae01:	48 b8 cc d1 20 04 80 	movabs $0x800420d1cc,%rax
  800420ae08:	00 00 00 
  800420ae0b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ae0f:	89 c2                	mov    %eax,%edx
  800420ae11:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae18:	00 00 00 
  800420ae1b:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420ae21:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae28:	00 00 00 
  800420ae2b:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420ae32:	00 00 00 
  800420ae35:	48 b8 d2 d1 20 04 80 	movabs $0x800420d1d2,%rax
  800420ae3c:	00 00 00 
  800420ae3f:	89 c2                	mov    %eax,%edx
  800420ae41:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae48:	00 00 00 
  800420ae4b:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420ae52:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae59:	00 00 00 
  800420ae5c:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420ae63:	08 00 
  800420ae65:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae6c:	00 00 00 
  800420ae6f:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae76:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae79:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae7f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ae86:	00 00 00 
  800420ae89:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420ae90:	83 e2 07             	and    $0x7,%edx
  800420ae93:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420ae99:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aea0:	00 00 00 
  800420aea3:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aeaa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aead:	83 ca 0e             	or     $0xe,%edx
  800420aeb0:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aeb6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aebd:	00 00 00 
  800420aec0:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aec7:	83 e2 ef             	and    $0xffffffef,%edx
  800420aeca:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aed0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aed7:	00 00 00 
  800420aeda:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aee1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aee4:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420aeea:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420aef1:	00 00 00 
  800420aef4:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420aefb:	83 ca 80             	or     $0xffffff80,%edx
  800420aefe:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420af04:	48 b8 d2 d1 20 04 80 	movabs $0x800420d1d2,%rax
  800420af0b:	00 00 00 
  800420af0e:	48 c1 e8 10          	shr    $0x10,%rax
  800420af12:	89 c2                	mov    %eax,%edx
  800420af14:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af1b:	00 00 00 
  800420af1e:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420af25:	48 b8 d2 d1 20 04 80 	movabs $0x800420d1d2,%rax
  800420af2c:	00 00 00 
  800420af2f:	48 c1 e8 20          	shr    $0x20,%rax
  800420af33:	89 c2                	mov    %eax,%edx
  800420af35:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af3c:	00 00 00 
  800420af3f:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420af45:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af4c:	00 00 00 
  800420af4f:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420af56:	00 00 00 
  800420af59:	48 b8 d8 d1 20 04 80 	movabs $0x800420d1d8,%rax
  800420af60:	00 00 00 
  800420af63:	89 c2                	mov    %eax,%edx
  800420af65:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af6c:	00 00 00 
  800420af6f:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420af76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af7d:	00 00 00 
  800420af80:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420af87:	08 00 
  800420af89:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420af90:	00 00 00 
  800420af93:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420af9a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af9d:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420afa3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afaa:	00 00 00 
  800420afad:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420afb4:	83 e2 07             	and    $0x7,%edx
  800420afb7:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420afbd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afc4:	00 00 00 
  800420afc7:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420afd1:	83 ca 0e             	or     $0xe,%edx
  800420afd4:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420afda:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420afe1:	00 00 00 
  800420afe4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420afeb:	83 e2 ef             	and    $0xffffffef,%edx
  800420afee:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420aff4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420affb:	00 00 00 
  800420affe:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b005:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b008:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b00e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b015:	00 00 00 
  800420b018:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b01f:	83 ca 80             	or     $0xffffff80,%edx
  800420b022:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b028:	48 b8 d8 d1 20 04 80 	movabs $0x800420d1d8,%rax
  800420b02f:	00 00 00 
  800420b032:	48 c1 e8 10          	shr    $0x10,%rax
  800420b036:	89 c2                	mov    %eax,%edx
  800420b038:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b03f:	00 00 00 
  800420b042:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b049:	48 b8 d8 d1 20 04 80 	movabs $0x800420d1d8,%rax
  800420b050:	00 00 00 
  800420b053:	48 c1 e8 20          	shr    $0x20,%rax
  800420b057:	89 c2                	mov    %eax,%edx
  800420b059:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b060:	00 00 00 
  800420b063:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b069:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b070:	00 00 00 
  800420b073:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b07a:	00 00 00 
  800420b07d:	48 b8 de d1 20 04 80 	movabs $0x800420d1de,%rax
  800420b084:	00 00 00 
  800420b087:	89 c2                	mov    %eax,%edx
  800420b089:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b090:	00 00 00 
  800420b093:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b09a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0a1:	00 00 00 
  800420b0a4:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b0ab:	08 00 
  800420b0ad:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0b4:	00 00 00 
  800420b0b7:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b0be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b0c1:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b0c7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0ce:	00 00 00 
  800420b0d1:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b0d8:	83 e2 07             	and    $0x7,%edx
  800420b0db:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b0e1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b0e8:	00 00 00 
  800420b0eb:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b0f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0f5:	83 ca 0e             	or     $0xe,%edx
  800420b0f8:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b0fe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b105:	00 00 00 
  800420b108:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b10f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b112:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b118:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b11f:	00 00 00 
  800420b122:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b129:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b12c:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b132:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b139:	00 00 00 
  800420b13c:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b143:	83 ca 80             	or     $0xffffff80,%edx
  800420b146:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b14c:	48 b8 de d1 20 04 80 	movabs $0x800420d1de,%rax
  800420b153:	00 00 00 
  800420b156:	48 c1 e8 10          	shr    $0x10,%rax
  800420b15a:	89 c2                	mov    %eax,%edx
  800420b15c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b163:	00 00 00 
  800420b166:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b16d:	48 b8 de d1 20 04 80 	movabs $0x800420d1de,%rax
  800420b174:	00 00 00 
  800420b177:	48 c1 e8 20          	shr    $0x20,%rax
  800420b17b:	89 c2                	mov    %eax,%edx
  800420b17d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b184:	00 00 00 
  800420b187:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b18d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b194:	00 00 00 
  800420b197:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b19e:	00 00 00 
  800420b1a1:	48 b8 e4 d1 20 04 80 	movabs $0x800420d1e4,%rax
  800420b1a8:	00 00 00 
  800420b1ab:	89 c2                	mov    %eax,%edx
  800420b1ad:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1b4:	00 00 00 
  800420b1b7:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b1be:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1c5:	00 00 00 
  800420b1c8:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b1cf:	08 00 
  800420b1d1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1d8:	00 00 00 
  800420b1db:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b1e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b1e5:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b1eb:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b1f2:	00 00 00 
  800420b1f5:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b1fc:	83 e2 07             	and    $0x7,%edx
  800420b1ff:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b205:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b20c:	00 00 00 
  800420b20f:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b216:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b219:	83 ca 0e             	or     $0xe,%edx
  800420b21c:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b222:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b229:	00 00 00 
  800420b22c:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b233:	83 e2 ef             	and    $0xffffffef,%edx
  800420b236:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b23c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b243:	00 00 00 
  800420b246:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b24d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b250:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b256:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b25d:	00 00 00 
  800420b260:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b267:	83 ca 80             	or     $0xffffff80,%edx
  800420b26a:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b270:	48 b8 e4 d1 20 04 80 	movabs $0x800420d1e4,%rax
  800420b277:	00 00 00 
  800420b27a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b27e:	89 c2                	mov    %eax,%edx
  800420b280:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b287:	00 00 00 
  800420b28a:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b291:	48 b8 e4 d1 20 04 80 	movabs $0x800420d1e4,%rax
  800420b298:	00 00 00 
  800420b29b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b29f:	89 c2                	mov    %eax,%edx
  800420b2a1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2a8:	00 00 00 
  800420b2ab:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b2b1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2b8:	00 00 00 
  800420b2bb:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b2c2:	00 00 00 
  800420b2c5:	48 b8 ea d1 20 04 80 	movabs $0x800420d1ea,%rax
  800420b2cc:	00 00 00 
  800420b2cf:	89 c2                	mov    %eax,%edx
  800420b2d1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2d8:	00 00 00 
  800420b2db:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b2e2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2e9:	00 00 00 
  800420b2ec:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b2f3:	08 00 
  800420b2f5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b2fc:	00 00 00 
  800420b2ff:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b306:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b309:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b30f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b316:	00 00 00 
  800420b319:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b320:	83 e2 07             	and    $0x7,%edx
  800420b323:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b329:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b330:	00 00 00 
  800420b333:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b33a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b33d:	83 ca 0e             	or     $0xe,%edx
  800420b340:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b346:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b34d:	00 00 00 
  800420b350:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b357:	83 e2 ef             	and    $0xffffffef,%edx
  800420b35a:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b360:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b367:	00 00 00 
  800420b36a:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b371:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b374:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b37a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b381:	00 00 00 
  800420b384:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b38b:	83 ca 80             	or     $0xffffff80,%edx
  800420b38e:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b394:	48 b8 ea d1 20 04 80 	movabs $0x800420d1ea,%rax
  800420b39b:	00 00 00 
  800420b39e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b3a2:	89 c2                	mov    %eax,%edx
  800420b3a4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3ab:	00 00 00 
  800420b3ae:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b3b5:	48 b8 ea d1 20 04 80 	movabs $0x800420d1ea,%rax
  800420b3bc:	00 00 00 
  800420b3bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b3c3:	89 c2                	mov    %eax,%edx
  800420b3c5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3cc:	00 00 00 
  800420b3cf:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420b3d5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3dc:	00 00 00 
  800420b3df:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420b3e6:	00 00 00 
  800420b3e9:	48 b8 f0 d1 20 04 80 	movabs $0x800420d1f0,%rax
  800420b3f0:	00 00 00 
  800420b3f3:	89 c2                	mov    %eax,%edx
  800420b3f5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b3fc:	00 00 00 
  800420b3ff:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420b406:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b40d:	00 00 00 
  800420b410:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420b417:	08 00 
  800420b419:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b420:	00 00 00 
  800420b423:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b42a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b42d:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b433:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b43a:	00 00 00 
  800420b43d:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420b444:	83 e2 07             	and    $0x7,%edx
  800420b447:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420b44d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b454:	00 00 00 
  800420b457:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b45e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b461:	83 ca 0e             	or     $0xe,%edx
  800420b464:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b46a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b471:	00 00 00 
  800420b474:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b47b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b47e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b484:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b48b:	00 00 00 
  800420b48e:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b495:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b498:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b49e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4a5:	00 00 00 
  800420b4a8:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420b4af:	83 ca 80             	or     $0xffffff80,%edx
  800420b4b2:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420b4b8:	48 b8 f0 d1 20 04 80 	movabs $0x800420d1f0,%rax
  800420b4bf:	00 00 00 
  800420b4c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b4c6:	89 c2                	mov    %eax,%edx
  800420b4c8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4cf:	00 00 00 
  800420b4d2:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420b4d9:	48 b8 f0 d1 20 04 80 	movabs $0x800420d1f0,%rax
  800420b4e0:	00 00 00 
  800420b4e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b4e7:	89 c2                	mov    %eax,%edx
  800420b4e9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b4f0:	00 00 00 
  800420b4f3:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420b4f9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b500:	00 00 00 
  800420b503:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420b50a:	00 00 00 
  800420b50d:	48 b8 f6 d1 20 04 80 	movabs $0x800420d1f6,%rax
  800420b514:	00 00 00 
  800420b517:	89 c2                	mov    %eax,%edx
  800420b519:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b520:	00 00 00 
  800420b523:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420b52a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b531:	00 00 00 
  800420b534:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420b53b:	08 00 
  800420b53d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b544:	00 00 00 
  800420b547:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b54e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b551:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b557:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b55e:	00 00 00 
  800420b561:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420b568:	83 e2 07             	and    $0x7,%edx
  800420b56b:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420b571:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b578:	00 00 00 
  800420b57b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b582:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b585:	83 ca 0e             	or     $0xe,%edx
  800420b588:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b58e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b595:	00 00 00 
  800420b598:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b59f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b5a2:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b5a8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5af:	00 00 00 
  800420b5b2:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b5b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b5bc:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b5c2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5c9:	00 00 00 
  800420b5cc:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420b5d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b5d6:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420b5dc:	48 b8 f6 d1 20 04 80 	movabs $0x800420d1f6,%rax
  800420b5e3:	00 00 00 
  800420b5e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5ea:	89 c2                	mov    %eax,%edx
  800420b5ec:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b5f3:	00 00 00 
  800420b5f6:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420b5fd:	48 b8 f6 d1 20 04 80 	movabs $0x800420d1f6,%rax
  800420b604:	00 00 00 
  800420b607:	48 c1 e8 20          	shr    $0x20,%rax
  800420b60b:	89 c2                	mov    %eax,%edx
  800420b60d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b614:	00 00 00 
  800420b617:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420b61d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b624:	00 00 00 
  800420b627:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420b62e:	00 00 00 
  800420b631:	48 b8 fc d1 20 04 80 	movabs $0x800420d1fc,%rax
  800420b638:	00 00 00 
  800420b63b:	89 c2                	mov    %eax,%edx
  800420b63d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b644:	00 00 00 
  800420b647:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420b64e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b655:	00 00 00 
  800420b658:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420b65f:	08 00 
  800420b661:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b668:	00 00 00 
  800420b66b:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b672:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b675:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b67b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b682:	00 00 00 
  800420b685:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420b68c:	83 e2 07             	and    $0x7,%edx
  800420b68f:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420b695:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b69c:	00 00 00 
  800420b69f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b6a9:	83 ca 0e             	or     $0xe,%edx
  800420b6ac:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6b2:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6b9:	00 00 00 
  800420b6bc:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b6c6:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6cc:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6d3:	00 00 00 
  800420b6d6:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b6e0:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b6e6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b6ed:	00 00 00 
  800420b6f0:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420b6f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b6fa:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420b700:	48 b8 fc d1 20 04 80 	movabs $0x800420d1fc,%rax
  800420b707:	00 00 00 
  800420b70a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b70e:	89 c2                	mov    %eax,%edx
  800420b710:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b717:	00 00 00 
  800420b71a:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420b721:	48 b8 fc d1 20 04 80 	movabs $0x800420d1fc,%rax
  800420b728:	00 00 00 
  800420b72b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b72f:	89 c2                	mov    %eax,%edx
  800420b731:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b738:	00 00 00 
  800420b73b:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420b741:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b748:	00 00 00 
  800420b74b:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420b752:	00 00 00 
  800420b755:	48 b8 02 d2 20 04 80 	movabs $0x800420d202,%rax
  800420b75c:	00 00 00 
  800420b75f:	89 c2                	mov    %eax,%edx
  800420b761:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b768:	00 00 00 
  800420b76b:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420b772:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b779:	00 00 00 
  800420b77c:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420b783:	08 00 
  800420b785:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b78c:	00 00 00 
  800420b78f:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b796:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b799:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b79f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7a6:	00 00 00 
  800420b7a9:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420b7b0:	83 e2 07             	and    $0x7,%edx
  800420b7b3:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420b7b9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7c0:	00 00 00 
  800420b7c3:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b7cd:	83 ca 0e             	or     $0xe,%edx
  800420b7d0:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7d6:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7dd:	00 00 00 
  800420b7e0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b7e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7ea:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b7f0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b7f7:	00 00 00 
  800420b7fa:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b801:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b804:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b80a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b811:	00 00 00 
  800420b814:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420b81b:	83 ca 80             	or     $0xffffff80,%edx
  800420b81e:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420b824:	48 b8 02 d2 20 04 80 	movabs $0x800420d202,%rax
  800420b82b:	00 00 00 
  800420b82e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b832:	89 c2                	mov    %eax,%edx
  800420b834:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b83b:	00 00 00 
  800420b83e:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420b845:	48 b8 02 d2 20 04 80 	movabs $0x800420d202,%rax
  800420b84c:	00 00 00 
  800420b84f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b853:	89 c2                	mov    %eax,%edx
  800420b855:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b85c:	00 00 00 
  800420b85f:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420b865:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b86c:	00 00 00 
  800420b86f:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420b876:	00 00 00 
  800420b879:	48 b8 08 d2 20 04 80 	movabs $0x800420d208,%rax
  800420b880:	00 00 00 
  800420b883:	89 c2                	mov    %eax,%edx
  800420b885:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b88c:	00 00 00 
  800420b88f:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420b896:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b89d:	00 00 00 
  800420b8a0:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420b8a7:	08 00 
  800420b8a9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8b0:	00 00 00 
  800420b8b3:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b8ba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b8bd:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b8c3:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8ca:	00 00 00 
  800420b8cd:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420b8d4:	83 e2 07             	and    $0x7,%edx
  800420b8d7:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420b8dd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b8e4:	00 00 00 
  800420b8e7:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b8ee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8f1:	83 ca 0e             	or     $0xe,%edx
  800420b8f4:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b8fa:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b901:	00 00 00 
  800420b904:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b90b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b90e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b914:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b91b:	00 00 00 
  800420b91e:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b925:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b928:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b92e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b935:	00 00 00 
  800420b938:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420b93f:	83 ca 80             	or     $0xffffff80,%edx
  800420b942:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420b948:	48 b8 08 d2 20 04 80 	movabs $0x800420d208,%rax
  800420b94f:	00 00 00 
  800420b952:	48 c1 e8 10          	shr    $0x10,%rax
  800420b956:	89 c2                	mov    %eax,%edx
  800420b958:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b95f:	00 00 00 
  800420b962:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420b969:	48 b8 08 d2 20 04 80 	movabs $0x800420d208,%rax
  800420b970:	00 00 00 
  800420b973:	48 c1 e8 20          	shr    $0x20,%rax
  800420b977:	89 c2                	mov    %eax,%edx
  800420b979:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b980:	00 00 00 
  800420b983:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420b989:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b990:	00 00 00 
  800420b993:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420b99a:	00 00 00 
  800420b99d:	48 b8 0e d2 20 04 80 	movabs $0x800420d20e,%rax
  800420b9a4:	00 00 00 
  800420b9a7:	89 c2                	mov    %eax,%edx
  800420b9a9:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9b0:	00 00 00 
  800420b9b3:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420b9ba:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9c1:	00 00 00 
  800420b9c4:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420b9cb:	08 00 
  800420b9cd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9d4:	00 00 00 
  800420b9d7:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b9de:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b9e1:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420b9e7:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420b9ee:	00 00 00 
  800420b9f1:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420b9f8:	83 e2 07             	and    $0x7,%edx
  800420b9fb:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420ba01:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba08:	00 00 00 
  800420ba0b:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ba15:	83 ca 0e             	or     $0xe,%edx
  800420ba18:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba1e:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba25:	00 00 00 
  800420ba28:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ba32:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba38:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba3f:	00 00 00 
  800420ba42:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba4c:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba52:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba59:	00 00 00 
  800420ba5c:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420ba63:	83 ca 80             	or     $0xffffff80,%edx
  800420ba66:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420ba6c:	48 b8 0e d2 20 04 80 	movabs $0x800420d20e,%rax
  800420ba73:	00 00 00 
  800420ba76:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba7a:	89 c2                	mov    %eax,%edx
  800420ba7c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420ba83:	00 00 00 
  800420ba86:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420ba8d:	48 b8 0e d2 20 04 80 	movabs $0x800420d20e,%rax
  800420ba94:	00 00 00 
  800420ba97:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba9b:	89 c2                	mov    %eax,%edx
  800420ba9d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420baa4:	00 00 00 
  800420baa7:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420baad:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bab4:	00 00 00 
  800420bab7:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420babe:	00 00 00 
  800420bac1:	48 b8 14 d2 20 04 80 	movabs $0x800420d214,%rax
  800420bac8:	00 00 00 
  800420bacb:	89 c2                	mov    %eax,%edx
  800420bacd:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bad4:	00 00 00 
  800420bad7:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420bade:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bae5:	00 00 00 
  800420bae8:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420baef:	08 00 
  800420baf1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420baf8:	00 00 00 
  800420bafb:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420bb02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bb05:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bb0b:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb12:	00 00 00 
  800420bb15:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420bb1c:	83 e2 07             	and    $0x7,%edx
  800420bb1f:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420bb25:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb2c:	00 00 00 
  800420bb2f:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bb39:	83 ca 0e             	or     $0xe,%edx
  800420bb3c:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb42:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb49:	00 00 00 
  800420bb4c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb56:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb5c:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb63:	00 00 00 
  800420bb66:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb70:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb76:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bb7d:	00 00 00 
  800420bb80:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420bb87:	83 ca 80             	or     $0xffffff80,%edx
  800420bb8a:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420bb90:	48 b8 14 d2 20 04 80 	movabs $0x800420d214,%rax
  800420bb97:	00 00 00 
  800420bb9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb9e:	89 c2                	mov    %eax,%edx
  800420bba0:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bba7:	00 00 00 
  800420bbaa:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420bbb1:	48 b8 14 d2 20 04 80 	movabs $0x800420d214,%rax
  800420bbb8:	00 00 00 
  800420bbbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bbbf:	89 c2                	mov    %eax,%edx
  800420bbc1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbc8:	00 00 00 
  800420bbcb:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420bbd1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbd8:	00 00 00 
  800420bbdb:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420bbe2:	00 00 00 
  800420bbe5:	48 b8 1a d2 20 04 80 	movabs $0x800420d21a,%rax
  800420bbec:	00 00 00 
  800420bbef:	89 c2                	mov    %eax,%edx
  800420bbf1:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bbf8:	00 00 00 
  800420bbfb:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420bc02:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc09:	00 00 00 
  800420bc0c:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420bc13:	08 00 
  800420bc15:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc1c:	00 00 00 
  800420bc1f:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bc26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bc29:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bc2f:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc36:	00 00 00 
  800420bc39:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420bc40:	83 e2 07             	and    $0x7,%edx
  800420bc43:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420bc49:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc50:	00 00 00 
  800420bc53:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc5d:	83 ca 0e             	or     $0xe,%edx
  800420bc60:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc66:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc6d:	00 00 00 
  800420bc70:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc77:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc7a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc80:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bc87:	00 00 00 
  800420bc8a:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bc91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc94:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bc9a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bca1:	00 00 00 
  800420bca4:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420bcab:	83 ca 80             	or     $0xffffff80,%edx
  800420bcae:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420bcb4:	48 b8 1a d2 20 04 80 	movabs $0x800420d21a,%rax
  800420bcbb:	00 00 00 
  800420bcbe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bcc2:	89 c2                	mov    %eax,%edx
  800420bcc4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bccb:	00 00 00 
  800420bcce:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420bcd5:	48 b8 1a d2 20 04 80 	movabs $0x800420d21a,%rax
  800420bcdc:	00 00 00 
  800420bcdf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bce3:	89 c2                	mov    %eax,%edx
  800420bce5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bcec:	00 00 00 
  800420bcef:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420bcf5:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bcfc:	00 00 00 
  800420bcff:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420bd06:	00 00 00 
  800420bd09:	48 b8 20 d2 20 04 80 	movabs $0x800420d220,%rax
  800420bd10:	00 00 00 
  800420bd13:	89 c2                	mov    %eax,%edx
  800420bd15:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd1c:	00 00 00 
  800420bd1f:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420bd26:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd2d:	00 00 00 
  800420bd30:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420bd37:	08 00 
  800420bd39:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd40:	00 00 00 
  800420bd43:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bd4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd4d:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd53:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd5a:	00 00 00 
  800420bd5d:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420bd64:	83 e2 07             	and    $0x7,%edx
  800420bd67:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420bd6d:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd74:	00 00 00 
  800420bd77:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd81:	83 ca 0e             	or     $0xe,%edx
  800420bd84:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bd8a:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bd91:	00 00 00 
  800420bd94:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bd9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd9e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bda4:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bdab:	00 00 00 
  800420bdae:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bdb5:	83 ca 60             	or     $0x60,%edx
  800420bdb8:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bdbe:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bdc5:	00 00 00 
  800420bdc8:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420bdcf:	83 ca 80             	or     $0xffffff80,%edx
  800420bdd2:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420bdd8:	48 b8 20 d2 20 04 80 	movabs $0x800420d220,%rax
  800420bddf:	00 00 00 
  800420bde2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bde6:	89 c2                	mov    %eax,%edx
  800420bde8:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420bdef:	00 00 00 
  800420bdf2:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420bdf9:	48 b8 20 d2 20 04 80 	movabs $0x800420d220,%rax
  800420be00:	00 00 00 
  800420be03:	48 c1 e8 20          	shr    $0x20,%rax
  800420be07:	89 c2                	mov    %eax,%edx
  800420be09:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420be10:	00 00 00 
  800420be13:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420be19:	48 b8 80 e2 49 04 80 	movabs $0x800449e280,%rax
  800420be20:	00 00 00 
  800420be23:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420be2a:	00 00 00 
  800420be2d:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420be34:	00 00 00 
  800420be37:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420be3c:	48 ba 80 e2 49 04 80 	movabs $0x800449e280,%rdx
  800420be43:	00 00 00 
  800420be46:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420be4d:	00 00 00 
  800420be50:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420be54:	48 b8 63 be 20 04 80 	movabs $0x800420be63,%rax
  800420be5b:	00 00 00 
  800420be5e:	ff d0                	callq  *%rax
  800420be60:	90                   	nop
  800420be61:	c9                   	leaveq 
  800420be62:	c3                   	retq   

000000800420be63 <trap_init_percpu>:
  800420be63:	55                   	push   %rbp
  800420be64:	48 89 e5             	mov    %rsp,%rbp
  800420be67:	53                   	push   %rbx
  800420be68:	48 83 ec 18          	sub    $0x18,%rsp
  800420be6c:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420be73:	00 00 00 
  800420be76:	ff d0                	callq  *%rax
  800420be78:	01 c0                	add    %eax,%eax
  800420be7a:	83 c0 05             	add    $0x5,%eax
  800420be7d:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420be80:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420be87:	00 00 00 
  800420be8a:	ff d0                	callq  *%rax
  800420be8c:	89 c3                	mov    %eax,%ebx
  800420be8e:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420be95:	00 00 00 
  800420be98:	ff d0                	callq  *%rax
  800420be9a:	89 c2                	mov    %eax,%edx
  800420be9c:	89 d0                	mov    %edx,%eax
  800420be9e:	01 c0                	add    %eax,%eax
  800420bea0:	01 d0                	add    %edx,%eax
  800420bea2:	c1 e0 0f             	shl    $0xf,%eax
  800420bea5:	48 98                	cltq   
  800420bea7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420beae:	00 00 00 
  800420beb1:	48 29 c2             	sub    %rax,%rdx
  800420beb4:	48 89 d0             	mov    %rdx,%rax
  800420beb7:	48 89 c6             	mov    %rax,%rsi
  800420beba:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420bec1:	00 00 00 
  800420bec4:	48 63 c3             	movslq %ebx,%rax
  800420bec7:	48 c1 e0 03          	shl    $0x3,%rax
  800420becb:	48 89 c1             	mov    %rax,%rcx
  800420bece:	48 c1 e1 04          	shl    $0x4,%rcx
  800420bed2:	48 01 c8             	add    %rcx,%rax
  800420bed5:	48 01 d0             	add    %rdx,%rax
  800420bed8:	48 83 c0 10          	add    $0x10,%rax
  800420bedc:	48 89 70 04          	mov    %rsi,0x4(%rax)
  800420bee0:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bee7:	00 00 00 
  800420beea:	48 8b 00             	mov    (%rax),%rax
  800420beed:	48 c1 f8 10          	sar    $0x10,%rax
  800420bef1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bef5:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420befc:	00 00 00 
  800420beff:	ff d0                	callq  *%rax
  800420bf01:	c1 e0 04             	shl    $0x4,%eax
  800420bf04:	48 98                	cltq   
  800420bf06:	48 01 d8             	add    %rbx,%rax
  800420bf09:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420bf0e:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf15:	00 00 00 
  800420bf18:	48 8b 00             	mov    (%rax),%rax
  800420bf1b:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf1f:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf23:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420bf2a:	00 00 00 
  800420bf2d:	ff d0                	callq  *%rax
  800420bf2f:	c1 e0 04             	shl    $0x4,%eax
  800420bf32:	48 98                	cltq   
  800420bf34:	48 01 d8             	add    %rbx,%rax
  800420bf37:	48 89 c3             	mov    %rax,%rbx
  800420bf3a:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420bf41:	00 00 00 
  800420bf44:	ff d0                	callq  *%rax
  800420bf46:	48 98                	cltq   
  800420bf48:	48 c1 e0 03          	shl    $0x3,%rax
  800420bf4c:	48 89 c2             	mov    %rax,%rdx
  800420bf4f:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bf53:	48 01 d0             	add    %rdx,%rax
  800420bf56:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bf5a:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420bf61:	00 00 00 
  800420bf64:	48 01 d0             	add    %rdx,%rax
  800420bf67:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420bf6b:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bf72:	00 00 00 
  800420bf75:	48 8b 00             	mov    (%rax),%rax
  800420bf78:	48 c1 f8 10          	sar    $0x10,%rax
  800420bf7c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bf80:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420bf87:	00 00 00 
  800420bf8a:	ff d0                	callq  *%rax
  800420bf8c:	c1 e0 04             	shl    $0x4,%eax
  800420bf8f:	48 98                	cltq   
  800420bf91:	48 01 d8             	add    %rbx,%rax
  800420bf94:	48 89 c3             	mov    %rax,%rbx
  800420bf97:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420bf9e:	00 00 00 
  800420bfa1:	ff d0                	callq  *%rax
  800420bfa3:	48 98                	cltq   
  800420bfa5:	48 c1 e0 03          	shl    $0x3,%rax
  800420bfa9:	48 89 c2             	mov    %rax,%rdx
  800420bfac:	48 c1 e2 04          	shl    $0x4,%rdx
  800420bfb0:	48 01 d0             	add    %rdx,%rax
  800420bfb3:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420bfb7:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420bfbe:	00 00 00 
  800420bfc1:	48 01 d0             	add    %rdx,%rax
  800420bfc4:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfc8:	88 43 04             	mov    %al,0x4(%rbx)
  800420bfcb:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420bfd2:	00 00 00 
  800420bfd5:	48 8b 00             	mov    (%rax),%rax
  800420bfd8:	48 c1 f8 10          	sar    $0x10,%rax
  800420bfdc:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420bfe0:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420bfe7:	00 00 00 
  800420bfea:	ff d0                	callq  *%rax
  800420bfec:	c1 e0 04             	shl    $0x4,%eax
  800420bfef:	48 98                	cltq   
  800420bff1:	48 01 d8             	add    %rbx,%rax
  800420bff4:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420bff8:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bffb:	83 ca 09             	or     $0x9,%edx
  800420bffe:	88 50 05             	mov    %dl,0x5(%rax)
  800420c001:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c008:	00 00 00 
  800420c00b:	48 8b 00             	mov    (%rax),%rax
  800420c00e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c012:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c016:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c01d:	00 00 00 
  800420c020:	ff d0                	callq  *%rax
  800420c022:	c1 e0 04             	shl    $0x4,%eax
  800420c025:	48 98                	cltq   
  800420c027:	48 01 d8             	add    %rbx,%rax
  800420c02a:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c02e:	83 e2 ef             	and    $0xffffffef,%edx
  800420c031:	88 50 05             	mov    %dl,0x5(%rax)
  800420c034:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c03b:	00 00 00 
  800420c03e:	48 8b 00             	mov    (%rax),%rax
  800420c041:	48 c1 f8 10          	sar    $0x10,%rax
  800420c045:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c049:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c050:	00 00 00 
  800420c053:	ff d0                	callq  *%rax
  800420c055:	c1 e0 04             	shl    $0x4,%eax
  800420c058:	48 98                	cltq   
  800420c05a:	48 01 d8             	add    %rbx,%rax
  800420c05d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c061:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c064:	88 50 05             	mov    %dl,0x5(%rax)
  800420c067:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c06e:	00 00 00 
  800420c071:	48 8b 00             	mov    (%rax),%rax
  800420c074:	48 c1 f8 10          	sar    $0x10,%rax
  800420c078:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c07c:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c083:	00 00 00 
  800420c086:	ff d0                	callq  *%rax
  800420c088:	c1 e0 04             	shl    $0x4,%eax
  800420c08b:	48 98                	cltq   
  800420c08d:	48 01 d8             	add    %rbx,%rax
  800420c090:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c094:	83 ca 80             	or     $0xffffff80,%edx
  800420c097:	88 50 05             	mov    %dl,0x5(%rax)
  800420c09a:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0a1:	00 00 00 
  800420c0a4:	48 8b 00             	mov    (%rax),%rax
  800420c0a7:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0ab:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0af:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c0b6:	00 00 00 
  800420c0b9:	ff d0                	callq  *%rax
  800420c0bb:	c1 e0 04             	shl    $0x4,%eax
  800420c0be:	48 98                	cltq   
  800420c0c0:	48 01 d8             	add    %rbx,%rax
  800420c0c3:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0c7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0ca:	88 50 06             	mov    %dl,0x6(%rax)
  800420c0cd:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c0d4:	00 00 00 
  800420c0d7:	48 8b 00             	mov    (%rax),%rax
  800420c0da:	48 c1 f8 10          	sar    $0x10,%rax
  800420c0de:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c0e2:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	ff d0                	callq  *%rax
  800420c0ee:	c1 e0 04             	shl    $0x4,%eax
  800420c0f1:	48 98                	cltq   
  800420c0f3:	48 01 d8             	add    %rbx,%rax
  800420c0f6:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c0fa:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0fd:	88 50 06             	mov    %dl,0x6(%rax)
  800420c100:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c107:	00 00 00 
  800420c10a:	48 8b 00             	mov    (%rax),%rax
  800420c10d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c111:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c115:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c11c:	00 00 00 
  800420c11f:	ff d0                	callq  *%rax
  800420c121:	c1 e0 04             	shl    $0x4,%eax
  800420c124:	48 98                	cltq   
  800420c126:	48 01 d8             	add    %rbx,%rax
  800420c129:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c12d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c130:	88 50 06             	mov    %dl,0x6(%rax)
  800420c133:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c13a:	00 00 00 
  800420c13d:	48 8b 00             	mov    (%rax),%rax
  800420c140:	48 c1 f8 10          	sar    $0x10,%rax
  800420c144:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c148:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c14f:	00 00 00 
  800420c152:	ff d0                	callq  *%rax
  800420c154:	c1 e0 04             	shl    $0x4,%eax
  800420c157:	48 98                	cltq   
  800420c159:	48 01 d8             	add    %rbx,%rax
  800420c15c:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c160:	83 e2 7f             	and    $0x7f,%edx
  800420c163:	88 50 06             	mov    %dl,0x6(%rax)
  800420c166:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c16d:	00 00 00 
  800420c170:	48 8b 00             	mov    (%rax),%rax
  800420c173:	48 c1 f8 10          	sar    $0x10,%rax
  800420c177:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c17b:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c182:	00 00 00 
  800420c185:	ff d0                	callq  *%rax
  800420c187:	c1 e0 04             	shl    $0x4,%eax
  800420c18a:	48 98                	cltq   
  800420c18c:	48 01 d8             	add    %rbx,%rax
  800420c18f:	48 89 c3             	mov    %rax,%rbx
  800420c192:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c199:	00 00 00 
  800420c19c:	ff d0                	callq  *%rax
  800420c19e:	48 98                	cltq   
  800420c1a0:	48 c1 e0 03          	shl    $0x3,%rax
  800420c1a4:	48 89 c2             	mov    %rax,%rdx
  800420c1a7:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c1ab:	48 01 d0             	add    %rdx,%rax
  800420c1ae:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c1b2:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420c1b9:	00 00 00 
  800420c1bc:	48 01 d0             	add    %rdx,%rax
  800420c1bf:	48 c1 e8 18          	shr    $0x18,%rax
  800420c1c3:	88 43 07             	mov    %al,0x7(%rbx)
  800420c1c6:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c1cd:	00 00 00 
  800420c1d0:	48 8b 00             	mov    (%rax),%rax
  800420c1d3:	48 c1 f8 10          	sar    $0x10,%rax
  800420c1d7:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c1db:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c1e2:	00 00 00 
  800420c1e5:	ff d0                	callq  *%rax
  800420c1e7:	c1 e0 04             	shl    $0x4,%eax
  800420c1ea:	48 98                	cltq   
  800420c1ec:	48 01 d8             	add    %rbx,%rax
  800420c1ef:	48 89 c3             	mov    %rax,%rbx
  800420c1f2:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c1f9:	00 00 00 
  800420c1fc:	ff d0                	callq  *%rax
  800420c1fe:	48 98                	cltq   
  800420c200:	48 c1 e0 03          	shl    $0x3,%rax
  800420c204:	48 89 c2             	mov    %rax,%rdx
  800420c207:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c20b:	48 01 d0             	add    %rdx,%rax
  800420c20e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c212:	48 b8 20 f0 69 04 80 	movabs $0x800469f020,%rax
  800420c219:	00 00 00 
  800420c21c:	48 01 d0             	add    %rdx,%rax
  800420c21f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c223:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c226:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c22d:	00 00 00 
  800420c230:	48 8b 00             	mov    (%rax),%rax
  800420c233:	48 c1 f8 10          	sar    $0x10,%rax
  800420c237:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c23b:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c242:	00 00 00 
  800420c245:	ff d0                	callq  *%rax
  800420c247:	c1 e0 04             	shl    $0x4,%eax
  800420c24a:	48 98                	cltq   
  800420c24c:	48 01 d8             	add    %rbx,%rax
  800420c24f:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c253:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c25a:	00 00 00 
  800420c25d:	48 8b 00             	mov    (%rax),%rax
  800420c260:	48 c1 f8 10          	sar    $0x10,%rax
  800420c264:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c268:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c26f:	00 00 00 
  800420c272:	ff d0                	callq  *%rax
  800420c274:	c1 e0 04             	shl    $0x4,%eax
  800420c277:	48 98                	cltq   
  800420c279:	48 01 d8             	add    %rbx,%rax
  800420c27c:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c280:	48 b8 68 c6 22 04 80 	movabs $0x800422c668,%rax
  800420c287:	00 00 00 
  800420c28a:	48 8b 00             	mov    (%rax),%rax
  800420c28d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c291:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c295:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c29c:	00 00 00 
  800420c29f:	ff d0                	callq  *%rax
  800420c2a1:	c1 e0 04             	shl    $0x4,%eax
  800420c2a4:	48 98                	cltq   
  800420c2a6:	48 01 d8             	add    %rbx,%rax
  800420c2a9:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c2af:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c2b2:	c1 e0 03             	shl    $0x3,%eax
  800420c2b5:	0f b7 c0             	movzwl %ax,%eax
  800420c2b8:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c2bc:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c2c0:	0f 00 d8             	ltr    %ax
  800420c2c3:	48 b8 80 f2 49 04 80 	movabs $0x800449f280,%rax
  800420c2ca:	00 00 00 
  800420c2cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c2d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c2d5:	0f 01 18             	lidt   (%rax)
  800420c2d8:	90                   	nop
  800420c2d9:	48 83 c4 18          	add    $0x18,%rsp
  800420c2dd:	5b                   	pop    %rbx
  800420c2de:	5d                   	pop    %rbp
  800420c2df:	c3                   	retq   

000000800420c2e0 <print_trapframe>:
  800420c2e0:	55                   	push   %rbp
  800420c2e1:	48 89 e5             	mov    %rsp,%rbp
  800420c2e4:	48 83 ec 20          	sub    $0x20,%rsp
  800420c2e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c2ec:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c2f3:	00 00 00 
  800420c2f6:	ff d0                	callq  *%rax
  800420c2f8:	89 c2                	mov    %eax,%edx
  800420c2fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c2fe:	48 89 c6             	mov    %rax,%rsi
  800420c301:	48 bf 0e 9f 21 04 80 	movabs $0x8004219f0e,%rdi
  800420c308:	00 00 00 
  800420c30b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c310:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420c317:	00 00 00 
  800420c31a:	ff d1                	callq  *%rcx
  800420c31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c320:	48 89 c7             	mov    %rax,%rdi
  800420c323:	48 b8 f2 c5 20 04 80 	movabs $0x800420c5f2,%rax
  800420c32a:	00 00 00 
  800420c32d:	ff d0                	callq  *%rax
  800420c32f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c333:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c337:	0f b7 c0             	movzwl %ax,%eax
  800420c33a:	89 c6                	mov    %eax,%esi
  800420c33c:	48 bf 2c 9f 21 04 80 	movabs $0x8004219f2c,%rdi
  800420c343:	00 00 00 
  800420c346:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c34b:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c352:	00 00 00 
  800420c355:	ff d2                	callq  *%rdx
  800420c357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c35b:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c362:	0f b7 c0             	movzwl %ax,%eax
  800420c365:	89 c6                	mov    %eax,%esi
  800420c367:	48 bf 3f 9f 21 04 80 	movabs $0x8004219f3f,%rdi
  800420c36e:	00 00 00 
  800420c371:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c376:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c37d:	00 00 00 
  800420c380:	ff d2                	callq  *%rdx
  800420c382:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c386:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c38d:	89 c7                	mov    %eax,%edi
  800420c38f:	48 b8 ee 96 20 04 80 	movabs $0x80042096ee,%rax
  800420c396:	00 00 00 
  800420c399:	ff d0                	callq  *%rax
  800420c39b:	48 89 c2             	mov    %rax,%rdx
  800420c39e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3a2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c3a9:	48 89 c6             	mov    %rax,%rsi
  800420c3ac:	48 bf 52 9f 21 04 80 	movabs $0x8004219f52,%rdi
  800420c3b3:	00 00 00 
  800420c3b6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c3bb:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420c3c2:	00 00 00 
  800420c3c5:	ff d1                	callq  *%rcx
  800420c3c7:	48 b8 90 f2 49 04 80 	movabs $0x800449f290,%rax
  800420c3ce:	00 00 00 
  800420c3d1:	48 8b 00             	mov    (%rax),%rax
  800420c3d4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420c3d8:	75 3a                	jne    800420c414 <print_trapframe+0x134>
  800420c3da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c3de:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c3e5:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c3e9:	75 29                	jne    800420c414 <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420c3eb:	0f 20 d0             	mov    %cr2,%rax
  800420c3ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420c3f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c3f6:	48 89 c6             	mov    %rax,%rsi
  800420c3f9:	48 bf 64 9f 21 04 80 	movabs $0x8004219f64,%rdi
  800420c400:	00 00 00 
  800420c403:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c408:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c40f:	00 00 00 
  800420c412:	ff d2                	callq  *%rdx
  800420c414:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c418:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c41f:	48 89 c6             	mov    %rax,%rsi
  800420c422:	48 bf 73 9f 21 04 80 	movabs $0x8004219f73,%rdi
  800420c429:	00 00 00 
  800420c42c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c431:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c438:	00 00 00 
  800420c43b:	ff d2                	callq  *%rdx
  800420c43d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c441:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c448:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c44c:	0f 85 9c 00 00 00    	jne    800420c4ee <print_trapframe+0x20e>
  800420c452:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c456:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c45d:	83 e0 01             	and    $0x1,%eax
  800420c460:	48 85 c0             	test   %rax,%rax
  800420c463:	74 0c                	je     800420c471 <print_trapframe+0x191>
  800420c465:	48 b9 81 9f 21 04 80 	movabs $0x8004219f81,%rcx
  800420c46c:	00 00 00 
  800420c46f:	eb 0a                	jmp    800420c47b <print_trapframe+0x19b>
  800420c471:	48 b9 8c 9f 21 04 80 	movabs $0x8004219f8c,%rcx
  800420c478:	00 00 00 
  800420c47b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c47f:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c486:	83 e0 02             	and    $0x2,%eax
  800420c489:	48 85 c0             	test   %rax,%rax
  800420c48c:	74 0c                	je     800420c49a <print_trapframe+0x1ba>
  800420c48e:	48 ba 98 9f 21 04 80 	movabs $0x8004219f98,%rdx
  800420c495:	00 00 00 
  800420c498:	eb 0a                	jmp    800420c4a4 <print_trapframe+0x1c4>
  800420c49a:	48 ba 9e 9f 21 04 80 	movabs $0x8004219f9e,%rdx
  800420c4a1:	00 00 00 
  800420c4a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c4a8:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420c4af:	83 e0 04             	and    $0x4,%eax
  800420c4b2:	48 85 c0             	test   %rax,%rax
  800420c4b5:	74 0c                	je     800420c4c3 <print_trapframe+0x1e3>
  800420c4b7:	48 b8 a3 9f 21 04 80 	movabs $0x8004219fa3,%rax
  800420c4be:	00 00 00 
  800420c4c1:	eb 0a                	jmp    800420c4cd <print_trapframe+0x1ed>
  800420c4c3:	48 b8 a8 9f 21 04 80 	movabs $0x8004219fa8,%rax
  800420c4ca:	00 00 00 
  800420c4cd:	48 89 c6             	mov    %rax,%rsi
  800420c4d0:	48 bf af 9f 21 04 80 	movabs $0x8004219faf,%rdi
  800420c4d7:	00 00 00 
  800420c4da:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4df:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  800420c4e6:	00 00 00 
  800420c4e9:	41 ff d0             	callq  *%r8
  800420c4ec:	eb 1b                	jmp    800420c509 <print_trapframe+0x229>
  800420c4ee:	48 bf be 9f 21 04 80 	movabs $0x8004219fbe,%rdi
  800420c4f5:	00 00 00 
  800420c4f8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c4fd:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c504:	00 00 00 
  800420c507:	ff d2                	callq  *%rdx
  800420c509:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c50d:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420c514:	48 89 c6             	mov    %rax,%rsi
  800420c517:	48 bf c0 9f 21 04 80 	movabs $0x8004219fc0,%rdi
  800420c51e:	00 00 00 
  800420c521:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c526:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c52d:	00 00 00 
  800420c530:	ff d2                	callq  *%rdx
  800420c532:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c536:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c53d:	0f b7 c0             	movzwl %ax,%eax
  800420c540:	89 c6                	mov    %eax,%esi
  800420c542:	48 bf cf 9f 21 04 80 	movabs $0x8004219fcf,%rdi
  800420c549:	00 00 00 
  800420c54c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c551:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c558:	00 00 00 
  800420c55b:	ff d2                	callq  *%rdx
  800420c55d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c561:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420c568:	48 89 c6             	mov    %rax,%rsi
  800420c56b:	48 bf e2 9f 21 04 80 	movabs $0x8004219fe2,%rdi
  800420c572:	00 00 00 
  800420c575:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c57a:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c581:	00 00 00 
  800420c584:	ff d2                	callq  *%rdx
  800420c586:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c58a:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c591:	0f b7 c0             	movzwl %ax,%eax
  800420c594:	83 e0 03             	and    $0x3,%eax
  800420c597:	85 c0                	test   %eax,%eax
  800420c599:	74 54                	je     800420c5ef <print_trapframe+0x30f>
  800420c59b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c59f:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420c5a6:	48 89 c6             	mov    %rax,%rsi
  800420c5a9:	48 bf f1 9f 21 04 80 	movabs $0x8004219ff1,%rdi
  800420c5b0:	00 00 00 
  800420c5b3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5b8:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c5bf:	00 00 00 
  800420c5c2:	ff d2                	callq  *%rdx
  800420c5c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c5c8:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420c5cf:	0f b7 c0             	movzwl %ax,%eax
  800420c5d2:	89 c6                	mov    %eax,%esi
  800420c5d4:	48 bf 00 a0 21 04 80 	movabs $0x800421a000,%rdi
  800420c5db:	00 00 00 
  800420c5de:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c5e3:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c5ea:	00 00 00 
  800420c5ed:	ff d2                	callq  *%rdx
  800420c5ef:	90                   	nop
  800420c5f0:	c9                   	leaveq 
  800420c5f1:	c3                   	retq   

000000800420c5f2 <print_regs>:
  800420c5f2:	55                   	push   %rbp
  800420c5f3:	48 89 e5             	mov    %rsp,%rbp
  800420c5f6:	48 83 ec 10          	sub    $0x10,%rsp
  800420c5fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420c5fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c602:	48 8b 00             	mov    (%rax),%rax
  800420c605:	48 89 c6             	mov    %rax,%rsi
  800420c608:	48 bf 13 a0 21 04 80 	movabs $0x800421a013,%rdi
  800420c60f:	00 00 00 
  800420c612:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c617:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c61e:	00 00 00 
  800420c621:	ff d2                	callq  *%rdx
  800420c623:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c627:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420c62b:	48 89 c6             	mov    %rax,%rsi
  800420c62e:	48 bf 22 a0 21 04 80 	movabs $0x800421a022,%rdi
  800420c635:	00 00 00 
  800420c638:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c63d:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c644:	00 00 00 
  800420c647:	ff d2                	callq  *%rdx
  800420c649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c64d:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420c651:	48 89 c6             	mov    %rax,%rsi
  800420c654:	48 bf 31 a0 21 04 80 	movabs $0x800421a031,%rdi
  800420c65b:	00 00 00 
  800420c65e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c663:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c66a:	00 00 00 
  800420c66d:	ff d2                	callq  *%rdx
  800420c66f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c673:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420c677:	48 89 c6             	mov    %rax,%rsi
  800420c67a:	48 bf 40 a0 21 04 80 	movabs $0x800421a040,%rdi
  800420c681:	00 00 00 
  800420c684:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c689:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c690:	00 00 00 
  800420c693:	ff d2                	callq  *%rdx
  800420c695:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c699:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420c69d:	48 89 c6             	mov    %rax,%rsi
  800420c6a0:	48 bf 4f a0 21 04 80 	movabs $0x800421a04f,%rdi
  800420c6a7:	00 00 00 
  800420c6aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6af:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c6b6:	00 00 00 
  800420c6b9:	ff d2                	callq  *%rdx
  800420c6bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6bf:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420c6c3:	48 89 c6             	mov    %rax,%rsi
  800420c6c6:	48 bf 5e a0 21 04 80 	movabs $0x800421a05e,%rdi
  800420c6cd:	00 00 00 
  800420c6d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6d5:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c6dc:	00 00 00 
  800420c6df:	ff d2                	callq  *%rdx
  800420c6e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c6e5:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420c6e9:	48 89 c6             	mov    %rax,%rsi
  800420c6ec:	48 bf 6d a0 21 04 80 	movabs $0x800421a06d,%rdi
  800420c6f3:	00 00 00 
  800420c6f6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c6fb:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c702:	00 00 00 
  800420c705:	ff d2                	callq  *%rdx
  800420c707:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c70b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420c70f:	48 89 c6             	mov    %rax,%rsi
  800420c712:	48 bf 7b a0 21 04 80 	movabs $0x800421a07b,%rdi
  800420c719:	00 00 00 
  800420c71c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c721:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c728:	00 00 00 
  800420c72b:	ff d2                	callq  *%rdx
  800420c72d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c731:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420c735:	48 89 c6             	mov    %rax,%rsi
  800420c738:	48 bf 89 a0 21 04 80 	movabs $0x800421a089,%rdi
  800420c73f:	00 00 00 
  800420c742:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c747:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c74e:	00 00 00 
  800420c751:	ff d2                	callq  *%rdx
  800420c753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c757:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420c75b:	48 89 c6             	mov    %rax,%rsi
  800420c75e:	48 bf 98 a0 21 04 80 	movabs $0x800421a098,%rdi
  800420c765:	00 00 00 
  800420c768:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c76d:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c774:	00 00 00 
  800420c777:	ff d2                	callq  *%rdx
  800420c779:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c77d:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420c781:	48 89 c6             	mov    %rax,%rsi
  800420c784:	48 bf a7 a0 21 04 80 	movabs $0x800421a0a7,%rdi
  800420c78b:	00 00 00 
  800420c78e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c793:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c79a:	00 00 00 
  800420c79d:	ff d2                	callq  *%rdx
  800420c79f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7a3:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420c7a7:	48 89 c6             	mov    %rax,%rsi
  800420c7aa:	48 bf b6 a0 21 04 80 	movabs $0x800421a0b6,%rdi
  800420c7b1:	00 00 00 
  800420c7b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7b9:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c7c0:	00 00 00 
  800420c7c3:	ff d2                	callq  *%rdx
  800420c7c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7c9:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420c7cd:	48 89 c6             	mov    %rax,%rsi
  800420c7d0:	48 bf c5 a0 21 04 80 	movabs $0x800421a0c5,%rdi
  800420c7d7:	00 00 00 
  800420c7da:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c7df:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c7e6:	00 00 00 
  800420c7e9:	ff d2                	callq  *%rdx
  800420c7eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c7ef:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420c7f3:	48 89 c6             	mov    %rax,%rsi
  800420c7f6:	48 bf d4 a0 21 04 80 	movabs $0x800421a0d4,%rdi
  800420c7fd:	00 00 00 
  800420c800:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c805:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c80c:	00 00 00 
  800420c80f:	ff d2                	callq  *%rdx
  800420c811:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420c815:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c819:	48 89 c6             	mov    %rax,%rsi
  800420c81c:	48 bf e3 a0 21 04 80 	movabs $0x800421a0e3,%rdi
  800420c823:	00 00 00 
  800420c826:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c82b:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c832:	00 00 00 
  800420c835:	ff d2                	callq  *%rdx
  800420c837:	90                   	nop
  800420c838:	c9                   	leaveq 
  800420c839:	c3                   	retq   

000000800420c83a <trap_dispatch>:
  800420c83a:	55                   	push   %rbp
  800420c83b:	48 89 e5             	mov    %rsp,%rbp
  800420c83e:	48 83 ec 20          	sub    $0x20,%rsp
  800420c842:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c846:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c84a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c851:	48 83 f8 0e          	cmp    $0xe,%rax
  800420c855:	75 18                	jne    800420c86f <trap_dispatch+0x35>
  800420c857:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c85b:	48 89 c7             	mov    %rax,%rdi
  800420c85e:	48 b8 b7 cd 20 04 80 	movabs $0x800420cdb7,%rax
  800420c865:	00 00 00 
  800420c868:	ff d0                	callq  *%rax
  800420c86a:	e9 e9 01 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c86f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c873:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c87a:	48 83 f8 30          	cmp    $0x30,%rax
  800420c87e:	75 55                	jne    800420c8d5 <trap_dispatch+0x9b>
  800420c880:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c884:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420c888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c88c:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420c890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c894:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420c898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c89c:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420c8a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8a4:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420c8a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8ac:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420c8b0:	4d 89 c1             	mov    %r8,%r9
  800420c8b3:	49 89 f8             	mov    %rdi,%r8
  800420c8b6:	48 89 c7             	mov    %rax,%rdi
  800420c8b9:	48 b8 88 e4 20 04 80 	movabs $0x800420e488,%rax
  800420c8c0:	00 00 00 
  800420c8c3:	ff d0                	callq  *%rax
  800420c8c5:	48 89 c2             	mov    %rax,%rdx
  800420c8c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8cc:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420c8d0:	e9 83 01 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c8d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8d9:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c8e0:	48 83 f8 03          	cmp    $0x3,%rax
  800420c8e4:	75 18                	jne    800420c8fe <trap_dispatch+0xc4>
  800420c8e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c8ea:	48 89 c7             	mov    %rax,%rdi
  800420c8ed:	48 b8 b9 1b 20 04 80 	movabs $0x8004201bb9,%rax
  800420c8f4:	00 00 00 
  800420c8f7:	ff d0                	callq  *%rax
  800420c8f9:	e9 5a 01 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c8fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c902:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c909:	48 83 f8 27          	cmp    $0x27,%rax
  800420c90d:	75 33                	jne    800420c942 <trap_dispatch+0x108>
  800420c90f:	48 bf f2 a0 21 04 80 	movabs $0x800421a0f2,%rdi
  800420c916:	00 00 00 
  800420c919:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c91e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420c925:	00 00 00 
  800420c928:	ff d2                	callq  *%rdx
  800420c92a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c92e:	48 89 c7             	mov    %rax,%rdi
  800420c931:	48 b8 e0 c2 20 04 80 	movabs $0x800420c2e0,%rax
  800420c938:	00 00 00 
  800420c93b:	ff d0                	callq  *%rax
  800420c93d:	e9 16 01 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c942:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c946:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c94d:	48 83 f8 20          	cmp    $0x20,%rax
  800420c951:	75 33                	jne    800420c986 <trap_dispatch+0x14c>
  800420c953:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420c95a:	00 00 00 
  800420c95d:	ff d0                	callq  *%rax
  800420c95f:	85 c0                	test   %eax,%eax
  800420c961:	75 0c                	jne    800420c96f <trap_dispatch+0x135>
  800420c963:	48 b8 0a 89 21 04 80 	movabs $0x800421890a,%rax
  800420c96a:	00 00 00 
  800420c96d:	ff d0                	callq  *%rax
  800420c96f:	b8 04 00 00 00       	mov    $0x4,%eax
  800420c974:	0f 01 c1             	vmcall 
  800420c977:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420c97a:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420c981:	00 00 00 
  800420c984:	ff d0                	callq  *%rax
  800420c986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c98a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c991:	48 83 f8 21          	cmp    $0x21,%rax
  800420c995:	75 11                	jne    800420c9a8 <trap_dispatch+0x16e>
  800420c997:	48 b8 28 11 20 04 80 	movabs $0x8004201128,%rax
  800420c99e:	00 00 00 
  800420c9a1:	ff d0                	callq  *%rax
  800420c9a3:	e9 b0 00 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c9a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ac:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c9b3:	48 83 f8 24          	cmp    $0x24,%rax
  800420c9b7:	75 11                	jne    800420c9ca <trap_dispatch+0x190>
  800420c9b9:	48 b8 a7 08 20 04 80 	movabs $0x80042008a7,%rax
  800420c9c0:	00 00 00 
  800420c9c3:	ff d0                	callq  *%rax
  800420c9c5:	e9 8e 00 00 00       	jmpq   800420ca58 <trap_dispatch+0x21e>
  800420c9ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ce:	48 89 c7             	mov    %rax,%rdi
  800420c9d1:	48 b8 e0 c2 20 04 80 	movabs $0x800420c2e0,%rax
  800420c9d8:	00 00 00 
  800420c9db:	ff d0                	callq  *%rax
  800420c9dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9e1:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420c9e8:	66 83 f8 08          	cmp    $0x8,%ax
  800420c9ec:	75 2a                	jne    800420ca18 <trap_dispatch+0x1de>
  800420c9ee:	48 ba 0f a1 21 04 80 	movabs $0x800421a10f,%rdx
  800420c9f5:	00 00 00 
  800420c9f8:	be 77 01 00 00       	mov    $0x177,%esi
  800420c9fd:	48 bf 28 a1 21 04 80 	movabs $0x800421a128,%rdi
  800420ca04:	00 00 00 
  800420ca07:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca0c:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420ca13:	00 00 00 
  800420ca16:	ff d1                	callq  *%rcx
  800420ca18:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ca1f:	00 00 00 
  800420ca22:	ff d0                	callq  *%rax
  800420ca24:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ca2b:	00 00 00 
  800420ca2e:	48 98                	cltq   
  800420ca30:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca34:	48 89 c1             	mov    %rax,%rcx
  800420ca37:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ca3b:	48 01 c8             	add    %rcx,%rax
  800420ca3e:	48 01 d0             	add    %rdx,%rax
  800420ca41:	48 83 c0 08          	add    $0x8,%rax
  800420ca45:	48 8b 00             	mov    (%rax),%rax
  800420ca48:	48 89 c7             	mov    %rax,%rdi
  800420ca4b:	48 b8 b6 8e 20 04 80 	movabs $0x8004208eb6,%rax
  800420ca52:	00 00 00 
  800420ca55:	ff d0                	callq  *%rax
  800420ca57:	90                   	nop
  800420ca58:	c9                   	leaveq 
  800420ca59:	c3                   	retq   

000000800420ca5a <trap>:
  800420ca5a:	55                   	push   %rbp
  800420ca5b:	48 89 e5             	mov    %rsp,%rbp
  800420ca5e:	48 83 ec 20          	sub    $0x20,%rsp
  800420ca62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ca66:	fc                   	cld    
  800420ca67:	48 b8 d0 d5 69 04 80 	movabs $0x800469d5d0,%rax
  800420ca6e:	00 00 00 
  800420ca71:	48 8b 00             	mov    (%rax),%rax
  800420ca74:	48 85 c0             	test   %rax,%rax
  800420ca77:	74 01                	je     800420ca7a <trap+0x20>
  800420ca79:	f4                   	hlt    
  800420ca7a:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ca81:	00 00 00 
  800420ca84:	ff d0                	callq  *%rax
  800420ca86:	48 98                	cltq   
  800420ca88:	48 c1 e0 03          	shl    $0x3,%rax
  800420ca8c:	48 89 c2             	mov    %rax,%rdx
  800420ca8f:	48 c1 e2 04          	shl    $0x4,%rdx
  800420ca93:	48 01 d0             	add    %rdx,%rax
  800420ca96:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ca9d:	00 00 00 
  800420caa0:	48 01 d0             	add    %rdx,%rax
  800420caa3:	48 83 c0 04          	add    $0x4,%rax
  800420caa7:	be 01 00 00 00       	mov    $0x1,%esi
  800420caac:	48 89 c7             	mov    %rax,%rdi
  800420caaf:	48 b8 ac 96 20 04 80 	movabs $0x80042096ac,%rax
  800420cab6:	00 00 00 
  800420cab9:	ff d0                	callq  *%rax
  800420cabb:	83 f8 02             	cmp    $0x2,%eax
  800420cabe:	75 0c                	jne    800420cacc <trap+0x72>
  800420cac0:	48 b8 d1 96 20 04 80 	movabs $0x80042096d1,%rax
  800420cac7:	00 00 00 
  800420caca:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420cacc:	9c                   	pushfq 
  800420cacd:	58                   	pop    %rax
  800420cace:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420cad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cad6:	25 00 02 00 00       	and    $0x200,%eax
  800420cadb:	48 85 c0             	test   %rax,%rax
  800420cade:	74 35                	je     800420cb15 <trap+0xbb>
  800420cae0:	48 b9 37 a1 21 04 80 	movabs $0x800421a137,%rcx
  800420cae7:	00 00 00 
  800420caea:	48 ba 50 a1 21 04 80 	movabs $0x800421a150,%rdx
  800420caf1:	00 00 00 
  800420caf4:	be 94 01 00 00       	mov    $0x194,%esi
  800420caf9:	48 bf 28 a1 21 04 80 	movabs $0x800421a128,%rdi
  800420cb00:	00 00 00 
  800420cb03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb08:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420cb0f:	00 00 00 
  800420cb12:	41 ff d0             	callq  *%r8
  800420cb15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb19:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cb20:	0f b7 c0             	movzwl %ax,%eax
  800420cb23:	83 e0 03             	and    $0x3,%eax
  800420cb26:	83 f8 03             	cmp    $0x3,%eax
  800420cb29:	0f 85 a9 01 00 00    	jne    800420ccd8 <trap+0x27e>
  800420cb2f:	48 b8 d1 96 20 04 80 	movabs $0x80042096d1,%rax
  800420cb36:	00 00 00 
  800420cb39:	ff d0                	callq  *%rax
  800420cb3b:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cb42:	00 00 00 
  800420cb45:	ff d0                	callq  *%rax
  800420cb47:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cb4e:	00 00 00 
  800420cb51:	48 98                	cltq   
  800420cb53:	48 c1 e0 03          	shl    $0x3,%rax
  800420cb57:	48 89 c1             	mov    %rax,%rcx
  800420cb5a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cb5e:	48 01 c8             	add    %rcx,%rax
  800420cb61:	48 01 d0             	add    %rdx,%rax
  800420cb64:	48 83 c0 08          	add    $0x8,%rax
  800420cb68:	48 8b 00             	mov    (%rax),%rax
  800420cb6b:	48 85 c0             	test   %rax,%rax
  800420cb6e:	75 35                	jne    800420cba5 <trap+0x14b>
  800420cb70:	48 b9 65 a1 21 04 80 	movabs $0x800421a165,%rcx
  800420cb77:	00 00 00 
  800420cb7a:	48 ba 50 a1 21 04 80 	movabs $0x800421a150,%rdx
  800420cb81:	00 00 00 
  800420cb84:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420cb89:	48 bf 28 a1 21 04 80 	movabs $0x800421a128,%rdi
  800420cb90:	00 00 00 
  800420cb93:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb98:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420cb9f:	00 00 00 
  800420cba2:	41 ff d0             	callq  *%r8
  800420cba5:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cbac:	00 00 00 
  800420cbaf:	ff d0                	callq  *%rax
  800420cbb1:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cbb8:	00 00 00 
  800420cbbb:	48 98                	cltq   
  800420cbbd:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbc1:	48 89 c1             	mov    %rax,%rcx
  800420cbc4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cbc8:	48 01 c8             	add    %rcx,%rax
  800420cbcb:	48 01 d0             	add    %rdx,%rax
  800420cbce:	48 83 c0 08          	add    $0x8,%rax
  800420cbd2:	48 8b 00             	mov    (%rax),%rax
  800420cbd5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cbdb:	83 f8 01             	cmp    $0x1,%eax
  800420cbde:	75 7f                	jne    800420cc5f <trap+0x205>
  800420cbe0:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cbe7:	00 00 00 
  800420cbea:	ff d0                	callq  *%rax
  800420cbec:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cbf3:	00 00 00 
  800420cbf6:	48 98                	cltq   
  800420cbf8:	48 c1 e0 03          	shl    $0x3,%rax
  800420cbfc:	48 89 c1             	mov    %rax,%rcx
  800420cbff:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc03:	48 01 c8             	add    %rcx,%rax
  800420cc06:	48 01 d0             	add    %rdx,%rax
  800420cc09:	48 83 c0 08          	add    $0x8,%rax
  800420cc0d:	48 8b 00             	mov    (%rax),%rax
  800420cc10:	48 89 c7             	mov    %rax,%rdi
  800420cc13:	48 b8 25 8a 20 04 80 	movabs $0x8004208a25,%rax
  800420cc1a:	00 00 00 
  800420cc1d:	ff d0                	callq  *%rax
  800420cc1f:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cc26:	00 00 00 
  800420cc29:	ff d0                	callq  *%rax
  800420cc2b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cc32:	00 00 00 
  800420cc35:	48 98                	cltq   
  800420cc37:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc3b:	48 89 c1             	mov    %rax,%rcx
  800420cc3e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc42:	48 01 c8             	add    %rcx,%rax
  800420cc45:	48 01 d0             	add    %rdx,%rax
  800420cc48:	48 83 c0 08          	add    $0x8,%rax
  800420cc4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420cc53:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420cc5a:	00 00 00 
  800420cc5d:	ff d0                	callq  *%rax
  800420cc5f:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cc66:	00 00 00 
  800420cc69:	ff d0                	callq  *%rax
  800420cc6b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cc72:	00 00 00 
  800420cc75:	48 98                	cltq   
  800420cc77:	48 c1 e0 03          	shl    $0x3,%rax
  800420cc7b:	48 89 c1             	mov    %rax,%rcx
  800420cc7e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cc82:	48 01 c8             	add    %rcx,%rax
  800420cc85:	48 01 d0             	add    %rdx,%rax
  800420cc88:	48 83 c0 08          	add    $0x8,%rax
  800420cc8c:	48 8b 10             	mov    (%rax),%rdx
  800420cc8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc93:	48 89 c6             	mov    %rax,%rsi
  800420cc96:	b8 18 00 00 00       	mov    $0x18,%eax
  800420cc9b:	48 89 d7             	mov    %rdx,%rdi
  800420cc9e:	48 89 c1             	mov    %rax,%rcx
  800420cca1:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420cca4:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ccab:	00 00 00 
  800420ccae:	ff d0                	callq  *%rax
  800420ccb0:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ccb7:	00 00 00 
  800420ccba:	48 98                	cltq   
  800420ccbc:	48 c1 e0 03          	shl    $0x3,%rax
  800420ccc0:	48 89 c1             	mov    %rax,%rcx
  800420ccc3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ccc7:	48 01 c8             	add    %rcx,%rax
  800420ccca:	48 01 d0             	add    %rdx,%rax
  800420cccd:	48 83 c0 08          	add    $0x8,%rax
  800420ccd1:	48 8b 00             	mov    (%rax),%rax
  800420ccd4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ccd8:	48 b8 90 f2 49 04 80 	movabs $0x800449f290,%rax
  800420ccdf:	00 00 00 
  800420cce2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420cce6:	48 89 10             	mov    %rdx,(%rax)
  800420cce9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cced:	48 89 c7             	mov    %rax,%rdi
  800420ccf0:	48 b8 3a c8 20 04 80 	movabs $0x800420c83a,%rax
  800420ccf7:	00 00 00 
  800420ccfa:	ff d0                	callq  *%rax
  800420ccfc:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cd03:	00 00 00 
  800420cd06:	ff d0                	callq  *%rax
  800420cd08:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cd0f:	00 00 00 
  800420cd12:	48 98                	cltq   
  800420cd14:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd18:	48 89 c1             	mov    %rax,%rcx
  800420cd1b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd1f:	48 01 c8             	add    %rcx,%rax
  800420cd22:	48 01 d0             	add    %rdx,%rax
  800420cd25:	48 83 c0 08          	add    $0x8,%rax
  800420cd29:	48 8b 00             	mov    (%rax),%rax
  800420cd2c:	48 85 c0             	test   %rax,%rax
  800420cd2f:	74 7a                	je     800420cdab <trap+0x351>
  800420cd31:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cd38:	00 00 00 
  800420cd3b:	ff d0                	callq  *%rax
  800420cd3d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cd44:	00 00 00 
  800420cd47:	48 98                	cltq   
  800420cd49:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd4d:	48 89 c1             	mov    %rax,%rcx
  800420cd50:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd54:	48 01 c8             	add    %rcx,%rax
  800420cd57:	48 01 d0             	add    %rdx,%rax
  800420cd5a:	48 83 c0 08          	add    $0x8,%rax
  800420cd5e:	48 8b 00             	mov    (%rax),%rax
  800420cd61:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420cd67:	83 f8 03             	cmp    $0x3,%eax
  800420cd6a:	75 3f                	jne    800420cdab <trap+0x351>
  800420cd6c:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cd73:	00 00 00 
  800420cd76:	ff d0                	callq  *%rax
  800420cd78:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cd7f:	00 00 00 
  800420cd82:	48 98                	cltq   
  800420cd84:	48 c1 e0 03          	shl    $0x3,%rax
  800420cd88:	48 89 c1             	mov    %rax,%rcx
  800420cd8b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cd8f:	48 01 c8             	add    %rcx,%rax
  800420cd92:	48 01 d0             	add    %rdx,%rax
  800420cd95:	48 83 c0 08          	add    $0x8,%rax
  800420cd99:	48 8b 00             	mov    (%rax),%rax
  800420cd9c:	48 89 c7             	mov    %rax,%rdi
  800420cd9f:	48 b8 81 90 20 04 80 	movabs $0x8004209081,%rax
  800420cda6:	00 00 00 
  800420cda9:	ff d0                	callq  *%rax
  800420cdab:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420cdb2:	00 00 00 
  800420cdb5:	ff d0                	callq  *%rax

000000800420cdb7 <page_fault_handler>:
  800420cdb7:	55                   	push   %rbp
  800420cdb8:	48 89 e5             	mov    %rsp,%rbp
  800420cdbb:	53                   	push   %rbx
  800420cdbc:	48 83 ec 38          	sub    $0x38,%rsp
  800420cdc0:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420cdc4:	0f 20 d0             	mov    %cr2,%rax
  800420cdc7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420cdcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420cdcf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420cdd3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cdd7:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cdde:	0f b7 c0             	movzwl %ax,%eax
  800420cde1:	83 e0 03             	and    $0x3,%eax
  800420cde4:	85 c0                	test   %eax,%eax
  800420cde6:	75 3d                	jne    800420ce25 <page_fault_handler+0x6e>
  800420cde8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cdec:	48 89 c7             	mov    %rax,%rdi
  800420cdef:	48 b8 e0 c2 20 04 80 	movabs $0x800420c2e0,%rax
  800420cdf6:	00 00 00 
  800420cdf9:	ff d0                	callq  *%rax
  800420cdfb:	48 ba 6c a1 21 04 80 	movabs $0x800421a16c,%rdx
  800420ce02:	00 00 00 
  800420ce05:	be de 01 00 00       	mov    $0x1de,%esi
  800420ce0a:	48 bf 28 a1 21 04 80 	movabs $0x800421a128,%rdi
  800420ce11:	00 00 00 
  800420ce14:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce19:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420ce20:	00 00 00 
  800420ce23:	ff d1                	callq  *%rcx
  800420ce25:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ce2c:	00 00 00 
  800420ce2f:	ff d0                	callq  *%rax
  800420ce31:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ce38:	00 00 00 
  800420ce3b:	48 98                	cltq   
  800420ce3d:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce41:	48 89 c1             	mov    %rax,%rcx
  800420ce44:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce48:	48 01 c8             	add    %rcx,%rax
  800420ce4b:	48 01 d0             	add    %rdx,%rax
  800420ce4e:	48 83 c0 08          	add    $0x8,%rax
  800420ce52:	48 8b 00             	mov    (%rax),%rax
  800420ce55:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420ce5c:	48 85 c0             	test   %rax,%rax
  800420ce5f:	0f 85 b8 00 00 00    	jne    800420cf1d <page_fault_handler+0x166>
  800420ce65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ce69:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420ce70:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ce77:	00 00 00 
  800420ce7a:	ff d0                	callq  *%rax
  800420ce7c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ce83:	00 00 00 
  800420ce86:	48 98                	cltq   
  800420ce88:	48 c1 e0 03          	shl    $0x3,%rax
  800420ce8c:	48 89 c1             	mov    %rax,%rcx
  800420ce8f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ce93:	48 01 c8             	add    %rcx,%rax
  800420ce96:	48 01 d0             	add    %rdx,%rax
  800420ce99:	48 83 c0 08          	add    $0x8,%rax
  800420ce9d:	48 8b 00             	mov    (%rax),%rax
  800420cea0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420cea6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ceaa:	48 89 d9             	mov    %rbx,%rcx
  800420cead:	89 c6                	mov    %eax,%esi
  800420ceaf:	48 bf 78 a1 21 04 80 	movabs $0x800421a178,%rdi
  800420ceb6:	00 00 00 
  800420ceb9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cebe:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  800420cec5:	00 00 00 
  800420cec8:	41 ff d0             	callq  *%r8
  800420cecb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cecf:	48 89 c7             	mov    %rax,%rdi
  800420ced2:	48 b8 e0 c2 20 04 80 	movabs $0x800420c2e0,%rax
  800420ced9:	00 00 00 
  800420cedc:	ff d0                	callq  *%rax
  800420cede:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cee5:	00 00 00 
  800420cee8:	ff d0                	callq  *%rax
  800420ceea:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cef1:	00 00 00 
  800420cef4:	48 98                	cltq   
  800420cef6:	48 c1 e0 03          	shl    $0x3,%rax
  800420cefa:	48 89 c1             	mov    %rax,%rcx
  800420cefd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cf01:	48 01 c8             	add    %rcx,%rax
  800420cf04:	48 01 d0             	add    %rdx,%rax
  800420cf07:	48 83 c0 08          	add    $0x8,%rax
  800420cf0b:	48 8b 00             	mov    (%rax),%rax
  800420cf0e:	48 89 c7             	mov    %rax,%rdi
  800420cf11:	48 b8 b6 8e 20 04 80 	movabs $0x8004208eb6,%rax
  800420cf18:	00 00 00 
  800420cf1b:	ff d0                	callq  *%rax
  800420cf1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf21:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cf28:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420cf2d:	48 39 c2             	cmp    %rax,%rdx
  800420cf30:	76 2c                	jbe    800420cf5e <page_fault_handler+0x1a7>
  800420cf32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf36:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420cf3d:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420cf42:	48 39 c2             	cmp    %rax,%rdx
  800420cf45:	77 17                	ja     800420cf5e <page_fault_handler+0x1a7>
  800420cf47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cf4b:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cf52:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420cf58:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf5c:	eb 09                	jmp    800420cf67 <page_fault_handler+0x1b0>
  800420cf5e:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420cf63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420cf67:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420cf6e:	00 00 00 
  800420cf71:	ff d0                	callq  *%rax
  800420cf73:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420cf7a:	00 00 00 
  800420cf7d:	48 98                	cltq   
  800420cf7f:	48 c1 e0 03          	shl    $0x3,%rax
  800420cf83:	48 89 c1             	mov    %rax,%rcx
  800420cf86:	48 c1 e1 04          	shl    $0x4,%rcx
  800420cf8a:	48 01 c8             	add    %rcx,%rax
  800420cf8d:	48 01 d0             	add    %rdx,%rax
  800420cf90:	48 83 c0 08          	add    $0x8,%rax
  800420cf94:	48 8b 00             	mov    (%rax),%rax
  800420cf97:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420cf9b:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420cfa0:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420cfa5:	48 89 c7             	mov    %rax,%rdi
  800420cfa8:	48 b8 c1 42 20 04 80 	movabs $0x80042042c1,%rax
  800420cfaf:	00 00 00 
  800420cfb2:	ff d0                	callq  *%rax
  800420cfb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfb8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420cfbc:	48 89 10             	mov    %rdx,(%rax)
  800420cfbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420cfc3:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420cfca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfce:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420cfd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cfd6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420cfda:	48 8b 0a             	mov    (%rdx),%rcx
  800420cfdd:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420cfe1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420cfe5:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420cfe9:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420cfed:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420cff1:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420cff5:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420cff9:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420cffd:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d001:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d005:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d009:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d00d:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d011:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d015:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d019:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d01d:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d021:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d025:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d029:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d02d:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d031:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d035:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d039:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d03d:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d041:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d045:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d049:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d04d:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d054:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d058:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d05f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d063:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d06a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d06e:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d075:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d079:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d080:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d084:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d08b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d08f:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d096:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d09a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d09e:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d0a5:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d0ac:	00 00 00 
  800420d0af:	ff d0                	callq  *%rax
  800420d0b1:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d0b8:	00 00 00 
  800420d0bb:	48 98                	cltq   
  800420d0bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0c1:	48 89 c1             	mov    %rax,%rcx
  800420d0c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0c8:	48 01 c8             	add    %rcx,%rax
  800420d0cb:	48 01 d0             	add    %rdx,%rax
  800420d0ce:	48 83 c0 08          	add    $0x8,%rax
  800420d0d2:	48 8b 00             	mov    (%rax),%rax
  800420d0d5:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d0dc:	48 89 c2             	mov    %rax,%rdx
  800420d0df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d0e3:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d0ea:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d0f1:	00 00 00 
  800420d0f4:	ff d0                	callq  *%rax
  800420d0f6:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d0fd:	00 00 00 
  800420d100:	48 98                	cltq   
  800420d102:	48 c1 e0 03          	shl    $0x3,%rax
  800420d106:	48 89 c1             	mov    %rax,%rcx
  800420d109:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d10d:	48 01 c8             	add    %rcx,%rax
  800420d110:	48 01 d0             	add    %rdx,%rax
  800420d113:	48 83 c0 08          	add    $0x8,%rax
  800420d117:	48 8b 00             	mov    (%rax),%rax
  800420d11a:	48 89 c7             	mov    %rax,%rdi
  800420d11d:	48 b8 81 90 20 04 80 	movabs $0x8004209081,%rax
  800420d124:	00 00 00 
  800420d127:	ff d0                	callq  *%rax
  800420d129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000800420d130 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d130:	6a 00                	pushq  $0x0
  800420d132:	6a 00                	pushq  $0x0
  800420d134:	e9 f7 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d139:	90                   	nop

000000800420d13a <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d13a:	6a 00                	pushq  $0x0
  800420d13c:	6a 01                	pushq  $0x1
  800420d13e:	e9 ed 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d143:	90                   	nop

000000800420d144 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d144:	6a 00                	pushq  $0x0
  800420d146:	6a 02                	pushq  $0x2
  800420d148:	e9 e3 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d14d:	90                   	nop

000000800420d14e <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d14e:	6a 00                	pushq  $0x0
  800420d150:	6a 03                	pushq  $0x3
  800420d152:	e9 d9 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d157:	90                   	nop

000000800420d158 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d158:	6a 00                	pushq  $0x0
  800420d15a:	6a 04                	pushq  $0x4
  800420d15c:	e9 cf 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d161:	90                   	nop

000000800420d162 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d162:	6a 00                	pushq  $0x0
  800420d164:	6a 05                	pushq  $0x5
  800420d166:	e9 c5 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d16b:	90                   	nop

000000800420d16c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d16c:	6a 00                	pushq  $0x0
  800420d16e:	6a 06                	pushq  $0x6
  800420d170:	e9 bb 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d175:	90                   	nop

000000800420d176 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d176:	6a 00                	pushq  $0x0
  800420d178:	6a 07                	pushq  $0x7
  800420d17a:	e9 b1 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d17f:	90                   	nop

000000800420d180 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d180:	6a 08                	pushq  $0x8
  800420d182:	e9 a9 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d187:	90                   	nop

000000800420d188 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d188:	6a 0a                	pushq  $0xa
  800420d18a:	e9 a1 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d18f:	90                   	nop

000000800420d190 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d190:	6a 0b                	pushq  $0xb
  800420d192:	e9 99 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d197:	90                   	nop

000000800420d198 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d198:	6a 0c                	pushq  $0xc
  800420d19a:	e9 91 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d19f:	90                   	nop

000000800420d1a0 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d1a0:	6a 0d                	pushq  $0xd
  800420d1a2:	e9 89 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d1a7:	90                   	nop

000000800420d1a8 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d1a8:	6a 0e                	pushq  $0xe
  800420d1aa:	e9 81 00 00 00       	jmpq   800420d230 <_alltraps>
  800420d1af:	90                   	nop

000000800420d1b0 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d1b0:	6a 00                	pushq  $0x0
  800420d1b2:	6a 10                	pushq  $0x10
  800420d1b4:	eb 7a                	jmp    800420d230 <_alltraps>

000000800420d1b6 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d1b6:	6a 11                	pushq  $0x11
  800420d1b8:	eb 76                	jmp    800420d230 <_alltraps>

000000800420d1ba <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d1ba:	6a 00                	pushq  $0x0
  800420d1bc:	6a 12                	pushq  $0x12
  800420d1be:	eb 70                	jmp    800420d230 <_alltraps>

000000800420d1c0 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d1c0:	6a 00                	pushq  $0x0
  800420d1c2:	6a 20                	pushq  $0x20
  800420d1c4:	eb 6a                	jmp    800420d230 <_alltraps>

000000800420d1c6 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d1c6:	6a 00                	pushq  $0x0
  800420d1c8:	6a 21                	pushq  $0x21
  800420d1ca:	eb 64                	jmp    800420d230 <_alltraps>

000000800420d1cc <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d1cc:	6a 00                	pushq  $0x0
  800420d1ce:	6a 22                	pushq  $0x22
  800420d1d0:	eb 5e                	jmp    800420d230 <_alltraps>

000000800420d1d2 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d1d2:	6a 00                	pushq  $0x0
  800420d1d4:	6a 23                	pushq  $0x23
  800420d1d6:	eb 58                	jmp    800420d230 <_alltraps>

000000800420d1d8 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d1d8:	6a 00                	pushq  $0x0
  800420d1da:	6a 24                	pushq  $0x24
  800420d1dc:	eb 52                	jmp    800420d230 <_alltraps>

000000800420d1de <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d1de:	6a 00                	pushq  $0x0
  800420d1e0:	6a 25                	pushq  $0x25
  800420d1e2:	eb 4c                	jmp    800420d230 <_alltraps>

000000800420d1e4 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d1e4:	6a 00                	pushq  $0x0
  800420d1e6:	6a 26                	pushq  $0x26
  800420d1e8:	eb 46                	jmp    800420d230 <_alltraps>

000000800420d1ea <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d1ea:	6a 00                	pushq  $0x0
  800420d1ec:	6a 27                	pushq  $0x27
  800420d1ee:	eb 40                	jmp    800420d230 <_alltraps>

000000800420d1f0 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d1f0:	6a 00                	pushq  $0x0
  800420d1f2:	6a 28                	pushq  $0x28
  800420d1f4:	eb 3a                	jmp    800420d230 <_alltraps>

000000800420d1f6 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d1f6:	6a 00                	pushq  $0x0
  800420d1f8:	6a 29                	pushq  $0x29
  800420d1fa:	eb 34                	jmp    800420d230 <_alltraps>

000000800420d1fc <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d1fc:	6a 00                	pushq  $0x0
  800420d1fe:	6a 2a                	pushq  $0x2a
  800420d200:	eb 2e                	jmp    800420d230 <_alltraps>

000000800420d202 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d202:	6a 00                	pushq  $0x0
  800420d204:	6a 2b                	pushq  $0x2b
  800420d206:	eb 28                	jmp    800420d230 <_alltraps>

000000800420d208 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d208:	6a 00                	pushq  $0x0
  800420d20a:	6a 2c                	pushq  $0x2c
  800420d20c:	eb 22                	jmp    800420d230 <_alltraps>

000000800420d20e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d20e:	6a 00                	pushq  $0x0
  800420d210:	6a 2d                	pushq  $0x2d
  800420d212:	eb 1c                	jmp    800420d230 <_alltraps>

000000800420d214 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d214:	6a 00                	pushq  $0x0
  800420d216:	6a 2e                	pushq  $0x2e
  800420d218:	eb 16                	jmp    800420d230 <_alltraps>

000000800420d21a <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d21a:	6a 00                	pushq  $0x0
  800420d21c:	6a 2f                	pushq  $0x2f
  800420d21e:	eb 10                	jmp    800420d230 <_alltraps>

000000800420d220 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d220:	6a 00                	pushq  $0x0
  800420d222:	6a 30                	pushq  $0x30
  800420d224:	eb 0a                	jmp    800420d230 <_alltraps>

000000800420d226 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d226:	68 f4 01 00 00       	pushq  $0x1f4
  800420d22b:	eb 03                	jmp    800420d230 <_alltraps>
  800420d22d:	0f 1f 00             	nopl   (%rax)

000000800420d230 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d230:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d234:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d238:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d23b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d23f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d244:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d249:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d24e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d253:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d258:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d25d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d262:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d267:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d26c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d271:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d276:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d27b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d280:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d285:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d289:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d28e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d290:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d292:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d294:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d296:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d298:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d29b:	e8 ba f7 ff ff       	callq  800420ca5a <trap>

000000800420d2a0 <spin>:
spin:	jmp spin
  800420d2a0:	eb fe                	jmp    800420d2a0 <spin>

000000800420d2a2 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d2a2:	55                   	push   %rbp
  800420d2a3:	48 89 e5             	mov    %rsp,%rbp
  800420d2a6:	48 83 ec 20          	sub    $0x20,%rsp
  800420d2aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d2ae:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d2b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d2b5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d2b8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d2bc:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d2bf:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d2c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d2c5:	c9                   	leaveq 
  800420d2c6:	c3                   	retq   

000000800420d2c7 <unlock_kernel>:
  800420d2c7:	55                   	push   %rbp
  800420d2c8:	48 89 e5             	mov    %rsp,%rbp
  800420d2cb:	48 bf 60 c7 22 04 80 	movabs $0x800422c760,%rdi
  800420d2d2:	00 00 00 
  800420d2d5:	48 b8 04 75 21 04 80 	movabs $0x8004217504,%rax
  800420d2dc:	00 00 00 
  800420d2df:	ff d0                	callq  *%rax
  800420d2e1:	f3 90                	pause  
  800420d2e3:	90                   	nop
  800420d2e4:	5d                   	pop    %rbp
  800420d2e5:	c3                   	retq   

000000800420d2e6 <sched_yield>:
  800420d2e6:	55                   	push   %rbp
  800420d2e7:	48 89 e5             	mov    %rsp,%rbp
  800420d2ea:	48 83 ec 10          	sub    $0x10,%rsp
  800420d2ee:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d2f5:	00 00 00 
  800420d2f8:	ff d0                	callq  *%rax
  800420d2fa:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d301:	00 00 00 
  800420d304:	48 98                	cltq   
  800420d306:	48 c1 e0 03          	shl    $0x3,%rax
  800420d30a:	48 89 c1             	mov    %rax,%rcx
  800420d30d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d311:	48 01 c8             	add    %rcx,%rax
  800420d314:	48 01 d0             	add    %rdx,%rax
  800420d317:	48 83 c0 08          	add    $0x8,%rax
  800420d31b:	48 8b 00             	mov    (%rax),%rax
  800420d31e:	48 85 c0             	test   %rax,%rax
  800420d321:	74 60                	je     800420d383 <sched_yield+0x9d>
  800420d323:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d32a:	00 00 00 
  800420d32d:	ff d0                	callq  *%rax
  800420d32f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d336:	00 00 00 
  800420d339:	48 98                	cltq   
  800420d33b:	48 c1 e0 03          	shl    $0x3,%rax
  800420d33f:	48 89 c1             	mov    %rax,%rcx
  800420d342:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d346:	48 01 c8             	add    %rcx,%rax
  800420d349:	48 01 d0             	add    %rdx,%rax
  800420d34c:	48 83 c0 08          	add    $0x8,%rax
  800420d350:	48 8b 00             	mov    (%rax),%rax
  800420d353:	48 89 c2             	mov    %rax,%rdx
  800420d356:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d35d:	00 00 00 
  800420d360:	48 8b 00             	mov    (%rax),%rax
  800420d363:	48 29 c2             	sub    %rax,%rdx
  800420d366:	48 89 d0             	mov    %rdx,%rax
  800420d369:	48 c1 f8 03          	sar    $0x3,%rax
  800420d36d:	48 89 c2             	mov    %rax,%rdx
  800420d370:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420d377:	fa a4 4f 
  800420d37a:	48 0f af c2          	imul   %rdx,%rax
  800420d37e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d381:	eb 07                	jmp    800420d38a <sched_yield+0xa4>
  800420d383:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420d38a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420d391:	eb 75                	jmp    800420d408 <sched_yield+0x122>
  800420d393:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420d396:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d399:	01 c2                	add    %eax,%edx
  800420d39b:	89 d0                	mov    %edx,%eax
  800420d39d:	c1 f8 1f             	sar    $0x1f,%eax
  800420d3a0:	c1 e8 16             	shr    $0x16,%eax
  800420d3a3:	01 c2                	add    %eax,%edx
  800420d3a5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420d3ab:	29 c2                	sub    %eax,%edx
  800420d3ad:	89 d0                	mov    %edx,%eax
  800420d3af:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420d3b2:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d3b9:	00 00 00 
  800420d3bc:	48 8b 10             	mov    (%rax),%rdx
  800420d3bf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d3c2:	48 98                	cltq   
  800420d3c4:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d3cb:	48 01 d0             	add    %rdx,%rax
  800420d3ce:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3d4:	83 f8 02             	cmp    $0x2,%eax
  800420d3d7:	75 2b                	jne    800420d404 <sched_yield+0x11e>
  800420d3d9:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d3e0:	00 00 00 
  800420d3e3:	48 8b 10             	mov    (%rax),%rdx
  800420d3e6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420d3e9:	48 98                	cltq   
  800420d3eb:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d3f2:	48 01 d0             	add    %rdx,%rax
  800420d3f5:	48 89 c7             	mov    %rax,%rdi
  800420d3f8:	48 b8 81 90 20 04 80 	movabs $0x8004209081,%rax
  800420d3ff:	00 00 00 
  800420d402:	ff d0                	callq  *%rax
  800420d404:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420d408:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420d40f:	7e 82                	jle    800420d393 <sched_yield+0xad>
  800420d411:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d418:	00 00 00 
  800420d41b:	ff d0                	callq  *%rax
  800420d41d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d424:	00 00 00 
  800420d427:	48 98                	cltq   
  800420d429:	48 c1 e0 03          	shl    $0x3,%rax
  800420d42d:	48 89 c1             	mov    %rax,%rcx
  800420d430:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d434:	48 01 c8             	add    %rcx,%rax
  800420d437:	48 01 d0             	add    %rdx,%rax
  800420d43a:	48 83 c0 08          	add    $0x8,%rax
  800420d43e:	48 8b 00             	mov    (%rax),%rax
  800420d441:	48 85 c0             	test   %rax,%rax
  800420d444:	74 7a                	je     800420d4c0 <sched_yield+0x1da>
  800420d446:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d44d:	00 00 00 
  800420d450:	ff d0                	callq  *%rax
  800420d452:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d459:	00 00 00 
  800420d45c:	48 98                	cltq   
  800420d45e:	48 c1 e0 03          	shl    $0x3,%rax
  800420d462:	48 89 c1             	mov    %rax,%rcx
  800420d465:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d469:	48 01 c8             	add    %rcx,%rax
  800420d46c:	48 01 d0             	add    %rdx,%rax
  800420d46f:	48 83 c0 08          	add    $0x8,%rax
  800420d473:	48 8b 00             	mov    (%rax),%rax
  800420d476:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d47c:	83 f8 03             	cmp    $0x3,%eax
  800420d47f:	75 3f                	jne    800420d4c0 <sched_yield+0x1da>
  800420d481:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d488:	00 00 00 
  800420d48b:	ff d0                	callq  *%rax
  800420d48d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d494:	00 00 00 
  800420d497:	48 98                	cltq   
  800420d499:	48 c1 e0 03          	shl    $0x3,%rax
  800420d49d:	48 89 c1             	mov    %rax,%rcx
  800420d4a0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4a4:	48 01 c8             	add    %rcx,%rax
  800420d4a7:	48 01 d0             	add    %rdx,%rax
  800420d4aa:	48 83 c0 08          	add    $0x8,%rax
  800420d4ae:	48 8b 00             	mov    (%rax),%rax
  800420d4b1:	48 89 c7             	mov    %rax,%rdi
  800420d4b4:	48 b8 81 90 20 04 80 	movabs $0x8004209081,%rax
  800420d4bb:	00 00 00 
  800420d4be:	ff d0                	callq  *%rax
  800420d4c0:	48 b8 cf d4 20 04 80 	movabs $0x800420d4cf,%rax
  800420d4c7:	00 00 00 
  800420d4ca:	ff d0                	callq  *%rax
  800420d4cc:	90                   	nop
  800420d4cd:	c9                   	leaveq 
  800420d4ce:	c3                   	retq   

000000800420d4cf <sched_halt>:
  800420d4cf:	55                   	push   %rbp
  800420d4d0:	48 89 e5             	mov    %rsp,%rbp
  800420d4d3:	48 83 ec 20          	sub    $0x20,%rsp
  800420d4d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420d4de:	eb 79                	jmp    800420d559 <sched_halt+0x8a>
  800420d4e0:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d4e7:	00 00 00 
  800420d4ea:	48 8b 10             	mov    (%rax),%rdx
  800420d4ed:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d4f0:	48 98                	cltq   
  800420d4f2:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d4f9:	48 01 d0             	add    %rdx,%rax
  800420d4fc:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d502:	83 f8 02             	cmp    $0x2,%eax
  800420d505:	74 5f                	je     800420d566 <sched_halt+0x97>
  800420d507:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d50e:	00 00 00 
  800420d511:	48 8b 10             	mov    (%rax),%rdx
  800420d514:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d517:	48 98                	cltq   
  800420d519:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d520:	48 01 d0             	add    %rdx,%rax
  800420d523:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d529:	83 f8 03             	cmp    $0x3,%eax
  800420d52c:	74 38                	je     800420d566 <sched_halt+0x97>
  800420d52e:	48 b8 58 e2 49 04 80 	movabs $0x800449e258,%rax
  800420d535:	00 00 00 
  800420d538:	48 8b 10             	mov    (%rax),%rdx
  800420d53b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d53e:	48 98                	cltq   
  800420d540:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420d547:	48 01 d0             	add    %rdx,%rax
  800420d54a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d550:	83 f8 01             	cmp    $0x1,%eax
  800420d553:	74 11                	je     800420d566 <sched_halt+0x97>
  800420d555:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420d559:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420d560:	0f 8e 7a ff ff ff    	jle    800420d4e0 <sched_halt+0x11>
  800420d566:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420d56d:	75 2e                	jne    800420d59d <sched_halt+0xce>
  800420d56f:	48 bf 80 a3 21 04 80 	movabs $0x800421a380,%rdi
  800420d576:	00 00 00 
  800420d579:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d57e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420d585:	00 00 00 
  800420d588:	ff d2                	callq  *%rdx
  800420d58a:	bf 00 00 00 00       	mov    $0x0,%edi
  800420d58f:	48 b8 b9 1b 20 04 80 	movabs $0x8004201bb9,%rax
  800420d596:	00 00 00 
  800420d599:	ff d0                	callq  *%rax
  800420d59b:	eb ed                	jmp    800420d58a <sched_halt+0xbb>
  800420d59d:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d5a4:	00 00 00 
  800420d5a7:	ff d0                	callq  *%rax
  800420d5a9:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d5b0:	00 00 00 
  800420d5b3:	48 98                	cltq   
  800420d5b5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5b9:	48 89 c1             	mov    %rax,%rcx
  800420d5bc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d5c0:	48 01 c8             	add    %rcx,%rax
  800420d5c3:	48 01 d0             	add    %rdx,%rax
  800420d5c6:	48 83 c0 08          	add    $0x8,%rax
  800420d5ca:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d5d1:	48 b8 e8 d5 69 04 80 	movabs $0x800469d5e8,%rax
  800420d5d8:	00 00 00 
  800420d5db:	48 8b 00             	mov    (%rax),%rax
  800420d5de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420d5e2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420d5e9:	00 00 00 
  800420d5ec:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420d5f0:	77 32                	ja     800420d624 <sched_halt+0x155>
  800420d5f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d5f6:	48 89 c1             	mov    %rax,%rcx
  800420d5f9:	48 ba b0 a3 21 04 80 	movabs $0x800421a3b0,%rdx
  800420d600:	00 00 00 
  800420d603:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420d608:	48 bf d4 a3 21 04 80 	movabs $0x800421a3d4,%rdi
  800420d60f:	00 00 00 
  800420d612:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d617:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420d61e:	00 00 00 
  800420d621:	41 ff d0             	callq  *%r8
  800420d624:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420d62b:	ff ff ff 
  800420d62e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d632:	48 01 d0             	add    %rdx,%rax
  800420d635:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420d639:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d63d:	0f 22 d8             	mov    %rax,%cr3
  800420d640:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d647:	00 00 00 
  800420d64a:	ff d0                	callq  *%rax
  800420d64c:	48 98                	cltq   
  800420d64e:	48 c1 e0 03          	shl    $0x3,%rax
  800420d652:	48 89 c2             	mov    %rax,%rdx
  800420d655:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d659:	48 01 d0             	add    %rdx,%rax
  800420d65c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d663:	00 00 00 
  800420d666:	48 01 d0             	add    %rdx,%rax
  800420d669:	48 83 c0 04          	add    $0x4,%rax
  800420d66d:	be 02 00 00 00       	mov    $0x2,%esi
  800420d672:	48 89 c7             	mov    %rax,%rdi
  800420d675:	48 b8 a2 d2 20 04 80 	movabs $0x800420d2a2,%rax
  800420d67c:	00 00 00 
  800420d67f:	ff d0                	callq  *%rax
  800420d681:	48 b8 c7 d2 20 04 80 	movabs $0x800420d2c7,%rax
  800420d688:	00 00 00 
  800420d68b:	ff d0                	callq  *%rax
  800420d68d:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d694:	00 00 00 
  800420d697:	ff d0                	callq  *%rax
  800420d699:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d6a0:	00 00 00 
  800420d6a3:	48 98                	cltq   
  800420d6a5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d6a9:	48 89 c1             	mov    %rax,%rcx
  800420d6ac:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d6b0:	48 01 c8             	add    %rcx,%rax
  800420d6b3:	48 01 d0             	add    %rdx,%rax
  800420d6b6:	48 83 c0 10          	add    $0x10,%rax
  800420d6ba:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420d6be:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420d6c5:	48 89 c4             	mov    %rax,%rsp
  800420d6c8:	6a 00                	pushq  $0x0
  800420d6ca:	6a 00                	pushq  $0x0
  800420d6cc:	fb                   	sti    
  800420d6cd:	f4                   	hlt    
  800420d6ce:	90                   	nop
  800420d6cf:	c9                   	leaveq 
  800420d6d0:	c3                   	retq   

000000800420d6d1 <sys_cputs>:
  800420d6d1:	55                   	push   %rbp
  800420d6d2:	48 89 e5             	mov    %rsp,%rbp
  800420d6d5:	48 83 ec 10          	sub    $0x10,%rsp
  800420d6d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420d6dd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420d6e1:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d6e8:	00 00 00 
  800420d6eb:	ff d0                	callq  *%rax
  800420d6ed:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d6f4:	00 00 00 
  800420d6f7:	48 98                	cltq   
  800420d6f9:	48 c1 e0 03          	shl    $0x3,%rax
  800420d6fd:	48 89 c1             	mov    %rax,%rcx
  800420d700:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d704:	48 01 c8             	add    %rcx,%rax
  800420d707:	48 01 d0             	add    %rdx,%rax
  800420d70a:	48 83 c0 08          	add    $0x8,%rax
  800420d70e:	48 8b 00             	mov    (%rax),%rax
  800420d711:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420d715:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420d719:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d71e:	48 89 c7             	mov    %rax,%rdi
  800420d721:	48 b8 c1 42 20 04 80 	movabs $0x80042042c1,%rax
  800420d728:	00 00 00 
  800420d72b:	ff d0                	callq  *%rax
  800420d72d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420d731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d735:	48 89 c6             	mov    %rax,%rsi
  800420d738:	48 bf e8 a3 21 04 80 	movabs $0x800421a3e8,%rdi
  800420d73f:	00 00 00 
  800420d742:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d747:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420d74e:	00 00 00 
  800420d751:	ff d1                	callq  *%rcx
  800420d753:	90                   	nop
  800420d754:	c9                   	leaveq 
  800420d755:	c3                   	retq   

000000800420d756 <sys_cgetc>:
  800420d756:	55                   	push   %rbp
  800420d757:	48 89 e5             	mov    %rsp,%rbp
  800420d75a:	48 b8 05 12 20 04 80 	movabs $0x8004201205,%rax
  800420d761:	00 00 00 
  800420d764:	ff d0                	callq  *%rax
  800420d766:	5d                   	pop    %rbp
  800420d767:	c3                   	retq   

000000800420d768 <sys_getenvid>:
  800420d768:	55                   	push   %rbp
  800420d769:	48 89 e5             	mov    %rsp,%rbp
  800420d76c:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d773:	00 00 00 
  800420d776:	ff d0                	callq  *%rax
  800420d778:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d77f:	00 00 00 
  800420d782:	48 98                	cltq   
  800420d784:	48 c1 e0 03          	shl    $0x3,%rax
  800420d788:	48 89 c1             	mov    %rax,%rcx
  800420d78b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d78f:	48 01 c8             	add    %rcx,%rax
  800420d792:	48 01 d0             	add    %rdx,%rax
  800420d795:	48 83 c0 08          	add    $0x8,%rax
  800420d799:	48 8b 00             	mov    (%rax),%rax
  800420d79c:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d7a2:	5d                   	pop    %rbp
  800420d7a3:	c3                   	retq   

000000800420d7a4 <sys_env_destroy>:
  800420d7a4:	55                   	push   %rbp
  800420d7a5:	48 89 e5             	mov    %rsp,%rbp
  800420d7a8:	48 83 ec 20          	sub    $0x20,%rsp
  800420d7ac:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d7af:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d7b3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d7b6:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d7bb:	48 89 ce             	mov    %rcx,%rsi
  800420d7be:	89 c7                	mov    %eax,%edi
  800420d7c0:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420d7c7:	00 00 00 
  800420d7ca:	ff d0                	callq  *%rax
  800420d7cc:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d7cf:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d7d3:	79 05                	jns    800420d7da <sys_env_destroy+0x36>
  800420d7d5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d7d8:	eb 18                	jmp    800420d7f2 <sys_env_destroy+0x4e>
  800420d7da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d7de:	48 89 c7             	mov    %rax,%rdi
  800420d7e1:	48 b8 b6 8e 20 04 80 	movabs $0x8004208eb6,%rax
  800420d7e8:	00 00 00 
  800420d7eb:	ff d0                	callq  *%rax
  800420d7ed:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d7f2:	c9                   	leaveq 
  800420d7f3:	c3                   	retq   

000000800420d7f4 <sys_yield>:
  800420d7f4:	55                   	push   %rbp
  800420d7f5:	48 89 e5             	mov    %rsp,%rbp
  800420d7f8:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420d7ff:	00 00 00 
  800420d802:	ff d0                	callq  *%rax

000000800420d804 <sys_exofork>:
  800420d804:	55                   	push   %rbp
  800420d805:	48 89 e5             	mov    %rsp,%rbp
  800420d808:	53                   	push   %rbx
  800420d809:	48 83 ec 18          	sub    $0x18,%rsp
  800420d80d:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d814:	00 00 00 
  800420d817:	ff d0                	callq  *%rax
  800420d819:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d820:	00 00 00 
  800420d823:	48 98                	cltq   
  800420d825:	48 c1 e0 03          	shl    $0x3,%rax
  800420d829:	48 89 c1             	mov    %rax,%rcx
  800420d82c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d830:	48 01 c8             	add    %rcx,%rax
  800420d833:	48 01 d0             	add    %rdx,%rax
  800420d836:	48 83 c0 08          	add    $0x8,%rax
  800420d83a:	48 8b 00             	mov    (%rax),%rax
  800420d83d:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420d843:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420d847:	89 d6                	mov    %edx,%esi
  800420d849:	48 89 c7             	mov    %rax,%rdi
  800420d84c:	48 b8 0e 83 20 04 80 	movabs $0x800420830e,%rax
  800420d853:	00 00 00 
  800420d856:	ff d0                	callq  *%rax
  800420d858:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420d85b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420d85f:	79 05                	jns    800420d866 <sys_exofork+0x62>
  800420d861:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d864:	eb 6c                	jmp    800420d8d2 <sys_exofork+0xce>
  800420d866:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d86a:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420d871:	00 00 00 
  800420d874:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420d878:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d87f:	00 00 00 
  800420d882:	ff d0                	callq  *%rax
  800420d884:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d88b:	00 00 00 
  800420d88e:	48 98                	cltq   
  800420d890:	48 c1 e0 03          	shl    $0x3,%rax
  800420d894:	48 89 c1             	mov    %rax,%rcx
  800420d897:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d89b:	48 01 c8             	add    %rcx,%rax
  800420d89e:	48 01 d0             	add    %rdx,%rax
  800420d8a1:	48 83 c0 08          	add    $0x8,%rax
  800420d8a5:	48 8b 00             	mov    (%rax),%rax
  800420d8a8:	48 89 da             	mov    %rbx,%rdx
  800420d8ab:	48 89 c6             	mov    %rax,%rsi
  800420d8ae:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d8b3:	48 89 d7             	mov    %rdx,%rdi
  800420d8b6:	48 89 c1             	mov    %rax,%rcx
  800420d8b9:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d8bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d8c0:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420d8c7:	00 
  800420d8c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420d8cc:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d8d2:	48 83 c4 18          	add    $0x18,%rsp
  800420d8d6:	5b                   	pop    %rbx
  800420d8d7:	5d                   	pop    %rbp
  800420d8d8:	c3                   	retq   

000000800420d8d9 <sys_env_set_status>:
  800420d8d9:	55                   	push   %rbp
  800420d8da:	48 89 e5             	mov    %rsp,%rbp
  800420d8dd:	48 83 ec 20          	sub    $0x20,%rsp
  800420d8e1:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420d8e4:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800420d8e7:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d8eb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420d8ee:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d8f3:	48 89 ce             	mov    %rcx,%rsi
  800420d8f6:	89 c7                	mov    %eax,%edi
  800420d8f8:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420d8ff:	00 00 00 
  800420d902:	ff d0                	callq  *%rax
  800420d904:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d907:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d90b:	79 05                	jns    800420d912 <sys_env_set_status+0x39>
  800420d90d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d910:	eb 25                	jmp    800420d937 <sys_env_set_status+0x5e>
  800420d912:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420d916:	74 0d                	je     800420d925 <sys_env_set_status+0x4c>
  800420d918:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420d91c:	74 07                	je     800420d925 <sys_env_set_status+0x4c>
  800420d91e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420d923:	eb 12                	jmp    800420d937 <sys_env_set_status+0x5e>
  800420d925:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420d929:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420d92c:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
  800420d932:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d937:	c9                   	leaveq 
  800420d938:	c3                   	retq   

000000800420d939 <sys_env_set_trapframe>:
  800420d939:	55                   	push   %rbp
  800420d93a:	48 89 e5             	mov    %rsp,%rbp
  800420d93d:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420d944:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420d94a:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420d951:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420d958:	00 00 00 
  800420d95b:	ff d0                	callq  *%rax
  800420d95d:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420d964:	00 00 00 
  800420d967:	48 98                	cltq   
  800420d969:	48 c1 e0 03          	shl    $0x3,%rax
  800420d96d:	48 89 c1             	mov    %rax,%rcx
  800420d970:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d974:	48 01 c8             	add    %rcx,%rax
  800420d977:	48 01 d0             	add    %rdx,%rax
  800420d97a:	48 83 c0 08          	add    $0x8,%rax
  800420d97e:	48 8b 00             	mov    (%rax),%rax
  800420d981:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420d988:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420d98d:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420d992:	48 89 c7             	mov    %rax,%rdi
  800420d995:	48 b8 c1 42 20 04 80 	movabs $0x80042042c1,%rax
  800420d99c:	00 00 00 
  800420d99f:	ff d0                	callq  *%rax
  800420d9a1:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800420d9a8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  800420d9af:	48 89 d6             	mov    %rdx,%rsi
  800420d9b2:	ba 18 00 00 00       	mov    $0x18,%edx
  800420d9b7:	48 89 c7             	mov    %rax,%rdi
  800420d9ba:	48 89 d1             	mov    %rdx,%rcx
  800420d9bd:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d9c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d9c4:	80 cc 02             	or     $0x2,%ah
  800420d9c7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420d9cb:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420d9cf:	83 c8 03             	or     $0x3,%eax
  800420d9d2:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  800420d9d6:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420d9da:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420d9e0:	ba 01 00 00 00       	mov    $0x1,%edx
  800420d9e5:	48 89 ce             	mov    %rcx,%rsi
  800420d9e8:	89 c7                	mov    %eax,%edi
  800420d9ea:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420d9f1:	00 00 00 
  800420d9f4:	ff d0                	callq  *%rax
  800420d9f6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9fd:	79 05                	jns    800420da04 <sys_env_set_trapframe+0xcb>
  800420d9ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da02:	eb 21                	jmp    800420da25 <sys_env_set_trapframe+0xec>
  800420da04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da08:	48 89 c7             	mov    %rax,%rdi
  800420da0b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  800420da12:	ba 18 00 00 00       	mov    $0x18,%edx
  800420da17:	48 89 c6             	mov    %rax,%rsi
  800420da1a:	48 89 d1             	mov    %rdx,%rcx
  800420da1d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420da20:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da25:	c9                   	leaveq 
  800420da26:	c3                   	retq   

000000800420da27 <sys_env_set_pgfault_upcall>:
  800420da27:	55                   	push   %rbp
  800420da28:	48 89 e5             	mov    %rsp,%rbp
  800420da2b:	48 83 ec 20          	sub    $0x20,%rsp
  800420da2f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420da32:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420da36:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420da3a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420da3d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da42:	48 89 ce             	mov    %rcx,%rsi
  800420da45:	89 c7                	mov    %eax,%edi
  800420da47:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420da4e:	00 00 00 
  800420da51:	ff d0                	callq  *%rax
  800420da53:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da56:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da5a:	79 05                	jns    800420da61 <sys_env_set_pgfault_upcall+0x3a>
  800420da5c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da5f:	eb 14                	jmp    800420da75 <sys_env_set_pgfault_upcall+0x4e>
  800420da61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420da65:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420da69:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
  800420da70:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da75:	c9                   	leaveq 
  800420da76:	c3                   	retq   

000000800420da77 <sys_page_alloc>:
  800420da77:	55                   	push   %rbp
  800420da78:	48 89 e5             	mov    %rsp,%rbp
  800420da7b:	48 83 ec 30          	sub    $0x30,%rsp
  800420da7f:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420da82:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420da86:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800420da89:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420da8d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420da90:	ba 01 00 00 00       	mov    $0x1,%edx
  800420da95:	48 89 ce             	mov    %rcx,%rsi
  800420da98:	89 c7                	mov    %eax,%edi
  800420da9a:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420daa1:	00 00 00 
  800420daa4:	ff d0                	callq  *%rax
  800420daa6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420daa9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420daad:	79 08                	jns    800420dab7 <sys_page_alloc+0x40>
  800420daaf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dab2:	e9 a7 00 00 00       	jmpq   800420db5e <sys_page_alloc+0xe7>
  800420dab7:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420daba:	f7 d0                	not    %eax
  800420dabc:	83 e0 05             	and    $0x5,%eax
  800420dabf:	85 c0                	test   %eax,%eax
  800420dac1:	75 0c                	jne    800420dacf <sys_page_alloc+0x58>
  800420dac3:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420dac6:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dacb:	85 c0                	test   %eax,%eax
  800420dacd:	74 0a                	je     800420dad9 <sys_page_alloc+0x62>
  800420dacf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dad4:	e9 85 00 00 00       	jmpq   800420db5e <sys_page_alloc+0xe7>
  800420dad9:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dae0:	00 00 00 
  800420dae3:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420dae7:	76 07                	jbe    800420daf0 <sys_page_alloc+0x79>
  800420dae9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420daee:	eb 6e                	jmp    800420db5e <sys_page_alloc+0xe7>
  800420daf0:	bf 01 00 00 00       	mov    $0x1,%edi
  800420daf5:	48 b8 f5 2f 20 04 80 	movabs $0x8004202ff5,%rax
  800420dafc:	00 00 00 
  800420daff:	ff d0                	callq  *%rax
  800420db01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420db05:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420db0a:	75 07                	jne    800420db13 <sys_page_alloc+0x9c>
  800420db0c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420db11:	eb 4b                	jmp    800420db5e <sys_page_alloc+0xe7>
  800420db13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420db17:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420db1e:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420db21:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420db25:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420db29:	48 89 c7             	mov    %rax,%rdi
  800420db2c:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420db33:	00 00 00 
  800420db36:	ff d0                	callq  *%rax
  800420db38:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420db3b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420db3f:	79 18                	jns    800420db59 <sys_page_alloc+0xe2>
  800420db41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420db45:	48 89 c7             	mov    %rax,%rdi
  800420db48:	48 b8 a8 30 20 04 80 	movabs $0x80042030a8,%rax
  800420db4f:	00 00 00 
  800420db52:	ff d0                	callq  *%rax
  800420db54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420db57:	eb 05                	jmp    800420db5e <sys_page_alloc+0xe7>
  800420db59:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db5e:	c9                   	leaveq 
  800420db5f:	c3                   	retq   

000000800420db60 <sys_page_map>:
  800420db60:	55                   	push   %rbp
  800420db61:	48 89 e5             	mov    %rsp,%rbp
  800420db64:	48 83 ec 60          	sub    $0x60,%rsp
  800420db68:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420db6b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420db6f:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420db72:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420db76:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
  800420db7a:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db81:	00 00 00 
  800420db84:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420db88:	77 10                	ja     800420db9a <sys_page_map+0x3a>
  800420db8a:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420db91:	00 00 00 
  800420db94:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420db98:	76 0a                	jbe    800420dba4 <sys_page_map+0x44>
  800420db9a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420db9f:	e9 3f 01 00 00       	jmpq   800420dce3 <sys_page_map+0x183>
  800420dba4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420dba8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dbac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dbb0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dbb6:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420dbba:	75 18                	jne    800420dbd4 <sys_page_map+0x74>
  800420dbbc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420dbc0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420dbc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dbc8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420dbce:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420dbd2:	74 0a                	je     800420dbde <sys_page_map+0x7e>
  800420dbd4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dbd9:	e9 05 01 00 00       	jmpq   800420dce3 <sys_page_map+0x183>
  800420dbde:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dbe2:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420dbe5:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dbea:	48 89 ce             	mov    %rcx,%rsi
  800420dbed:	89 c7                	mov    %eax,%edi
  800420dbef:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420dbf6:	00 00 00 
  800420dbf9:	ff d0                	callq  *%rax
  800420dbfb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dbfe:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc02:	78 26                	js     800420dc2a <sys_page_map+0xca>
  800420dc04:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420dc08:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420dc0b:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dc10:	48 89 ce             	mov    %rcx,%rsi
  800420dc13:	89 c7                	mov    %eax,%edi
  800420dc15:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420dc1c:	00 00 00 
  800420dc1f:	ff d0                	callq  *%rax
  800420dc21:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dc24:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dc28:	79 08                	jns    800420dc32 <sys_page_map+0xd2>
  800420dc2a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc2d:	e9 b1 00 00 00       	jmpq   800420dce3 <sys_page_map+0x183>
  800420dc32:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc35:	f7 d0                	not    %eax
  800420dc37:	83 e0 05             	and    $0x5,%eax
  800420dc3a:	85 c0                	test   %eax,%eax
  800420dc3c:	75 0c                	jne    800420dc4a <sys_page_map+0xea>
  800420dc3e:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc41:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420dc46:	85 c0                	test   %eax,%eax
  800420dc48:	74 0a                	je     800420dc54 <sys_page_map+0xf4>
  800420dc4a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc4f:	e9 8f 00 00 00       	jmpq   800420dce3 <sys_page_map+0x183>
  800420dc54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420dc58:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dc5f:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420dc63:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420dc67:	48 89 ce             	mov    %rcx,%rsi
  800420dc6a:	48 89 c7             	mov    %rax,%rdi
  800420dc6d:	48 b8 ea 3e 20 04 80 	movabs $0x8004203eea,%rax
  800420dc74:	00 00 00 
  800420dc77:	ff d0                	callq  *%rax
  800420dc79:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420dc7d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420dc82:	75 07                	jne    800420dc8b <sys_page_map+0x12b>
  800420dc84:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dc89:	eb 58                	jmp    800420dce3 <sys_page_map+0x183>
  800420dc8b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420dc8e:	83 e0 02             	and    $0x2,%eax
  800420dc91:	85 c0                	test   %eax,%eax
  800420dc93:	74 16                	je     800420dcab <sys_page_map+0x14b>
  800420dc95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420dc99:	48 8b 00             	mov    (%rax),%rax
  800420dc9c:	83 e0 02             	and    $0x2,%eax
  800420dc9f:	48 85 c0             	test   %rax,%rax
  800420dca2:	75 07                	jne    800420dcab <sys_page_map+0x14b>
  800420dca4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dca9:	eb 38                	jmp    800420dce3 <sys_page_map+0x183>
  800420dcab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dcaf:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dcb6:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420dcb9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420dcbd:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420dcc1:	48 89 c7             	mov    %rax,%rdi
  800420dcc4:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420dccb:	00 00 00 
  800420dcce:	ff d0                	callq  *%rax
  800420dcd0:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dcd3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dcd7:	79 05                	jns    800420dcde <sys_page_map+0x17e>
  800420dcd9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dcdc:	eb 05                	jmp    800420dce3 <sys_page_map+0x183>
  800420dcde:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dce3:	c9                   	leaveq 
  800420dce4:	c3                   	retq   

000000800420dce5 <sys_page_unmap>:
  800420dce5:	55                   	push   %rbp
  800420dce6:	48 89 e5             	mov    %rsp,%rbp
  800420dce9:	48 83 ec 20          	sub    $0x20,%rsp
  800420dced:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dcf0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420dcf4:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dcf8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dcfb:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dd00:	48 89 ce             	mov    %rcx,%rsi
  800420dd03:	89 c7                	mov    %eax,%edi
  800420dd05:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420dd0c:	00 00 00 
  800420dd0f:	ff d0                	callq  *%rax
  800420dd11:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dd14:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dd18:	79 05                	jns    800420dd1f <sys_page_unmap+0x3a>
  800420dd1a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dd1d:	eb 4b                	jmp    800420dd6a <sys_page_unmap+0x85>
  800420dd1f:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dd26:	00 00 00 
  800420dd29:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420dd2d:	77 0e                	ja     800420dd3d <sys_page_unmap+0x58>
  800420dd2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420dd33:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420dd38:	48 85 c0             	test   %rax,%rax
  800420dd3b:	74 07                	je     800420dd44 <sys_page_unmap+0x5f>
  800420dd3d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dd42:	eb 26                	jmp    800420dd6a <sys_page_unmap+0x85>
  800420dd44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd48:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420dd4f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420dd53:	48 89 d6             	mov    %rdx,%rsi
  800420dd56:	48 89 c7             	mov    %rax,%rdi
  800420dd59:	48 b8 75 3f 20 04 80 	movabs $0x8004203f75,%rax
  800420dd60:	00 00 00 
  800420dd63:	ff d0                	callq  *%rax
  800420dd65:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd6a:	c9                   	leaveq 
  800420dd6b:	c3                   	retq   

000000800420dd6c <sys_ipc_try_send>:
  800420dd6c:	55                   	push   %rbp
  800420dd6d:	48 89 e5             	mov    %rsp,%rbp
  800420dd70:	53                   	push   %rbx
  800420dd71:	48 83 ec 48          	sub    $0x48,%rsp
  800420dd75:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420dd78:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420dd7b:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420dd7f:	89 4d bc             	mov    %ecx,-0x44(%rbp)
  800420dd82:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420dd86:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420dd89:	ba 00 00 00 00       	mov    $0x0,%edx
  800420dd8e:	48 89 ce             	mov    %rcx,%rsi
  800420dd91:	89 c7                	mov    %eax,%edi
  800420dd93:	48 b8 77 7f 20 04 80 	movabs $0x8004207f77,%rax
  800420dd9a:	00 00 00 
  800420dd9d:	ff d0                	callq  *%rax
  800420dd9f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dda2:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420dda6:	79 08                	jns    800420ddb0 <sys_ipc_try_send+0x44>
  800420dda8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420ddab:	e9 a4 04 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420ddb0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ddb4:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420ddbb:	83 f0 01             	xor    $0x1,%eax
  800420ddbe:	84 c0                	test   %al,%al
  800420ddc0:	74 0a                	je     800420ddcc <sys_ipc_try_send+0x60>
  800420ddc2:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420ddc7:	e9 88 04 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420ddcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ddd0:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420ddd6:	83 f8 03             	cmp    $0x3,%eax
  800420ddd9:	0f 85 4f 01 00 00    	jne    800420df2e <sys_ipc_try_send+0x1c2>
  800420dddf:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420dde6:	00 00 00 
  800420dde9:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420dded:	0f 87 3b 01 00 00    	ja     800420df2e <sys_ipc_try_send+0x1c2>
  800420ddf3:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ddfa:	00 00 00 
  800420ddfd:	ff d0                	callq  *%rax
  800420ddff:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420de06:	00 00 00 
  800420de09:	48 98                	cltq   
  800420de0b:	48 c1 e0 03          	shl    $0x3,%rax
  800420de0f:	48 89 c1             	mov    %rax,%rcx
  800420de12:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de16:	48 01 c8             	add    %rcx,%rax
  800420de19:	48 01 d0             	add    %rdx,%rax
  800420de1c:	48 83 c0 08          	add    $0x8,%rax
  800420de20:	48 8b 00             	mov    (%rax),%rax
  800420de23:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420de2a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420de2e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420de32:	48 89 ce             	mov    %rcx,%rsi
  800420de35:	48 89 c7             	mov    %rax,%rdi
  800420de38:	48 b8 ea 3e 20 04 80 	movabs $0x8004203eea,%rax
  800420de3f:	00 00 00 
  800420de42:	ff d0                	callq  *%rax
  800420de44:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420de48:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420de4d:	75 61                	jne    800420deb0 <sys_ipc_try_send+0x144>
  800420de4f:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420de56:	00 00 00 
  800420de59:	ff d0                	callq  *%rax
  800420de5b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420de62:	00 00 00 
  800420de65:	48 98                	cltq   
  800420de67:	48 c1 e0 03          	shl    $0x3,%rax
  800420de6b:	48 89 c1             	mov    %rax,%rcx
  800420de6e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de72:	48 01 c8             	add    %rcx,%rax
  800420de75:	48 01 d0             	add    %rdx,%rax
  800420de78:	48 83 c0 08          	add    $0x8,%rax
  800420de7c:	48 8b 00             	mov    (%rax),%rax
  800420de7f:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420de85:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420de89:	89 c6                	mov    %eax,%esi
  800420de8b:	48 bf f0 a3 21 04 80 	movabs $0x800421a3f0,%rdi
  800420de92:	00 00 00 
  800420de95:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de9a:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420dea1:	00 00 00 
  800420dea4:	ff d1                	callq  *%rcx
  800420dea6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420deab:	e9 a4 03 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420deb0:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420deb3:	83 e0 02             	and    $0x2,%eax
  800420deb6:	85 c0                	test   %eax,%eax
  800420deb8:	0f 84 04 03 00 00    	je     800420e1c2 <sys_ipc_try_send+0x456>
  800420debe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420dec2:	48 8b 00             	mov    (%rax),%rax
  800420dec5:	83 e0 02             	and    $0x2,%eax
  800420dec8:	48 85 c0             	test   %rax,%rax
  800420decb:	0f 85 f1 02 00 00    	jne    800420e1c2 <sys_ipc_try_send+0x456>
  800420ded1:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ded8:	00 00 00 
  800420dedb:	ff d0                	callq  *%rax
  800420dedd:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420dee4:	00 00 00 
  800420dee7:	48 98                	cltq   
  800420dee9:	48 c1 e0 03          	shl    $0x3,%rax
  800420deed:	48 89 c1             	mov    %rax,%rcx
  800420def0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420def4:	48 01 c8             	add    %rcx,%rax
  800420def7:	48 01 d0             	add    %rdx,%rax
  800420defa:	48 83 c0 08          	add    $0x8,%rax
  800420defe:	48 8b 00             	mov    (%rax),%rax
  800420df01:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420df07:	89 c6                	mov    %eax,%esi
  800420df09:	48 bf 28 a4 21 04 80 	movabs $0x800421a428,%rdi
  800420df10:	00 00 00 
  800420df13:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df18:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420df1f:	00 00 00 
  800420df22:	ff d2                	callq  *%rdx
  800420df24:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420df29:	e9 26 03 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420df2e:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420df35:	00 00 00 
  800420df38:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420df3c:	0f 87 70 02 00 00    	ja     800420e1b2 <sys_ipc_try_send+0x446>
  800420df42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420df46:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420df4d:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420df54:	00 00 00 
  800420df57:	48 39 c2             	cmp    %rax,%rdx
  800420df5a:	0f 87 52 02 00 00    	ja     800420e1b2 <sys_ipc_try_send+0x446>
  800420df60:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420df63:	f7 d0                	not    %eax
  800420df65:	83 e0 05             	and    $0x5,%eax
  800420df68:	85 c0                	test   %eax,%eax
  800420df6a:	75 0c                	jne    800420df78 <sys_ipc_try_send+0x20c>
  800420df6c:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420df6f:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420df74:	85 c0                	test   %eax,%eax
  800420df76:	74 60                	je     800420dfd8 <sys_ipc_try_send+0x26c>
  800420df78:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420df7f:	00 00 00 
  800420df82:	ff d0                	callq  *%rax
  800420df84:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420df8b:	00 00 00 
  800420df8e:	48 98                	cltq   
  800420df90:	48 c1 e0 03          	shl    $0x3,%rax
  800420df94:	48 89 c1             	mov    %rax,%rcx
  800420df97:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df9b:	48 01 c8             	add    %rcx,%rax
  800420df9e:	48 01 d0             	add    %rdx,%rax
  800420dfa1:	48 83 c0 08          	add    $0x8,%rax
  800420dfa5:	48 8b 00             	mov    (%rax),%rax
  800420dfa8:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420dfae:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420dfb1:	89 c6                	mov    %eax,%esi
  800420dfb3:	48 bf 70 a4 21 04 80 	movabs $0x800421a470,%rdi
  800420dfba:	00 00 00 
  800420dfbd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dfc2:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420dfc9:	00 00 00 
  800420dfcc:	ff d1                	callq  *%rcx
  800420dfce:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dfd3:	e9 7c 02 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420dfd8:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420dfdf:	00 00 00 
  800420dfe2:	ff d0                	callq  *%rax
  800420dfe4:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420dfeb:	00 00 00 
  800420dfee:	48 98                	cltq   
  800420dff0:	48 c1 e0 03          	shl    $0x3,%rax
  800420dff4:	48 89 c1             	mov    %rax,%rcx
  800420dff7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dffb:	48 01 c8             	add    %rcx,%rax
  800420dffe:	48 01 d0             	add    %rdx,%rax
  800420e001:	48 83 c0 08          	add    $0x8,%rax
  800420e005:	48 8b 00             	mov    (%rax),%rax
  800420e008:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e00f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e013:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e017:	48 89 ce             	mov    %rcx,%rsi
  800420e01a:	48 89 c7             	mov    %rax,%rdi
  800420e01d:	48 b8 ea 3e 20 04 80 	movabs $0x8004203eea,%rax
  800420e024:	00 00 00 
  800420e027:	ff d0                	callq  *%rax
  800420e029:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e02d:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e032:	75 61                	jne    800420e095 <sys_ipc_try_send+0x329>
  800420e034:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e03b:	00 00 00 
  800420e03e:	ff d0                	callq  *%rax
  800420e040:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e047:	00 00 00 
  800420e04a:	48 98                	cltq   
  800420e04c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e050:	48 89 c1             	mov    %rax,%rcx
  800420e053:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e057:	48 01 c8             	add    %rcx,%rax
  800420e05a:	48 01 d0             	add    %rdx,%rax
  800420e05d:	48 83 c0 08          	add    $0x8,%rax
  800420e061:	48 8b 00             	mov    (%rax),%rax
  800420e064:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e06a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e06e:	89 c6                	mov    %eax,%esi
  800420e070:	48 bf f0 a3 21 04 80 	movabs $0x800421a3f0,%rdi
  800420e077:	00 00 00 
  800420e07a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e07f:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  800420e086:	00 00 00 
  800420e089:	ff d1                	callq  *%rcx
  800420e08b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e090:	e9 bf 01 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420e095:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e098:	83 e0 02             	and    $0x2,%eax
  800420e09b:	85 c0                	test   %eax,%eax
  800420e09d:	74 6c                	je     800420e10b <sys_ipc_try_send+0x39f>
  800420e09f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e0a3:	48 8b 00             	mov    (%rax),%rax
  800420e0a6:	83 e0 02             	and    $0x2,%eax
  800420e0a9:	48 85 c0             	test   %rax,%rax
  800420e0ac:	75 5d                	jne    800420e10b <sys_ipc_try_send+0x39f>
  800420e0ae:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e0b5:	00 00 00 
  800420e0b8:	ff d0                	callq  *%rax
  800420e0ba:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e0c1:	00 00 00 
  800420e0c4:	48 98                	cltq   
  800420e0c6:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0ca:	48 89 c1             	mov    %rax,%rcx
  800420e0cd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0d1:	48 01 c8             	add    %rcx,%rax
  800420e0d4:	48 01 d0             	add    %rdx,%rax
  800420e0d7:	48 83 c0 08          	add    $0x8,%rax
  800420e0db:	48 8b 00             	mov    (%rax),%rax
  800420e0de:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e0e4:	89 c6                	mov    %eax,%esi
  800420e0e6:	48 bf 28 a4 21 04 80 	movabs $0x800421a428,%rdi
  800420e0ed:	00 00 00 
  800420e0f0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e0f5:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420e0fc:	00 00 00 
  800420e0ff:	ff d2                	callq  *%rdx
  800420e101:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e106:	e9 49 01 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420e10b:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e10e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e112:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e11d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e124:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e128:	48 89 c7             	mov    %rax,%rdi
  800420e12b:	48 b8 76 3b 20 04 80 	movabs $0x8004203b76,%rax
  800420e132:	00 00 00 
  800420e135:	ff d0                	callq  *%rax
  800420e137:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e13a:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e13e:	79 63                	jns    800420e1a3 <sys_ipc_try_send+0x437>
  800420e140:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e147:	00 00 00 
  800420e14a:	ff d0                	callq  *%rax
  800420e14c:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e153:	00 00 00 
  800420e156:	48 98                	cltq   
  800420e158:	48 c1 e0 03          	shl    $0x3,%rax
  800420e15c:	48 89 c1             	mov    %rax,%rcx
  800420e15f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e163:	48 01 c8             	add    %rcx,%rax
  800420e166:	48 01 d0             	add    %rdx,%rax
  800420e169:	48 83 c0 08          	add    $0x8,%rax
  800420e16d:	48 8b 00             	mov    (%rax),%rax
  800420e170:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e176:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e179:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e17d:	89 c6                	mov    %eax,%esi
  800420e17f:	48 bf 98 a4 21 04 80 	movabs $0x800421a498,%rdi
  800420e186:	00 00 00 
  800420e189:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e18e:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  800420e195:	00 00 00 
  800420e198:	41 ff d0             	callq  *%r8
  800420e19b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e19e:	e9 b1 00 00 00       	jmpq   800420e254 <sys_ipc_try_send+0x4e8>
  800420e1a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e1a7:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e1aa:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e1b0:	eb 11                	jmp    800420e1c3 <sys_ipc_try_send+0x457>
  800420e1b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e1b6:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e1bd:	00 00 00 
  800420e1c0:	eb 01                	jmp    800420e1c3 <sys_ipc_try_send+0x457>
  800420e1c2:	90                   	nop
  800420e1c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e1c7:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
  800420e1ce:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e1d2:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e1d9:	00 00 00 
  800420e1dc:	ff d0                	callq  *%rax
  800420e1de:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e1e5:	00 00 00 
  800420e1e8:	48 98                	cltq   
  800420e1ea:	48 c1 e0 03          	shl    $0x3,%rax
  800420e1ee:	48 89 c1             	mov    %rax,%rcx
  800420e1f1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1f5:	48 01 c8             	add    %rcx,%rax
  800420e1f8:	48 01 d0             	add    %rdx,%rax
  800420e1fb:	48 83 c0 08          	add    $0x8,%rax
  800420e1ff:	48 8b 00             	mov    (%rax),%rax
  800420e202:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e208:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
  800420e20e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e212:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e215:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420e21b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e21f:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e226:	00 
  800420e227:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e22b:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e232:	00 00 00 
  800420e235:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e239:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420e23f:	83 f8 03             	cmp    $0x3,%eax
  800420e242:	75 0b                	jne    800420e24f <sys_ipc_try_send+0x4e3>
  800420e244:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e248:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e24b:	48 89 50 40          	mov    %rdx,0x40(%rax)
  800420e24f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e254:	48 83 c4 48          	add    $0x48,%rsp
  800420e258:	5b                   	pop    %rbx
  800420e259:	5d                   	pop    %rbp
  800420e25a:	c3                   	retq   

000000800420e25b <sys_ipc_recv>:
  800420e25b:	55                   	push   %rbp
  800420e25c:	48 89 e5             	mov    %rsp,%rbp
  800420e25f:	48 83 ec 10          	sub    $0x10,%rsp
  800420e263:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e267:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e26e:	00 00 00 
  800420e271:	ff d0                	callq  *%rax
  800420e273:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e27a:	00 00 00 
  800420e27d:	48 98                	cltq   
  800420e27f:	48 c1 e0 03          	shl    $0x3,%rax
  800420e283:	48 89 c1             	mov    %rax,%rcx
  800420e286:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e28a:	48 01 c8             	add    %rcx,%rax
  800420e28d:	48 01 d0             	add    %rdx,%rax
  800420e290:	48 83 c0 08          	add    $0x8,%rax
  800420e294:	48 8b 00             	mov    (%rax),%rax
  800420e297:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e29e:	84 c0                	test   %al,%al
  800420e2a0:	74 2a                	je     800420e2cc <sys_ipc_recv+0x71>
  800420e2a2:	48 ba d1 a4 21 04 80 	movabs $0x800421a4d1,%rdx
  800420e2a9:	00 00 00 
  800420e2ac:	be e4 01 00 00       	mov    $0x1e4,%esi
  800420e2b1:	48 bf e2 a4 21 04 80 	movabs $0x800421a4e2,%rdi
  800420e2b8:	00 00 00 
  800420e2bb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e2c0:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800420e2c7:	00 00 00 
  800420e2ca:	ff d1                	callq  *%rcx
  800420e2cc:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e2d3:	00 00 00 
  800420e2d6:	ff d0                	callq  *%rax
  800420e2d8:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e2df:	00 00 00 
  800420e2e2:	48 98                	cltq   
  800420e2e4:	48 c1 e0 03          	shl    $0x3,%rax
  800420e2e8:	48 89 c1             	mov    %rax,%rcx
  800420e2eb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e2ef:	48 01 c8             	add    %rcx,%rax
  800420e2f2:	48 01 d0             	add    %rdx,%rax
  800420e2f5:	48 83 c0 08          	add    $0x8,%rax
  800420e2f9:	48 8b 00             	mov    (%rax),%rax
  800420e2fc:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
  800420e303:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e30a:	00 00 00 
  800420e30d:	ff d0                	callq  *%rax
  800420e30f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e316:	00 00 00 
  800420e319:	48 98                	cltq   
  800420e31b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e31f:	48 89 c1             	mov    %rax,%rcx
  800420e322:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e326:	48 01 c8             	add    %rcx,%rax
  800420e329:	48 01 d0             	add    %rdx,%rax
  800420e32c:	48 83 c0 08          	add    $0x8,%rax
  800420e330:	48 8b 00             	mov    (%rax),%rax
  800420e333:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e337:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
  800420e33e:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e345:	00 00 00 
  800420e348:	ff d0                	callq  *%rax
  800420e34a:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e351:	00 00 00 
  800420e354:	48 98                	cltq   
  800420e356:	48 c1 e0 03          	shl    $0x3,%rax
  800420e35a:	48 89 c1             	mov    %rax,%rcx
  800420e35d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e361:	48 01 c8             	add    %rcx,%rax
  800420e364:	48 01 d0             	add    %rdx,%rax
  800420e367:	48 83 c0 08          	add    $0x8,%rax
  800420e36b:	48 8b 00             	mov    (%rax),%rax
  800420e36e:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e375:	00 00 00 
  800420e378:	48 b8 e6 d2 20 04 80 	movabs $0x800420d2e6,%rax
  800420e37f:	00 00 00 
  800420e382:	ff d0                	callq  *%rax

000000800420e384 <sys_time_msec>:
  800420e384:	55                   	push   %rbp
  800420e385:	48 89 e5             	mov    %rsp,%rbp
  800420e388:	48 b8 7d 89 21 04 80 	movabs $0x800421897d,%rax
  800420e38f:	00 00 00 
  800420e392:	ff d0                	callq  *%rax
  800420e394:	5d                   	pop    %rbp
  800420e395:	c3                   	retq   

000000800420e396 <sys_net_transmit>:
  800420e396:	55                   	push   %rbp
  800420e397:	48 89 e5             	mov    %rsp,%rbp
  800420e39a:	48 83 ec 10          	sub    $0x10,%rsp
  800420e39e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e3a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e3a6:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e3ad:	00 00 00 
  800420e3b0:	ff d0                	callq  *%rax
  800420e3b2:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e3b9:	00 00 00 
  800420e3bc:	48 98                	cltq   
  800420e3be:	48 c1 e0 03          	shl    $0x3,%rax
  800420e3c2:	48 89 c1             	mov    %rax,%rcx
  800420e3c5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e3c9:	48 01 c8             	add    %rcx,%rax
  800420e3cc:	48 01 d0             	add    %rdx,%rax
  800420e3cf:	48 83 c0 08          	add    $0x8,%rax
  800420e3d3:	48 8b 00             	mov    (%rax),%rax
  800420e3d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e3da:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e3de:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e3e3:	48 89 c7             	mov    %rax,%rdi
  800420e3e6:	48 b8 c1 42 20 04 80 	movabs $0x80042042c1,%rax
  800420e3ed:	00 00 00 
  800420e3f0:	ff d0                	callq  *%rax
  800420e3f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e3f6:	89 c2                	mov    %eax,%edx
  800420e3f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e3fc:	89 d6                	mov    %edx,%esi
  800420e3fe:	48 89 c7             	mov    %rax,%rdi
  800420e401:	48 b8 e3 7a 21 04 80 	movabs $0x8004217ae3,%rax
  800420e408:	00 00 00 
  800420e40b:	ff d0                	callq  *%rax
  800420e40d:	c9                   	leaveq 
  800420e40e:	c3                   	retq   

000000800420e40f <sys_net_receive>:
  800420e40f:	55                   	push   %rbp
  800420e410:	48 89 e5             	mov    %rsp,%rbp
  800420e413:	48 83 ec 10          	sub    $0x10,%rsp
  800420e417:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e41b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e41f:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420e426:	00 00 00 
  800420e429:	ff d0                	callq  *%rax
  800420e42b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420e432:	00 00 00 
  800420e435:	48 98                	cltq   
  800420e437:	48 c1 e0 03          	shl    $0x3,%rax
  800420e43b:	48 89 c1             	mov    %rax,%rcx
  800420e43e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e442:	48 01 c8             	add    %rcx,%rax
  800420e445:	48 01 d0             	add    %rdx,%rax
  800420e448:	48 83 c0 08          	add    $0x8,%rax
  800420e44c:	48 8b 00             	mov    (%rax),%rax
  800420e44f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e453:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e457:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e45c:	48 89 c7             	mov    %rax,%rdi
  800420e45f:	48 b8 c1 42 20 04 80 	movabs $0x80042042c1,%rax
  800420e466:	00 00 00 
  800420e469:	ff d0                	callq  *%rax
  800420e46b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e46f:	89 c2                	mov    %eax,%edx
  800420e471:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e475:	89 d6                	mov    %edx,%esi
  800420e477:	48 89 c7             	mov    %rax,%rdi
  800420e47a:	48 b8 63 7c 21 04 80 	movabs $0x8004217c63,%rax
  800420e481:	00 00 00 
  800420e484:	ff d0                	callq  *%rax
  800420e486:	c9                   	leaveq 
  800420e487:	c3                   	retq   

000000800420e488 <syscall>:
  800420e488:	55                   	push   %rbp
  800420e489:	48 89 e5             	mov    %rsp,%rbp
  800420e48c:	48 83 ec 30          	sub    $0x30,%rsp
  800420e490:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e494:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420e498:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420e49c:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420e4a0:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420e4a4:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
  800420e4a8:	48 83 7d f8 10       	cmpq   $0x10,-0x8(%rbp)
  800420e4ad:	0f 87 1a 02 00 00    	ja     800420e6cd <syscall+0x245>
  800420e4b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e4b7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420e4be:	00 
  800420e4bf:	48 b8 f8 a4 21 04 80 	movabs $0x800421a4f8,%rax
  800420e4c6:	00 00 00 
  800420e4c9:	48 01 d0             	add    %rdx,%rax
  800420e4cc:	48 8b 00             	mov    (%rax),%rax
  800420e4cf:	ff e0                	jmpq   *%rax
  800420e4d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4d5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e4d9:	48 89 d6             	mov    %rdx,%rsi
  800420e4dc:	48 89 c7             	mov    %rax,%rdi
  800420e4df:	48 b8 d1 d6 20 04 80 	movabs $0x800420d6d1,%rax
  800420e4e6:	00 00 00 
  800420e4e9:	ff d0                	callq  *%rax
  800420e4eb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e4f0:	e9 df 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e4f5:	48 b8 56 d7 20 04 80 	movabs $0x800420d756,%rax
  800420e4fc:	00 00 00 
  800420e4ff:	ff d0                	callq  *%rax
  800420e501:	48 98                	cltq   
  800420e503:	e9 cc 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e508:	48 b8 68 d7 20 04 80 	movabs $0x800420d768,%rax
  800420e50f:	00 00 00 
  800420e512:	ff d0                	callq  *%rax
  800420e514:	48 98                	cltq   
  800420e516:	e9 b9 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e51b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e51f:	89 c7                	mov    %eax,%edi
  800420e521:	48 b8 a4 d7 20 04 80 	movabs $0x800420d7a4,%rax
  800420e528:	00 00 00 
  800420e52b:	ff d0                	callq  *%rax
  800420e52d:	48 98                	cltq   
  800420e52f:	e9 a0 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e534:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e538:	89 c6                	mov    %eax,%esi
  800420e53a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e53e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e542:	89 d1                	mov    %edx,%ecx
  800420e544:	89 f2                	mov    %esi,%edx
  800420e546:	48 89 c6             	mov    %rax,%rsi
  800420e549:	89 cf                	mov    %ecx,%edi
  800420e54b:	48 b8 77 da 20 04 80 	movabs $0x800420da77,%rax
  800420e552:	00 00 00 
  800420e555:	ff d0                	callq  *%rax
  800420e557:	48 98                	cltq   
  800420e559:	e9 76 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e55e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e562:	41 89 c0             	mov    %eax,%r8d
  800420e565:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420e569:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e56d:	89 c6                	mov    %eax,%esi
  800420e56f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e573:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800420e577:	89 cf                	mov    %ecx,%edi
  800420e579:	48 89 d1             	mov    %rdx,%rcx
  800420e57c:	89 f2                	mov    %esi,%edx
  800420e57e:	48 89 c6             	mov    %rax,%rsi
  800420e581:	48 b8 60 db 20 04 80 	movabs $0x800420db60,%rax
  800420e588:	00 00 00 
  800420e58b:	ff d0                	callq  *%rax
  800420e58d:	48 98                	cltq   
  800420e58f:	e9 40 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e594:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e598:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e59c:	48 89 c6             	mov    %rax,%rsi
  800420e59f:	89 d7                	mov    %edx,%edi
  800420e5a1:	48 b8 e5 dc 20 04 80 	movabs $0x800420dce5,%rax
  800420e5a8:	00 00 00 
  800420e5ab:	ff d0                	callq  *%rax
  800420e5ad:	48 98                	cltq   
  800420e5af:	e9 20 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e5b4:	48 b8 04 d8 20 04 80 	movabs $0x800420d804,%rax
  800420e5bb:	00 00 00 
  800420e5be:	ff d0                	callq  *%rax
  800420e5c0:	48 98                	cltq   
  800420e5c2:	e9 0d 01 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e5c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e5cb:	89 c2                	mov    %eax,%edx
  800420e5cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e5d1:	89 d6                	mov    %edx,%esi
  800420e5d3:	89 c7                	mov    %eax,%edi
  800420e5d5:	48 b8 d9 d8 20 04 80 	movabs $0x800420d8d9,%rax
  800420e5dc:	00 00 00 
  800420e5df:	ff d0                	callq  *%rax
  800420e5e1:	48 98                	cltq   
  800420e5e3:	e9 ec 00 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e5e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e5ec:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e5f0:	48 89 c6             	mov    %rax,%rsi
  800420e5f3:	89 d7                	mov    %edx,%edi
  800420e5f5:	48 b8 39 d9 20 04 80 	movabs $0x800420d939,%rax
  800420e5fc:	00 00 00 
  800420e5ff:	ff d0                	callq  *%rax
  800420e601:	48 98                	cltq   
  800420e603:	e9 cc 00 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e608:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e60c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e610:	48 89 c6             	mov    %rax,%rsi
  800420e613:	89 d7                	mov    %edx,%edi
  800420e615:	48 b8 27 da 20 04 80 	movabs $0x800420da27,%rax
  800420e61c:	00 00 00 
  800420e61f:	ff d0                	callq  *%rax
  800420e621:	48 98                	cltq   
  800420e623:	e9 ac 00 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e628:	48 b8 f4 d7 20 04 80 	movabs $0x800420d7f4,%rax
  800420e62f:	00 00 00 
  800420e632:	ff d0                	callq  *%rax
  800420e634:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e639:	e9 96 00 00 00       	jmpq   800420e6d4 <syscall+0x24c>
  800420e63e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e642:	89 c1                	mov    %eax,%ecx
  800420e644:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e648:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e64c:	89 d6                	mov    %edx,%esi
  800420e64e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e652:	89 d7                	mov    %edx,%edi
  800420e654:	48 89 c2             	mov    %rax,%rdx
  800420e657:	48 b8 6c dd 20 04 80 	movabs $0x800420dd6c,%rax
  800420e65e:	00 00 00 
  800420e661:	ff d0                	callq  *%rax
  800420e663:	48 98                	cltq   
  800420e665:	eb 6d                	jmp    800420e6d4 <syscall+0x24c>
  800420e667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e66b:	48 89 c7             	mov    %rax,%rdi
  800420e66e:	48 b8 5b e2 20 04 80 	movabs $0x800420e25b,%rax
  800420e675:	00 00 00 
  800420e678:	ff d0                	callq  *%rax
  800420e67a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e67f:	eb 53                	jmp    800420e6d4 <syscall+0x24c>
  800420e681:	48 b8 84 e3 20 04 80 	movabs $0x800420e384,%rax
  800420e688:	00 00 00 
  800420e68b:	ff d0                	callq  *%rax
  800420e68d:	48 98                	cltq   
  800420e68f:	eb 43                	jmp    800420e6d4 <syscall+0x24c>
  800420e691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e695:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e699:	48 89 d6             	mov    %rdx,%rsi
  800420e69c:	48 89 c7             	mov    %rax,%rdi
  800420e69f:	48 b8 96 e3 20 04 80 	movabs $0x800420e396,%rax
  800420e6a6:	00 00 00 
  800420e6a9:	ff d0                	callq  *%rax
  800420e6ab:	48 98                	cltq   
  800420e6ad:	eb 25                	jmp    800420e6d4 <syscall+0x24c>
  800420e6af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e6b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420e6b7:	48 89 d6             	mov    %rdx,%rsi
  800420e6ba:	48 89 c7             	mov    %rax,%rdi
  800420e6bd:	48 b8 0f e4 20 04 80 	movabs $0x800420e40f,%rax
  800420e6c4:	00 00 00 
  800420e6c7:	ff d0                	callq  *%rax
  800420e6c9:	48 98                	cltq   
  800420e6cb:	eb 07                	jmp    800420e6d4 <syscall+0x24c>
  800420e6cd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
  800420e6d4:	c9                   	leaveq 
  800420e6d5:	c3                   	retq   

000000800420e6d6 <list_func_die>:
  800420e6d6:	55                   	push   %rbp
  800420e6d7:	48 89 e5             	mov    %rsp,%rbp
  800420e6da:	48 81 ec c0 61 00 00 	sub    $0x61c0,%rsp
  800420e6e1:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420e6e8:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420e6ef:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420e6f6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e6fd:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420e704:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e708:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e70f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e716:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420e71a:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420e721:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e728:	48 89 d1             	mov    %rdx,%rcx
  800420e72b:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420e730:	48 89 ce             	mov    %rcx,%rsi
  800420e733:	48 89 c7             	mov    %rax,%rdi
  800420e736:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  800420e73d:	00 00 00 
  800420e740:	ff d0                	callq  *%rax
  800420e742:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420e749:	00 
  800420e74a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420e751:	00 
  800420e752:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e759:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420e75d:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420e761:	74 0a                	je     800420e76d <list_func_die+0x97>
  800420e763:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e768:	e9 8d 06 00 00       	jmpq   800420edfa <list_func_die+0x724>
  800420e76d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420e774:	ba 38 00 00 00       	mov    $0x38,%edx
  800420e779:	be 00 00 00 00       	mov    $0x0,%esi
  800420e77e:	48 89 c7             	mov    %rax,%rdi
  800420e781:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  800420e788:	00 00 00 
  800420e78b:	ff d0                	callq  *%rax
  800420e78d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e794:	be 11 00 00 00       	mov    $0x11,%esi
  800420e799:	48 89 c7             	mov    %rax,%rdi
  800420e79c:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420e7a3:	00 00 00 
  800420e7a6:	ff d0                	callq  *%rax
  800420e7a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420e7ac:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e7b3:	be 12 00 00 00       	mov    $0x12,%esi
  800420e7b8:	48 89 c7             	mov    %rax,%rdi
  800420e7bb:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420e7c2:	00 00 00 
  800420e7c5:	ff d0                	callq  *%rax
  800420e7c7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420e7cb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420e7d0:	0f 84 1f 06 00 00    	je     800420edf5 <list_func_die+0x71f>
  800420e7d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e7da:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e7de:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e7e5:	0f 83 0a 06 00 00    	jae    800420edf5 <list_func_die+0x71f>
  800420e7eb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420e7f0:	0f 84 ff 05 00 00    	je     800420edf5 <list_func_die+0x71f>
  800420e7f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e7fa:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e7fe:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420e805:	0f 86 ea 05 00 00    	jbe    800420edf5 <list_func_die+0x71f>
  800420e80b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e812:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e819:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e820:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e827:	48 89 10             	mov    %rdx,(%rax)
  800420e82a:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e831:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420e838:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e83f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420e843:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e84a:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420e851:	48 89 c7             	mov    %rax,%rdi
  800420e854:	48 b8 5b fe 20 04 80 	movabs $0x800420fe5b,%rax
  800420e85b:	00 00 00 
  800420e85e:	ff d0                	callq  *%rax
  800420e860:	89 c2                	mov    %eax,%edx
  800420e862:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e869:	89 50 18             	mov    %edx,0x18(%rax)
  800420e86c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e870:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420e874:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e87b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420e87f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e886:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e88d:	48 85 c0             	test   %rax,%rax
  800420e890:	75 35                	jne    800420e8c7 <list_func_die+0x1f1>
  800420e892:	48 b9 a0 a8 21 04 80 	movabs $0x800421a8a0,%rcx
  800420e899:	00 00 00 
  800420e89c:	48 ba ac a8 21 04 80 	movabs $0x800421a8ac,%rdx
  800420e8a3:	00 00 00 
  800420e8a6:	be 95 00 00 00       	mov    $0x95,%esi
  800420e8ab:	48 bf c1 a8 21 04 80 	movabs $0x800421a8c1,%rdi
  800420e8b2:	00 00 00 
  800420e8b5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e8ba:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420e8c1:	00 00 00 
  800420e8c4:	41 ff d0             	callq  *%r8
  800420e8c7:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420e8ce:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420e8d5:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420e8dc:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420e8e3:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e8e8:	48 89 c7             	mov    %rax,%rdi
  800420e8eb:	48 b8 f1 55 21 04 80 	movabs $0x80042155f1,%rax
  800420e8f2:	00 00 00 
  800420e8f5:	ff d0                	callq  *%rax
  800420e8f7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420e8fe:	89 c2                	mov    %eax,%edx
  800420e900:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e907:	89 50 08             	mov    %edx,0x8(%rax)
  800420e90a:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420e911:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420e918:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e91f:	00 00 00 
  800420e922:	48 8b 00             	mov    (%rax),%rax
  800420e925:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420e92c:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e933:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e937:	48 89 c7             	mov    %rax,%rdi
  800420e93a:	48 b8 ce 22 21 04 80 	movabs $0x80042122ce,%rax
  800420e941:	00 00 00 
  800420e944:	ff d0                	callq  *%rax
  800420e946:	83 f8 04             	cmp    $0x4,%eax
  800420e949:	0f 84 9f 04 00 00    	je     800420edee <list_func_die+0x718>
  800420e94f:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420e956:	48 83 f8 05          	cmp    $0x5,%rax
  800420e95a:	0f 85 8a 04 00 00    	jne    800420edea <list_func_die+0x714>
  800420e960:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420e967:	be 49 00 00 00       	mov    $0x49,%esi
  800420e96c:	48 89 c7             	mov    %rax,%rdi
  800420e96f:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420e976:	00 00 00 
  800420e979:	ff d0                	callq  *%rax
  800420e97b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e97f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420e984:	0f 84 b6 00 00 00    	je     800420ea40 <list_func_die+0x36a>
  800420e98a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e98e:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420e992:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e996:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420e99a:	48 01 d0             	add    %rdx,%rax
  800420e99d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420e9a1:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420e9a8:	00 00 00 
  800420e9ab:	48 8b 08             	mov    (%rax),%rcx
  800420e9ae:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420e9b5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420e9b9:	48 83 ec 08          	sub    $0x8,%rsp
  800420e9bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e9c1:	ff 70 30             	pushq  0x30(%rax)
  800420e9c4:	ff 70 28             	pushq  0x28(%rax)
  800420e9c7:	ff 70 20             	pushq  0x20(%rax)
  800420e9ca:	ff 70 18             	pushq  0x18(%rax)
  800420e9cd:	ff 70 10             	pushq  0x10(%rax)
  800420e9d0:	ff 70 08             	pushq  0x8(%rax)
  800420e9d3:	ff 30                	pushq  (%rax)
  800420e9d5:	48 89 cf             	mov    %rcx,%rdi
  800420e9d8:	48 b8 57 1f 21 04 80 	movabs $0x8004211f57,%rax
  800420e9df:	00 00 00 
  800420e9e2:	ff d0                	callq  *%rax
  800420e9e4:	48 83 c4 40          	add    $0x40,%rsp
  800420e9e8:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420e9ef:	be 0b 00 00 00       	mov    $0xb,%esi
  800420e9f4:	48 89 c7             	mov    %rax,%rdi
  800420e9f7:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420e9fe:	00 00 00 
  800420ea01:	ff d0                	callq  *%rax
  800420ea03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea07:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea0c:	74 0e                	je     800420ea1c <list_func_die+0x346>
  800420ea0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea12:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ea16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ea1a:	eb 24                	jmp    800420ea40 <list_func_die+0x36a>
  800420ea1c:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ea23:	be 49 00 00 00       	mov    $0x49,%esi
  800420ea28:	48 89 c7             	mov    %rax,%rdi
  800420ea2b:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420ea32:	00 00 00 
  800420ea35:	ff d0                	callq  *%rax
  800420ea37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea3b:	e9 3f ff ff ff       	jmpq   800420e97f <list_func_die+0x2a9>
  800420ea40:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ea47:	00 
  800420ea48:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ea4f:	be 02 00 00 00       	mov    $0x2,%esi
  800420ea54:	48 89 c7             	mov    %rax,%rdi
  800420ea57:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420ea5e:	00 00 00 
  800420ea61:	ff d0                	callq  *%rax
  800420ea63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ea67:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ea6c:	0f 84 a0 00 00 00    	je     800420eb12 <list_func_die+0x43c>
  800420ea72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea76:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ea7a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420ea7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea82:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420ea86:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420ea8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ea8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ea92:	48 83 f8 03          	cmp    $0x3,%rax
  800420ea96:	72 7a                	jb     800420eb12 <list_func_die+0x43c>
  800420ea98:	48 83 f8 04          	cmp    $0x4,%rax
  800420ea9c:	76 06                	jbe    800420eaa4 <list_func_die+0x3ce>
  800420ea9e:	48 83 f8 0a          	cmp    $0xa,%rax
  800420eaa2:	75 6e                	jne    800420eb12 <list_func_die+0x43c>
  800420eaa4:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eaab:	00 
  800420eaac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420eab0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420eab4:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420eab8:	0f b6 00             	movzbl (%rax),%eax
  800420eabb:	88 45 af             	mov    %al,-0x51(%rbp)
  800420eabe:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420eac3:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420eac7:	75 48                	jne    800420eb11 <list_func_die+0x43b>
  800420eac9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420eacd:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420ead4:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420eadb:	48 89 c7             	mov    %rax,%rdi
  800420eade:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  800420eae5:	00 00 00 
  800420eae8:	ff d0                	callq  *%rax
  800420eaea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420eaee:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420eaf5:	48 89 c2             	mov    %rax,%rdx
  800420eaf8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420eafc:	48 29 c2             	sub    %rax,%rdx
  800420eaff:	48 89 d0             	mov    %rdx,%rax
  800420eb02:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420eb06:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420eb0d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420eb11:	90                   	nop
  800420eb12:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb19:	8b 50 28             	mov    0x28(%rax),%edx
  800420eb1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb20:	89 c1                	mov    %eax,%ecx
  800420eb22:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb29:	48 63 d2             	movslq %edx,%rdx
  800420eb2c:	48 83 c2 08          	add    $0x8,%rdx
  800420eb30:	89 4c 90 0c          	mov    %ecx,0xc(%rax,%rdx,4)
  800420eb34:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb3b:	8b 50 28             	mov    0x28(%rax),%edx
  800420eb3e:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb45:	48 63 d2             	movslq %edx,%rdx
  800420eb48:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420eb4c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eb50:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420eb55:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb5c:	8b 40 28             	mov    0x28(%rax),%eax
  800420eb5f:	8d 50 01             	lea    0x1(%rax),%edx
  800420eb62:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420eb69:	89 50 28             	mov    %edx,0x28(%rax)
  800420eb6c:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420eb73:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420eb7a:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420eb7f:	48 89 ce             	mov    %rcx,%rsi
  800420eb82:	48 89 c7             	mov    %rax,%rdi
  800420eb85:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  800420eb8c:	00 00 00 
  800420eb8f:	ff d0                	callq  *%rax
  800420eb91:	e9 1c 02 00 00       	jmpq   800420edb2 <list_func_die+0x6dc>
  800420eb96:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420eb9d:	48 83 f8 05          	cmp    $0x5,%rax
  800420eba1:	0f 85 46 02 00 00    	jne    800420eded <list_func_die+0x717>
  800420eba7:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ebae:	be 49 00 00 00       	mov    $0x49,%esi
  800420ebb3:	48 89 c7             	mov    %rax,%rdi
  800420ebb6:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420ebbd:	00 00 00 
  800420ebc0:	ff d0                	callq  *%rax
  800420ebc2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ebc6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ebcb:	0f 84 90 00 00 00    	je     800420ec61 <list_func_die+0x58b>
  800420ebd1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ebd5:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420ebd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ebdd:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ebe1:	48 01 d0             	add    %rdx,%rax
  800420ebe4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420ebe8:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420ebef:	00 00 00 
  800420ebf2:	48 8b 08             	mov    (%rax),%rcx
  800420ebf5:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420ebfc:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420ec00:	48 83 ec 08          	sub    $0x8,%rsp
  800420ec04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ec08:	ff 70 30             	pushq  0x30(%rax)
  800420ec0b:	ff 70 28             	pushq  0x28(%rax)
  800420ec0e:	ff 70 20             	pushq  0x20(%rax)
  800420ec11:	ff 70 18             	pushq  0x18(%rax)
  800420ec14:	ff 70 10             	pushq  0x10(%rax)
  800420ec17:	ff 70 08             	pushq  0x8(%rax)
  800420ec1a:	ff 30                	pushq  (%rax)
  800420ec1c:	48 89 cf             	mov    %rcx,%rdi
  800420ec1f:	48 b8 57 1f 21 04 80 	movabs $0x8004211f57,%rax
  800420ec26:	00 00 00 
  800420ec29:	ff d0                	callq  *%rax
  800420ec2b:	48 83 c4 40          	add    $0x40,%rsp
  800420ec2f:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ec36:	be 0b 00 00 00       	mov    $0xb,%esi
  800420ec3b:	48 89 c7             	mov    %rax,%rdi
  800420ec3e:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420ec45:	00 00 00 
  800420ec48:	ff d0                	callq  *%rax
  800420ec4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ec4e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ec53:	74 0c                	je     800420ec61 <list_func_die+0x58b>
  800420ec55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec59:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ec5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ec61:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ec68:	00 
  800420ec69:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420ec70:	be 02 00 00 00       	mov    $0x2,%esi
  800420ec75:	48 89 c7             	mov    %rax,%rdi
  800420ec78:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  800420ec7f:	00 00 00 
  800420ec82:	ff d0                	callq  *%rax
  800420ec84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ec88:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420ec8d:	0f 84 a0 00 00 00    	je     800420ed33 <list_func_die+0x65d>
  800420ec93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec97:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420ec9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420ec9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eca3:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420eca7:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420ecab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ecaf:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420ecb3:	48 83 f8 03          	cmp    $0x3,%rax
  800420ecb7:	72 7a                	jb     800420ed33 <list_func_die+0x65d>
  800420ecb9:	48 83 f8 04          	cmp    $0x4,%rax
  800420ecbd:	76 06                	jbe    800420ecc5 <list_func_die+0x5ef>
  800420ecbf:	48 83 f8 0a          	cmp    $0xa,%rax
  800420ecc3:	75 6e                	jne    800420ed33 <list_func_die+0x65d>
  800420ecc5:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420eccc:	00 
  800420eccd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ecd1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420ecd5:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420ecd9:	0f b6 00             	movzbl (%rax),%eax
  800420ecdc:	88 45 97             	mov    %al,-0x69(%rbp)
  800420ecdf:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420ece4:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420ece8:	75 48                	jne    800420ed32 <list_func_die+0x65c>
  800420ecea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ecee:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420ecf5:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420ecfc:	48 89 c7             	mov    %rax,%rdi
  800420ecff:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  800420ed06:	00 00 00 
  800420ed09:	ff d0                	callq  *%rax
  800420ed0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420ed0f:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ed16:	48 89 c2             	mov    %rax,%rdx
  800420ed19:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ed1d:	48 29 c2             	sub    %rax,%rdx
  800420ed20:	48 89 d0             	mov    %rdx,%rax
  800420ed23:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420ed27:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420ed2e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420ed32:	90                   	nop
  800420ed33:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed3a:	8b 50 28             	mov    0x28(%rax),%edx
  800420ed3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ed41:	89 c1                	mov    %eax,%ecx
  800420ed43:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed4a:	48 63 d2             	movslq %edx,%rdx
  800420ed4d:	48 83 c2 08          	add    $0x8,%rdx
  800420ed51:	89 4c 90 0c          	mov    %ecx,0xc(%rax,%rdx,4)
  800420ed55:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed5c:	8b 50 28             	mov    0x28(%rax),%edx
  800420ed5f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed66:	48 63 d2             	movslq %edx,%rdx
  800420ed69:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420ed6d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ed71:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420ed76:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed7d:	8b 40 28             	mov    0x28(%rax),%eax
  800420ed80:	8d 50 01             	lea    0x1(%rax),%edx
  800420ed83:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ed8a:	89 50 28             	mov    %edx,0x28(%rax)
  800420ed8d:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ed94:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420ed9b:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420eda0:	48 89 ce             	mov    %rcx,%rsi
  800420eda3:	48 89 c7             	mov    %rax,%rdi
  800420eda6:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  800420edad:	00 00 00 
  800420edb0:	ff d0                	callq  *%rax
  800420edb2:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420edb9:	00 00 00 
  800420edbc:	48 8b 00             	mov    (%rax),%rax
  800420edbf:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420edc3:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420edca:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420edd1:	48 89 c7             	mov    %rax,%rdi
  800420edd4:	48 b8 cc 20 21 04 80 	movabs $0x80042120cc,%rax
  800420eddb:	00 00 00 
  800420edde:	ff d0                	callq  *%rax
  800420ede0:	85 c0                	test   %eax,%eax
  800420ede2:	0f 84 ae fd ff ff    	je     800420eb96 <list_func_die+0x4c0>
  800420ede8:	eb 04                	jmp    800420edee <list_func_die+0x718>
  800420edea:	90                   	nop
  800420edeb:	eb 01                	jmp    800420edee <list_func_die+0x718>
  800420eded:	90                   	nop
  800420edee:	b8 01 00 00 00       	mov    $0x1,%eax
  800420edf3:	eb 05                	jmp    800420edfa <list_func_die+0x724>
  800420edf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420edfa:	c9                   	leaveq 
  800420edfb:	c3                   	retq   

000000800420edfc <debuginfo_rip>:
  800420edfc:	55                   	push   %rbp
  800420edfd:	48 89 e5             	mov    %rsp,%rbp
  800420ee00:	48 81 ec c0 91 00 00 	sub    $0x91c0,%rsp
  800420ee07:	48 89 bd 48 6e ff ff 	mov    %rdi,-0x91b8(%rbp)
  800420ee0e:	48 89 b5 40 6e ff ff 	mov    %rsi,-0x91c0(%rbp)
  800420ee15:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420ee1c:	00 
  800420ee1d:	48 8b 85 48 6e ff ff 	mov    -0x91b8(%rbp),%rax
  800420ee24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420ee28:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee2f:	48 bf d2 a8 21 04 80 	movabs $0x800421a8d2,%rdi
  800420ee36:	00 00 00 
  800420ee39:	48 89 38             	mov    %rdi,(%rax)
  800420ee3c:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee43:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420ee4a:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee51:	48 bf d2 a8 21 04 80 	movabs $0x800421a8d2,%rdi
  800420ee58:	00 00 00 
  800420ee5b:	48 89 78 10          	mov    %rdi,0x10(%rax)
  800420ee5f:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee66:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420ee6d:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee74:	48 8b 95 48 6e ff ff 	mov    -0x91b8(%rbp),%rdx
  800420ee7b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420ee7f:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420ee86:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420ee8d:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420ee94:	00 00 00 
  800420ee97:	48 39 85 48 6e ff ff 	cmp    %rax,-0x91b8(%rbp)
  800420ee9e:	76 13                	jbe    800420eeb3 <debuginfo_rip+0xb7>
  800420eea0:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420eea7:	00 00 00 
  800420eeaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420eeae:	e9 04 01 00 00       	jmpq   800420efb7 <debuginfo_rip+0x1bb>
  800420eeb3:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420eeba:	00 00 00 
  800420eebd:	ff d0                	callq  *%rax
  800420eebf:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420eec6:	00 00 00 
  800420eec9:	48 98                	cltq   
  800420eecb:	48 c1 e0 03          	shl    $0x3,%rax
  800420eecf:	48 89 c1             	mov    %rax,%rcx
  800420eed2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eed6:	48 01 c8             	add    %rcx,%rax
  800420eed9:	48 01 d0             	add    %rdx,%rax
  800420eedc:	48 83 c0 08          	add    $0x8,%rax
  800420eee0:	48 8b 10             	mov    (%rax),%rdx
  800420eee3:	48 b8 98 f2 49 04 80 	movabs $0x800449f298,%rax
  800420eeea:	00 00 00 
  800420eeed:	48 8b 00             	mov    (%rax),%rax
  800420eef0:	48 39 c2             	cmp    %rax,%rdx
  800420eef3:	0f 84 83 00 00 00    	je     800420ef7c <debuginfo_rip+0x180>
  800420eef9:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ef00:	00 00 00 
  800420ef03:	ff d0                	callq  *%rax
  800420ef05:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ef0c:	00 00 00 
  800420ef0f:	48 98                	cltq   
  800420ef11:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef15:	48 89 c1             	mov    %rax,%rcx
  800420ef18:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef1c:	48 01 c8             	add    %rcx,%rax
  800420ef1f:	48 01 d0             	add    %rdx,%rax
  800420ef22:	48 83 c0 08          	add    $0x8,%rax
  800420ef26:	48 8b 00             	mov    (%rax),%rax
  800420ef29:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420ef30:	48 89 c7             	mov    %rax,%rdi
  800420ef33:	48 b8 ec 57 21 04 80 	movabs $0x80042157ec,%rax
  800420ef3a:	00 00 00 
  800420ef3d:	ff d0                	callq  *%rax
  800420ef3f:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ef46:	00 00 00 
  800420ef49:	ff d0                	callq  *%rax
  800420ef4b:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ef52:	00 00 00 
  800420ef55:	48 98                	cltq   
  800420ef57:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef5b:	48 89 c1             	mov    %rax,%rcx
  800420ef5e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef62:	48 01 c8             	add    %rcx,%rax
  800420ef65:	48 01 d0             	add    %rdx,%rax
  800420ef68:	48 83 c0 08          	add    $0x8,%rax
  800420ef6c:	48 8b 10             	mov    (%rax),%rdx
  800420ef6f:	48 b8 98 f2 49 04 80 	movabs $0x800449f298,%rax
  800420ef76:	00 00 00 
  800420ef79:	48 89 10             	mov    %rdx,(%rax)
  800420ef7c:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  800420ef83:	00 00 00 
  800420ef86:	ff d0                	callq  *%rax
  800420ef88:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  800420ef8f:	00 00 00 
  800420ef92:	48 98                	cltq   
  800420ef94:	48 c1 e0 03          	shl    $0x3,%rax
  800420ef98:	48 89 c1             	mov    %rax,%rcx
  800420ef9b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ef9f:	48 01 c8             	add    %rcx,%rax
  800420efa2:	48 01 d0             	add    %rdx,%rax
  800420efa5:	48 83 c0 08          	add    $0x8,%rax
  800420efa9:	48 8b 00             	mov    (%rax),%rax
  800420efac:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420efb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420efb7:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420efbe:	00 00 00 
  800420efc1:	48 8b 00             	mov    (%rax),%rax
  800420efc4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420efc8:	48 89 d6             	mov    %rdx,%rsi
  800420efcb:	48 89 c7             	mov    %rax,%rdi
  800420efce:	48 b8 a1 0f 21 04 80 	movabs $0x8004210fa1,%rax
  800420efd5:	00 00 00 
  800420efd8:	ff d0                	callq  *%rax
  800420efda:	48 bf dc a8 21 04 80 	movabs $0x800421a8dc,%rdi
  800420efe1:	00 00 00 
  800420efe4:	48 b8 6c 57 21 04 80 	movabs $0x800421576c,%rax
  800420efeb:	00 00 00 
  800420efee:	ff d0                	callq  *%rax
  800420eff0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420eff4:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420effb:	00 00 00 
  800420effe:	48 8b 00             	mov    (%rax),%rax
  800420f001:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f005:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420f009:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420f00d:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f014:	00 00 00 
  800420f017:	48 8b 00             	mov    (%rax),%rax
  800420f01a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420f01e:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420f022:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f026:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f02d:	00 00 00 
  800420f030:	48 8b 00             	mov    (%rax),%rax
  800420f033:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420f037:	48 85 c0             	test   %rax,%rax
  800420f03a:	0f 85 78 01 00 00    	jne    800420f1b8 <debuginfo_rip+0x3bc>
  800420f040:	48 b9 e8 a8 21 04 80 	movabs $0x800421a8e8,%rcx
  800420f047:	00 00 00 
  800420f04a:	48 ba ac a8 21 04 80 	movabs $0x800421a8ac,%rdx
  800420f051:	00 00 00 
  800420f054:	be 40 01 00 00       	mov    $0x140,%esi
  800420f059:	48 bf c1 a8 21 04 80 	movabs $0x800421a8c1,%rdi
  800420f060:	00 00 00 
  800420f063:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f068:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800420f06f:	00 00 00 
  800420f072:	41 ff d0             	callq  *%r8
  800420f075:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f07c:	00 00 00 
  800420f07f:	48 8b 00             	mov    (%rax),%rax
  800420f082:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
  800420f086:	48 8d 95 c0 9e ff ff 	lea    -0x6140(%rbp),%rdx
  800420f08d:	be 00 00 00 00       	mov    $0x0,%esi
  800420f092:	48 89 c7             	mov    %rax,%rdi
  800420f095:	48 b8 cc 20 21 04 80 	movabs $0x80042120cc,%rax
  800420f09c:	00 00 00 
  800420f09f:	ff d0                	callq  *%rax
  800420f0a1:	83 f8 04             	cmp    $0x4,%eax
  800420f0a4:	75 05                	jne    800420f0ab <debuginfo_rip+0x2af>
  800420f0a6:	e9 0d 01 00 00       	jmpq   800420f1b8 <debuginfo_rip+0x3bc>
  800420f0ab:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420f0af:	48 89 85 20 a2 ff ff 	mov    %rax,-0x5de0(%rbp)
  800420f0b6:	48 c7 85 28 a2 ff ff 	movq   $0x0,-0x5dd8(%rbp)
  800420f0bd:	00 00 00 00 
  800420f0c1:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f0c8:	00 00 00 
  800420f0cb:	48 8b 00             	mov    (%rax),%rax
  800420f0ce:	48 8d 8d 30 cf ff ff 	lea    -0x30d0(%rbp),%rcx
  800420f0d5:	48 8d 95 c0 9e ff ff 	lea    -0x6140(%rbp),%rdx
  800420f0dc:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  800420f0e0:	48 89 c7             	mov    %rax,%rdi
  800420f0e3:	48 b8 ce 22 21 04 80 	movabs $0x80042122ce,%rax
  800420f0ea:	00 00 00 
  800420f0ed:	ff d0                	callq  *%rax
  800420f0ef:	83 f8 04             	cmp    $0x4,%eax
  800420f0f2:	75 05                	jne    800420f0f9 <debuginfo_rip+0x2fd>
  800420f0f4:	e9 bf 00 00 00       	jmpq   800420f1b8 <debuginfo_rip+0x3bc>
  800420f0f9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420f0fd:	48 89 85 90 d2 ff ff 	mov    %rax,-0x2d70(%rbp)
  800420f104:	48 8d 85 c0 9e ff ff 	lea    -0x6140(%rbp),%rax
  800420f10b:	48 89 85 98 d2 ff ff 	mov    %rax,-0x2d68(%rbp)
  800420f112:	48 8b 95 48 6e ff ff 	mov    -0x91b8(%rbp),%rdx
  800420f119:	48 8d 8d 30 cf ff ff 	lea    -0x30d0(%rbp),%rcx
  800420f120:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420f127:	48 89 ce             	mov    %rcx,%rsi
  800420f12a:	48 89 c7             	mov    %rax,%rdi
  800420f12d:	48 b8 d6 e6 20 04 80 	movabs $0x800420e6d6,%rax
  800420f134:	00 00 00 
  800420f137:	ff d0                	callq  *%rax
  800420f139:	85 c0                	test   %eax,%eax
  800420f13b:	0f 85 ac 00 00 00    	jne    800420f1ed <debuginfo_rip+0x3f1>
  800420f141:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f148:	00 00 00 
  800420f14b:	48 8b 00             	mov    (%rax),%rax
  800420f14e:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
  800420f152:	48 8d 95 50 6e ff ff 	lea    -0x91b0(%rbp),%rdx
  800420f159:	48 8d b5 30 cf ff ff 	lea    -0x30d0(%rbp),%rsi
  800420f160:	48 89 c7             	mov    %rax,%rdi
  800420f163:	48 b8 cc 20 21 04 80 	movabs $0x80042120cc,%rax
  800420f16a:	00 00 00 
  800420f16d:	ff d0                	callq  *%rax
  800420f16f:	85 c0                	test   %eax,%eax
  800420f171:	79 02                	jns    800420f175 <debuginfo_rip+0x379>
  800420f173:	eb 43                	jmp    800420f1b8 <debuginfo_rip+0x3bc>
  800420f175:	48 8d 85 30 cf ff ff 	lea    -0x30d0(%rbp),%rax
  800420f17c:	48 8d 8d 50 6e ff ff 	lea    -0x91b0(%rbp),%rcx
  800420f183:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f188:	48 89 ce             	mov    %rcx,%rsi
  800420f18b:	48 89 c7             	mov    %rax,%rdi
  800420f18e:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  800420f195:	00 00 00 
  800420f198:	ff d0                	callq  *%rax
  800420f19a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800420f19e:	48 89 85 90 d2 ff ff 	mov    %rax,-0x2d70(%rbp)
  800420f1a5:	48 8d 85 c0 9e ff ff 	lea    -0x6140(%rbp),%rax
  800420f1ac:	48 89 85 98 d2 ff ff 	mov    %rax,-0x2d68(%rbp)
  800420f1b3:	e9 5a ff ff ff       	jmpq   800420f112 <debuginfo_rip+0x316>
  800420f1b8:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f1bf:	00 00 00 
  800420f1c2:	48 8b 00             	mov    (%rax),%rax
  800420f1c5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800420f1c9:	48 89 d6             	mov    %rdx,%rsi
  800420f1cc:	48 89 c7             	mov    %rax,%rdi
  800420f1cf:	48 b8 7d 10 21 04 80 	movabs $0x800421107d,%rax
  800420f1d6:	00 00 00 
  800420f1d9:	ff d0                	callq  *%rax
  800420f1db:	85 c0                	test   %eax,%eax
  800420f1dd:	0f 84 92 fe ff ff    	je     800420f075 <debuginfo_rip+0x279>
  800420f1e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f1e8:	e9 c7 00 00 00       	jmpq   800420f2b4 <debuginfo_rip+0x4b8>
  800420f1ed:	90                   	nop
  800420f1ee:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f1f5:	00 00 00 
  800420f1f8:	48 8b 00             	mov    (%rax),%rax
  800420f1fb:	be 00 00 00 00       	mov    $0x0,%esi
  800420f200:	48 89 c7             	mov    %rax,%rdi
  800420f203:	48 b8 e4 49 21 04 80 	movabs $0x80042149e4,%rax
  800420f20a:	00 00 00 
  800420f20d:	ff d0                	callq  *%rax
  800420f20f:	83 f8 01             	cmp    $0x1,%eax
  800420f212:	75 0a                	jne    800420f21e <debuginfo_rip+0x422>
  800420f214:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f219:	e9 96 00 00 00       	jmpq   800420f2b4 <debuginfo_rip+0x4b8>
  800420f21e:	48 b8 80 c6 22 04 80 	movabs $0x800422c680,%rax
  800420f225:	00 00 00 
  800420f228:	48 8b 08             	mov    (%rax),%rcx
  800420f22b:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f232:	00 00 00 
  800420f235:	48 8b 10             	mov    (%rax),%rdx
  800420f238:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f23f:	00 00 00 
  800420f242:	48 8b 00             	mov    (%rax),%rax
  800420f245:	48 8b b5 48 6e ff ff 	mov    -0x91b8(%rbp),%rsi
  800420f24c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f252:	48 89 c7             	mov    %rax,%rdi
  800420f255:	48 b8 ec 24 21 04 80 	movabs $0x80042124ec,%rax
  800420f25c:	00 00 00 
  800420f25f:	ff d0                	callq  *%rax
  800420f261:	85 c0                	test   %eax,%eax
  800420f263:	75 4a                	jne    800420f2af <debuginfo_rip+0x4b3>
  800420f265:	48 8b 85 40 6e ff ff 	mov    -0x91c0(%rbp),%rax
  800420f26c:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420f273:	48 b8 78 c6 22 04 80 	movabs $0x800422c678,%rax
  800420f27a:	00 00 00 
  800420f27d:	48 8b 30             	mov    (%rax),%rsi
  800420f280:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800420f287:	00 00 00 
  800420f28a:	48 8b 00             	mov    (%rax),%rax
  800420f28d:	48 8b 95 48 6e ff ff 	mov    -0x91b8(%rbp),%rdx
  800420f294:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420f29a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f2a0:	48 89 c7             	mov    %rax,%rdi
  800420f2a3:	48 b8 dc 37 21 04 80 	movabs $0x80042137dc,%rax
  800420f2aa:	00 00 00 
  800420f2ad:	ff d0                	callq  *%rax
  800420f2af:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f2b4:	c9                   	leaveq 
  800420f2b5:	c3                   	retq   

000000800420f2b6 <printnum>:
  800420f2b6:	55                   	push   %rbp
  800420f2b7:	48 89 e5             	mov    %rsp,%rbp
  800420f2ba:	48 83 ec 30          	sub    $0x30,%rsp
  800420f2be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420f2c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f2c6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420f2ca:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  800420f2cd:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
  800420f2d1:	44 89 4d dc          	mov    %r9d,-0x24(%rbp)
  800420f2d5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420f2d8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420f2dc:	77 54                	ja     800420f332 <printnum+0x7c>
  800420f2de:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420f2e1:	8d 78 ff             	lea    -0x1(%rax),%edi
  800420f2e4:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  800420f2e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f2eb:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f2f0:	48 f7 f6             	div    %rsi
  800420f2f3:	49 89 c2             	mov    %rax,%r10
  800420f2f6:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800420f2f9:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420f2fc:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f300:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f304:	41 89 c9             	mov    %ecx,%r9d
  800420f307:	41 89 f8             	mov    %edi,%r8d
  800420f30a:	89 d1                	mov    %edx,%ecx
  800420f30c:	4c 89 d2             	mov    %r10,%rdx
  800420f30f:	48 89 c7             	mov    %rax,%rdi
  800420f312:	48 b8 b6 f2 20 04 80 	movabs $0x800420f2b6,%rax
  800420f319:	00 00 00 
  800420f31c:	ff d0                	callq  *%rax
  800420f31e:	eb 1c                	jmp    800420f33c <printnum+0x86>
  800420f320:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800420f324:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420f327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f32b:	48 89 ce             	mov    %rcx,%rsi
  800420f32e:	89 d7                	mov    %edx,%edi
  800420f330:	ff d0                	callq  *%rax
  800420f332:	83 6d e0 01          	subl   $0x1,-0x20(%rbp)
  800420f336:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420f33a:	7f e4                	jg     800420f320 <printnum+0x6a>
  800420f33c:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420f33f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f343:	ba 00 00 00 00       	mov    $0x0,%edx
  800420f348:	48 f7 f1             	div    %rcx
  800420f34b:	48 b8 f0 aa 21 04 80 	movabs $0x800421aaf0,%rax
  800420f352:	00 00 00 
  800420f355:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
  800420f359:	0f be d0             	movsbl %al,%edx
  800420f35c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800420f360:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f364:	48 89 ce             	mov    %rcx,%rsi
  800420f367:	89 d7                	mov    %edx,%edi
  800420f369:	ff d0                	callq  *%rax
  800420f36b:	90                   	nop
  800420f36c:	c9                   	leaveq 
  800420f36d:	c3                   	retq   

000000800420f36e <getuint>:
  800420f36e:	55                   	push   %rbp
  800420f36f:	48 89 e5             	mov    %rsp,%rbp
  800420f372:	48 83 ec 20          	sub    $0x20,%rsp
  800420f376:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f37a:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f37d:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f381:	7e 4f                	jle    800420f3d2 <getuint+0x64>
  800420f383:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f387:	8b 00                	mov    (%rax),%eax
  800420f389:	83 f8 30             	cmp    $0x30,%eax
  800420f38c:	73 24                	jae    800420f3b2 <getuint+0x44>
  800420f38e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f392:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f396:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f39a:	8b 00                	mov    (%rax),%eax
  800420f39c:	89 c0                	mov    %eax,%eax
  800420f39e:	48 01 d0             	add    %rdx,%rax
  800420f3a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3a5:	8b 12                	mov    (%rdx),%edx
  800420f3a7:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f3aa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3ae:	89 0a                	mov    %ecx,(%rdx)
  800420f3b0:	eb 14                	jmp    800420f3c6 <getuint+0x58>
  800420f3b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3b6:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f3ba:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f3be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3c2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f3c6:	48 8b 00             	mov    (%rax),%rax
  800420f3c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f3cd:	e9 9d 00 00 00       	jmpq   800420f46f <getuint+0x101>
  800420f3d2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f3d6:	74 4c                	je     800420f424 <getuint+0xb6>
  800420f3d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3dc:	8b 00                	mov    (%rax),%eax
  800420f3de:	83 f8 30             	cmp    $0x30,%eax
  800420f3e1:	73 24                	jae    800420f407 <getuint+0x99>
  800420f3e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f3eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3ef:	8b 00                	mov    (%rax),%eax
  800420f3f1:	89 c0                	mov    %eax,%eax
  800420f3f3:	48 01 d0             	add    %rdx,%rax
  800420f3f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f3fa:	8b 12                	mov    (%rdx),%edx
  800420f3fc:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f3ff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f403:	89 0a                	mov    %ecx,(%rdx)
  800420f405:	eb 14                	jmp    800420f41b <getuint+0xad>
  800420f407:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f40b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f40f:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f413:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f417:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f41b:	48 8b 00             	mov    (%rax),%rax
  800420f41e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f422:	eb 4b                	jmp    800420f46f <getuint+0x101>
  800420f424:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f428:	8b 00                	mov    (%rax),%eax
  800420f42a:	83 f8 30             	cmp    $0x30,%eax
  800420f42d:	73 24                	jae    800420f453 <getuint+0xe5>
  800420f42f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f433:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f437:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f43b:	8b 00                	mov    (%rax),%eax
  800420f43d:	89 c0                	mov    %eax,%eax
  800420f43f:	48 01 d0             	add    %rdx,%rax
  800420f442:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f446:	8b 12                	mov    (%rdx),%edx
  800420f448:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f44b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f44f:	89 0a                	mov    %ecx,(%rdx)
  800420f451:	eb 14                	jmp    800420f467 <getuint+0xf9>
  800420f453:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f457:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f45b:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f45f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f463:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f467:	8b 00                	mov    (%rax),%eax
  800420f469:	89 c0                	mov    %eax,%eax
  800420f46b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f46f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f473:	c9                   	leaveq 
  800420f474:	c3                   	retq   

000000800420f475 <getint>:
  800420f475:	55                   	push   %rbp
  800420f476:	48 89 e5             	mov    %rsp,%rbp
  800420f479:	48 83 ec 20          	sub    $0x20,%rsp
  800420f47d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420f481:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420f484:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420f488:	7e 4f                	jle    800420f4d9 <getint+0x64>
  800420f48a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f48e:	8b 00                	mov    (%rax),%eax
  800420f490:	83 f8 30             	cmp    $0x30,%eax
  800420f493:	73 24                	jae    800420f4b9 <getint+0x44>
  800420f495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f499:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f49d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4a1:	8b 00                	mov    (%rax),%eax
  800420f4a3:	89 c0                	mov    %eax,%eax
  800420f4a5:	48 01 d0             	add    %rdx,%rax
  800420f4a8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f4ac:	8b 12                	mov    (%rdx),%edx
  800420f4ae:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f4b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f4b5:	89 0a                	mov    %ecx,(%rdx)
  800420f4b7:	eb 14                	jmp    800420f4cd <getint+0x58>
  800420f4b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4bd:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f4c1:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f4c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f4c9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f4cd:	48 8b 00             	mov    (%rax),%rax
  800420f4d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f4d4:	e9 9d 00 00 00       	jmpq   800420f576 <getint+0x101>
  800420f4d9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420f4dd:	74 4c                	je     800420f52b <getint+0xb6>
  800420f4df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4e3:	8b 00                	mov    (%rax),%eax
  800420f4e5:	83 f8 30             	cmp    $0x30,%eax
  800420f4e8:	73 24                	jae    800420f50e <getint+0x99>
  800420f4ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4ee:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f4f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f4f6:	8b 00                	mov    (%rax),%eax
  800420f4f8:	89 c0                	mov    %eax,%eax
  800420f4fa:	48 01 d0             	add    %rdx,%rax
  800420f4fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f501:	8b 12                	mov    (%rdx),%edx
  800420f503:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f506:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f50a:	89 0a                	mov    %ecx,(%rdx)
  800420f50c:	eb 14                	jmp    800420f522 <getint+0xad>
  800420f50e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f512:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f516:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f51a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f51e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f522:	48 8b 00             	mov    (%rax),%rax
  800420f525:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f529:	eb 4b                	jmp    800420f576 <getint+0x101>
  800420f52b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f52f:	8b 00                	mov    (%rax),%eax
  800420f531:	83 f8 30             	cmp    $0x30,%eax
  800420f534:	73 24                	jae    800420f55a <getint+0xe5>
  800420f536:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f53a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420f53e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f542:	8b 00                	mov    (%rax),%eax
  800420f544:	89 c0                	mov    %eax,%eax
  800420f546:	48 01 d0             	add    %rdx,%rax
  800420f549:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f54d:	8b 12                	mov    (%rdx),%edx
  800420f54f:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420f552:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f556:	89 0a                	mov    %ecx,(%rdx)
  800420f558:	eb 14                	jmp    800420f56e <getint+0xf9>
  800420f55a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f55e:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420f562:	48 8d 48 08          	lea    0x8(%rax),%rcx
  800420f566:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f56a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420f56e:	8b 00                	mov    (%rax),%eax
  800420f570:	48 98                	cltq   
  800420f572:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f57a:	c9                   	leaveq 
  800420f57b:	c3                   	retq   

000000800420f57c <vprintfmt>:
  800420f57c:	55                   	push   %rbp
  800420f57d:	48 89 e5             	mov    %rsp,%rbp
  800420f580:	41 54                	push   %r12
  800420f582:	53                   	push   %rbx
  800420f583:	48 83 ec 60          	sub    $0x60,%rsp
  800420f587:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420f58b:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420f58f:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f593:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420f597:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f59b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420f59f:	48 8b 0a             	mov    (%rdx),%rcx
  800420f5a2:	48 89 08             	mov    %rcx,(%rax)
  800420f5a5:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420f5a9:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420f5ad:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420f5b1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f5b5:	eb 17                	jmp    800420f5ce <vprintfmt+0x52>
  800420f5b7:	85 db                	test   %ebx,%ebx
  800420f5b9:	0f 84 b9 04 00 00    	je     800420fa78 <vprintfmt+0x4fc>
  800420f5bf:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f5c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f5c7:	48 89 d6             	mov    %rdx,%rsi
  800420f5ca:	89 df                	mov    %ebx,%edi
  800420f5cc:	ff d0                	callq  *%rax
  800420f5ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f5d2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f5d6:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f5da:	0f b6 00             	movzbl (%rax),%eax
  800420f5dd:	0f b6 d8             	movzbl %al,%ebx
  800420f5e0:	83 fb 25             	cmp    $0x25,%ebx
  800420f5e3:	75 d2                	jne    800420f5b7 <vprintfmt+0x3b>
  800420f5e5:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420f5e9:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420f5f0:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f5f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420f5fe:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420f605:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f609:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f60d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f611:	0f b6 00             	movzbl (%rax),%eax
  800420f614:	0f b6 d8             	movzbl %al,%ebx
  800420f617:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420f61a:	83 f8 55             	cmp    $0x55,%eax
  800420f61d:	0f 87 22 04 00 00    	ja     800420fa45 <vprintfmt+0x4c9>
  800420f623:	89 c0                	mov    %eax,%eax
  800420f625:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420f62c:	00 
  800420f62d:	48 b8 18 ab 21 04 80 	movabs $0x800421ab18,%rax
  800420f634:	00 00 00 
  800420f637:	48 01 d0             	add    %rdx,%rax
  800420f63a:	48 8b 00             	mov    (%rax),%rax
  800420f63d:	ff e0                	jmpq   *%rax
  800420f63f:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420f643:	eb c0                	jmp    800420f605 <vprintfmt+0x89>
  800420f645:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420f649:	eb ba                	jmp    800420f605 <vprintfmt+0x89>
  800420f64b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420f652:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420f655:	89 d0                	mov    %edx,%eax
  800420f657:	c1 e0 02             	shl    $0x2,%eax
  800420f65a:	01 d0                	add    %edx,%eax
  800420f65c:	01 c0                	add    %eax,%eax
  800420f65e:	01 d8                	add    %ebx,%eax
  800420f660:	83 e8 30             	sub    $0x30,%eax
  800420f663:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f666:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f66a:	0f b6 00             	movzbl (%rax),%eax
  800420f66d:	0f be d8             	movsbl %al,%ebx
  800420f670:	83 fb 2f             	cmp    $0x2f,%ebx
  800420f673:	7e 60                	jle    800420f6d5 <vprintfmt+0x159>
  800420f675:	83 fb 39             	cmp    $0x39,%ebx
  800420f678:	7f 5b                	jg     800420f6d5 <vprintfmt+0x159>
  800420f67a:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420f67f:	eb d1                	jmp    800420f652 <vprintfmt+0xd6>
  800420f681:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f684:	83 f8 30             	cmp    $0x30,%eax
  800420f687:	73 17                	jae    800420f6a0 <vprintfmt+0x124>
  800420f689:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f68d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f690:	89 d2                	mov    %edx,%edx
  800420f692:	48 01 d0             	add    %rdx,%rax
  800420f695:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f698:	83 c2 08             	add    $0x8,%edx
  800420f69b:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f69e:	eb 0c                	jmp    800420f6ac <vprintfmt+0x130>
  800420f6a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f6a4:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420f6a8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f6ac:	8b 00                	mov    (%rax),%eax
  800420f6ae:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420f6b1:	eb 23                	jmp    800420f6d6 <vprintfmt+0x15a>
  800420f6b3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f6b7:	0f 89 48 ff ff ff    	jns    800420f605 <vprintfmt+0x89>
  800420f6bd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420f6c4:	e9 3c ff ff ff       	jmpq   800420f605 <vprintfmt+0x89>
  800420f6c9:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420f6d0:	e9 30 ff ff ff       	jmpq   800420f605 <vprintfmt+0x89>
  800420f6d5:	90                   	nop
  800420f6d6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f6da:	0f 89 25 ff ff ff    	jns    800420f605 <vprintfmt+0x89>
  800420f6e0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f6e3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420f6e6:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420f6ed:	e9 13 ff ff ff       	jmpq   800420f605 <vprintfmt+0x89>
  800420f6f2:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420f6f6:	e9 0a ff ff ff       	jmpq   800420f605 <vprintfmt+0x89>
  800420f6fb:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f6fe:	83 f8 30             	cmp    $0x30,%eax
  800420f701:	73 17                	jae    800420f71a <vprintfmt+0x19e>
  800420f703:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f707:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f70a:	89 d2                	mov    %edx,%edx
  800420f70c:	48 01 d0             	add    %rdx,%rax
  800420f70f:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f712:	83 c2 08             	add    $0x8,%edx
  800420f715:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f718:	eb 0c                	jmp    800420f726 <vprintfmt+0x1aa>
  800420f71a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f71e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420f722:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f726:	8b 10                	mov    (%rax),%edx
  800420f728:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f72c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f730:	48 89 ce             	mov    %rcx,%rsi
  800420f733:	89 d7                	mov    %edx,%edi
  800420f735:	ff d0                	callq  *%rax
  800420f737:	e9 37 03 00 00       	jmpq   800420fa73 <vprintfmt+0x4f7>
  800420f73c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f73f:	83 f8 30             	cmp    $0x30,%eax
  800420f742:	73 17                	jae    800420f75b <vprintfmt+0x1df>
  800420f744:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f748:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f74b:	89 d2                	mov    %edx,%edx
  800420f74d:	48 01 d0             	add    %rdx,%rax
  800420f750:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f753:	83 c2 08             	add    $0x8,%edx
  800420f756:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f759:	eb 0c                	jmp    800420f767 <vprintfmt+0x1eb>
  800420f75b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f75f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420f763:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f767:	8b 18                	mov    (%rax),%ebx
  800420f769:	85 db                	test   %ebx,%ebx
  800420f76b:	79 02                	jns    800420f76f <vprintfmt+0x1f3>
  800420f76d:	f7 db                	neg    %ebx
  800420f76f:	83 fb 15             	cmp    $0x15,%ebx
  800420f772:	7f 16                	jg     800420f78a <vprintfmt+0x20e>
  800420f774:	48 b8 40 aa 21 04 80 	movabs $0x800421aa40,%rax
  800420f77b:	00 00 00 
  800420f77e:	48 63 d3             	movslq %ebx,%rdx
  800420f781:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420f785:	4d 85 e4             	test   %r12,%r12
  800420f788:	75 2e                	jne    800420f7b8 <vprintfmt+0x23c>
  800420f78a:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f78e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f792:	89 d9                	mov    %ebx,%ecx
  800420f794:	48 ba 01 ab 21 04 80 	movabs $0x800421ab01,%rdx
  800420f79b:	00 00 00 
  800420f79e:	48 89 c7             	mov    %rax,%rdi
  800420f7a1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f7a6:	49 b8 82 fa 20 04 80 	movabs $0x800420fa82,%r8
  800420f7ad:	00 00 00 
  800420f7b0:	41 ff d0             	callq  *%r8
  800420f7b3:	e9 bb 02 00 00       	jmpq   800420fa73 <vprintfmt+0x4f7>
  800420f7b8:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420f7bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f7c0:	4c 89 e1             	mov    %r12,%rcx
  800420f7c3:	48 ba 0a ab 21 04 80 	movabs $0x800421ab0a,%rdx
  800420f7ca:	00 00 00 
  800420f7cd:	48 89 c7             	mov    %rax,%rdi
  800420f7d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f7d5:	49 b8 82 fa 20 04 80 	movabs $0x800420fa82,%r8
  800420f7dc:	00 00 00 
  800420f7df:	41 ff d0             	callq  *%r8
  800420f7e2:	e9 8c 02 00 00       	jmpq   800420fa73 <vprintfmt+0x4f7>
  800420f7e7:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f7ea:	83 f8 30             	cmp    $0x30,%eax
  800420f7ed:	73 17                	jae    800420f806 <vprintfmt+0x28a>
  800420f7ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f7f3:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f7f6:	89 d2                	mov    %edx,%edx
  800420f7f8:	48 01 d0             	add    %rdx,%rax
  800420f7fb:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f7fe:	83 c2 08             	add    $0x8,%edx
  800420f801:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f804:	eb 0c                	jmp    800420f812 <vprintfmt+0x296>
  800420f806:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f80a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420f80e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f812:	4c 8b 20             	mov    (%rax),%r12
  800420f815:	4d 85 e4             	test   %r12,%r12
  800420f818:	75 0a                	jne    800420f824 <vprintfmt+0x2a8>
  800420f81a:	49 bc 0d ab 21 04 80 	movabs $0x800421ab0d,%r12
  800420f821:	00 00 00 
  800420f824:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f828:	7e 78                	jle    800420f8a2 <vprintfmt+0x326>
  800420f82a:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800420f82e:	74 72                	je     800420f8a2 <vprintfmt+0x326>
  800420f830:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420f833:	48 98                	cltq   
  800420f835:	48 89 c6             	mov    %rax,%rsi
  800420f838:	4c 89 e7             	mov    %r12,%rdi
  800420f83b:	48 b8 89 fe 20 04 80 	movabs $0x800420fe89,%rax
  800420f842:	00 00 00 
  800420f845:	ff d0                	callq  *%rax
  800420f847:	29 45 dc             	sub    %eax,-0x24(%rbp)
  800420f84a:	eb 17                	jmp    800420f863 <vprintfmt+0x2e7>
  800420f84c:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800420f850:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420f854:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f858:	48 89 ce             	mov    %rcx,%rsi
  800420f85b:	89 d7                	mov    %edx,%edi
  800420f85d:	ff d0                	callq  *%rax
  800420f85f:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f863:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f867:	7f e3                	jg     800420f84c <vprintfmt+0x2d0>
  800420f869:	eb 37                	jmp    800420f8a2 <vprintfmt+0x326>
  800420f86b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800420f86f:	74 1e                	je     800420f88f <vprintfmt+0x313>
  800420f871:	83 fb 1f             	cmp    $0x1f,%ebx
  800420f874:	7e 05                	jle    800420f87b <vprintfmt+0x2ff>
  800420f876:	83 fb 7e             	cmp    $0x7e,%ebx
  800420f879:	7e 14                	jle    800420f88f <vprintfmt+0x313>
  800420f87b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f87f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f883:	48 89 d6             	mov    %rdx,%rsi
  800420f886:	bf 3f 00 00 00       	mov    $0x3f,%edi
  800420f88b:	ff d0                	callq  *%rax
  800420f88d:	eb 0f                	jmp    800420f89e <vprintfmt+0x322>
  800420f88f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f893:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f897:	48 89 d6             	mov    %rdx,%rsi
  800420f89a:	89 df                	mov    %ebx,%edi
  800420f89c:	ff d0                	callq  *%rax
  800420f89e:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f8a2:	4c 89 e0             	mov    %r12,%rax
  800420f8a5:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800420f8a9:	0f b6 00             	movzbl (%rax),%eax
  800420f8ac:	0f be d8             	movsbl %al,%ebx
  800420f8af:	85 db                	test   %ebx,%ebx
  800420f8b1:	74 28                	je     800420f8db <vprintfmt+0x35f>
  800420f8b3:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f8b7:	78 b2                	js     800420f86b <vprintfmt+0x2ef>
  800420f8b9:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800420f8bd:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800420f8c1:	79 a8                	jns    800420f86b <vprintfmt+0x2ef>
  800420f8c3:	eb 16                	jmp    800420f8db <vprintfmt+0x35f>
  800420f8c5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f8c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f8cd:	48 89 d6             	mov    %rdx,%rsi
  800420f8d0:	bf 20 00 00 00       	mov    $0x20,%edi
  800420f8d5:	ff d0                	callq  *%rax
  800420f8d7:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  800420f8db:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420f8df:	7f e4                	jg     800420f8c5 <vprintfmt+0x349>
  800420f8e1:	e9 8d 01 00 00       	jmpq   800420fa73 <vprintfmt+0x4f7>
  800420f8e6:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f8ea:	be 03 00 00 00       	mov    $0x3,%esi
  800420f8ef:	48 89 c7             	mov    %rax,%rdi
  800420f8f2:	48 b8 75 f4 20 04 80 	movabs $0x800420f475,%rax
  800420f8f9:	00 00 00 
  800420f8fc:	ff d0                	callq  *%rax
  800420f8fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f906:	48 85 c0             	test   %rax,%rax
  800420f909:	79 1d                	jns    800420f928 <vprintfmt+0x3ac>
  800420f90b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f90f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f913:	48 89 d6             	mov    %rdx,%rsi
  800420f916:	bf 2d 00 00 00       	mov    $0x2d,%edi
  800420f91b:	ff d0                	callq  *%rax
  800420f91d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f921:	48 f7 d8             	neg    %rax
  800420f924:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f928:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f92f:	e9 d2 00 00 00       	jmpq   800420fa06 <vprintfmt+0x48a>
  800420f934:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f938:	be 03 00 00 00       	mov    $0x3,%esi
  800420f93d:	48 89 c7             	mov    %rax,%rdi
  800420f940:	48 b8 6e f3 20 04 80 	movabs $0x800420f36e,%rax
  800420f947:	00 00 00 
  800420f94a:	ff d0                	callq  *%rax
  800420f94c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f950:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800420f957:	e9 aa 00 00 00       	jmpq   800420fa06 <vprintfmt+0x48a>
  800420f95c:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f960:	be 03 00 00 00       	mov    $0x3,%esi
  800420f965:	48 89 c7             	mov    %rax,%rdi
  800420f968:	48 b8 6e f3 20 04 80 	movabs $0x800420f36e,%rax
  800420f96f:	00 00 00 
  800420f972:	ff d0                	callq  *%rax
  800420f974:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f978:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800420f97f:	e9 82 00 00 00       	jmpq   800420fa06 <vprintfmt+0x48a>
  800420f984:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f988:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f98c:	48 89 d6             	mov    %rdx,%rsi
  800420f98f:	bf 30 00 00 00       	mov    $0x30,%edi
  800420f994:	ff d0                	callq  *%rax
  800420f996:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420f99a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420f99e:	48 89 d6             	mov    %rdx,%rsi
  800420f9a1:	bf 78 00 00 00       	mov    $0x78,%edi
  800420f9a6:	ff d0                	callq  *%rax
  800420f9a8:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420f9ab:	83 f8 30             	cmp    $0x30,%eax
  800420f9ae:	73 17                	jae    800420f9c7 <vprintfmt+0x44b>
  800420f9b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f9b4:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f9b7:	89 d2                	mov    %edx,%edx
  800420f9b9:	48 01 d0             	add    %rdx,%rax
  800420f9bc:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420f9bf:	83 c2 08             	add    $0x8,%edx
  800420f9c2:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420f9c5:	eb 0c                	jmp    800420f9d3 <vprintfmt+0x457>
  800420f9c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420f9cb:	48 8d 50 08          	lea    0x8(%rax),%rdx
  800420f9cf:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420f9d3:	48 8b 00             	mov    (%rax),%rax
  800420f9d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f9da:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420f9e1:	eb 23                	jmp    800420fa06 <vprintfmt+0x48a>
  800420f9e3:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420f9e7:	be 03 00 00 00       	mov    $0x3,%esi
  800420f9ec:	48 89 c7             	mov    %rax,%rdi
  800420f9ef:	48 b8 6e f3 20 04 80 	movabs $0x800420f36e,%rax
  800420f9f6:	00 00 00 
  800420f9f9:	ff d0                	callq  *%rax
  800420f9fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f9ff:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  800420fa06:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800420fa0b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800420fa0e:	8b 7d dc             	mov    -0x24(%rbp),%edi
  800420fa11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fa15:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420fa19:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fa1d:	45 89 c1             	mov    %r8d,%r9d
  800420fa20:	41 89 f8             	mov    %edi,%r8d
  800420fa23:	48 89 c7             	mov    %rax,%rdi
  800420fa26:	48 b8 b6 f2 20 04 80 	movabs $0x800420f2b6,%rax
  800420fa2d:	00 00 00 
  800420fa30:	ff d0                	callq  *%rax
  800420fa32:	eb 3f                	jmp    800420fa73 <vprintfmt+0x4f7>
  800420fa34:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fa38:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fa3c:	48 89 d6             	mov    %rdx,%rsi
  800420fa3f:	89 df                	mov    %ebx,%edi
  800420fa41:	ff d0                	callq  *%rax
  800420fa43:	eb 2e                	jmp    800420fa73 <vprintfmt+0x4f7>
  800420fa45:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fa49:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fa4d:	48 89 d6             	mov    %rdx,%rsi
  800420fa50:	bf 25 00 00 00       	mov    $0x25,%edi
  800420fa55:	ff d0                	callq  *%rax
  800420fa57:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420fa5c:	eb 05                	jmp    800420fa63 <vprintfmt+0x4e7>
  800420fa5e:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800420fa63:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fa67:	48 83 e8 01          	sub    $0x1,%rax
  800420fa6b:	0f b6 00             	movzbl (%rax),%eax
  800420fa6e:	3c 25                	cmp    $0x25,%al
  800420fa70:	75 ec                	jne    800420fa5e <vprintfmt+0x4e2>
  800420fa72:	90                   	nop
  800420fa73:	e9 3d fb ff ff       	jmpq   800420f5b5 <vprintfmt+0x39>
  800420fa78:	90                   	nop
  800420fa79:	48 83 c4 60          	add    $0x60,%rsp
  800420fa7d:	5b                   	pop    %rbx
  800420fa7e:	41 5c                	pop    %r12
  800420fa80:	5d                   	pop    %rbp
  800420fa81:	c3                   	retq   

000000800420fa82 <printfmt>:
  800420fa82:	55                   	push   %rbp
  800420fa83:	48 89 e5             	mov    %rsp,%rbp
  800420fa86:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420fa8d:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420fa94:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  800420fa9b:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420faa2:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420faa9:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fab0:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fab7:	84 c0                	test   %al,%al
  800420fab9:	74 20                	je     800420fadb <printfmt+0x59>
  800420fabb:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fabf:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fac3:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fac7:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420facb:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420facf:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fad3:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fad7:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fadb:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420fae2:	00 00 00 
  800420fae5:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420faec:	00 00 00 
  800420faef:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420faf3:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fafa:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fb01:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420fb08:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  800420fb0f:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  800420fb16:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420fb1d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420fb24:	48 89 c7             	mov    %rax,%rdi
  800420fb27:	48 b8 7c f5 20 04 80 	movabs $0x800420f57c,%rax
  800420fb2e:	00 00 00 
  800420fb31:	ff d0                	callq  *%rax
  800420fb33:	90                   	nop
  800420fb34:	c9                   	leaveq 
  800420fb35:	c3                   	retq   

000000800420fb36 <sprintputch>:
  800420fb36:	55                   	push   %rbp
  800420fb37:	48 89 e5             	mov    %rsp,%rbp
  800420fb3a:	48 83 ec 10          	sub    $0x10,%rsp
  800420fb3e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420fb41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420fb45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fb49:	8b 40 10             	mov    0x10(%rax),%eax
  800420fb4c:	8d 50 01             	lea    0x1(%rax),%edx
  800420fb4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fb53:	89 50 10             	mov    %edx,0x10(%rax)
  800420fb56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fb5a:	48 8b 10             	mov    (%rax),%rdx
  800420fb5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fb61:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420fb65:	48 39 c2             	cmp    %rax,%rdx
  800420fb68:	73 17                	jae    800420fb81 <sprintputch+0x4b>
  800420fb6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420fb6e:	48 8b 00             	mov    (%rax),%rax
  800420fb71:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800420fb75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420fb79:	48 89 0a             	mov    %rcx,(%rdx)
  800420fb7c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420fb7f:	88 10                	mov    %dl,(%rax)
  800420fb81:	90                   	nop
  800420fb82:	c9                   	leaveq 
  800420fb83:	c3                   	retq   

000000800420fb84 <vsnprintf>:
  800420fb84:	55                   	push   %rbp
  800420fb85:	48 89 e5             	mov    %rsp,%rbp
  800420fb88:	48 83 ec 50          	sub    $0x50,%rsp
  800420fb8c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800420fb90:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800420fb93:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800420fb97:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800420fb9b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  800420fb9f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420fba3:	48 8b 0a             	mov    (%rdx),%rcx
  800420fba6:	48 89 08             	mov    %rcx,(%rax)
  800420fba9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fbad:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fbb1:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fbb5:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fbb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fbbd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fbc1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800420fbc4:	48 98                	cltq   
  800420fbc6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800420fbca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420fbce:	48 01 d0             	add    %rdx,%rax
  800420fbd1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420fbd5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fbdc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420fbe1:	74 06                	je     800420fbe9 <vsnprintf+0x65>
  800420fbe3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  800420fbe7:	7f 07                	jg     800420fbf0 <vsnprintf+0x6c>
  800420fbe9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420fbee:	eb 2f                	jmp    800420fc1f <vsnprintf+0x9b>
  800420fbf0:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420fbf4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420fbf8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420fbfc:	48 89 c6             	mov    %rax,%rsi
  800420fbff:	48 bf 36 fb 20 04 80 	movabs $0x800420fb36,%rdi
  800420fc06:	00 00 00 
  800420fc09:	48 b8 7c f5 20 04 80 	movabs $0x800420f57c,%rax
  800420fc10:	00 00 00 
  800420fc13:	ff d0                	callq  *%rax
  800420fc15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420fc19:	c6 00 00             	movb   $0x0,(%rax)
  800420fc1c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800420fc1f:	c9                   	leaveq 
  800420fc20:	c3                   	retq   

000000800420fc21 <snprintf>:
  800420fc21:	55                   	push   %rbp
  800420fc22:	48 89 e5             	mov    %rsp,%rbp
  800420fc25:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800420fc2c:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800420fc33:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  800420fc39:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  800420fc40:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420fc47:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800420fc4e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420fc55:	84 c0                	test   %al,%al
  800420fc57:	74 20                	je     800420fc79 <snprintf+0x58>
  800420fc59:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420fc5d:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420fc61:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420fc65:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420fc69:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420fc6d:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420fc71:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420fc75:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420fc79:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800420fc80:	00 00 00 
  800420fc83:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  800420fc8a:	00 00 00 
  800420fc8d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420fc91:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420fc98:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420fc9f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420fca6:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800420fcad:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420fcb4:	48 8b 0a             	mov    (%rdx),%rcx
  800420fcb7:	48 89 08             	mov    %rcx,(%rax)
  800420fcba:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fcbe:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fcc2:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fcc6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fcca:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  800420fcd1:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  800420fcd8:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800420fcde:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800420fce5:	48 89 c7             	mov    %rax,%rdi
  800420fce8:	48 b8 84 fb 20 04 80 	movabs $0x800420fb84,%rax
  800420fcef:	00 00 00 
  800420fcf2:	ff d0                	callq  *%rax
  800420fcf4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  800420fcfa:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800420fd00:	c9                   	leaveq 
  800420fd01:	c3                   	retq   

000000800420fd02 <readline>:
  800420fd02:	55                   	push   %rbp
  800420fd03:	48 89 e5             	mov    %rsp,%rbp
  800420fd06:	48 83 ec 20          	sub    $0x20,%rsp
  800420fd0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd0e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420fd13:	74 22                	je     800420fd37 <readline+0x35>
  800420fd15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd19:	48 89 c6             	mov    %rax,%rsi
  800420fd1c:	48 bf c8 ad 21 04 80 	movabs $0x800421adc8,%rdi
  800420fd23:	00 00 00 
  800420fd26:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fd2b:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420fd32:	00 00 00 
  800420fd35:	ff d2                	callq  *%rdx
  800420fd37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fd3e:	bf 00 00 00 00       	mov    $0x0,%edi
  800420fd43:	48 b8 95 13 20 04 80 	movabs $0x8004201395,%rax
  800420fd4a:	00 00 00 
  800420fd4d:	ff d0                	callq  *%rax
  800420fd4f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800420fd52:	48 b8 73 13 20 04 80 	movabs $0x8004201373,%rax
  800420fd59:	00 00 00 
  800420fd5c:	ff d0                	callq  *%rax
  800420fd5e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420fd61:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800420fd65:	79 30                	jns    800420fd97 <readline+0x95>
  800420fd67:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800420fd6b:	74 20                	je     800420fd8d <readline+0x8b>
  800420fd6d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fd70:	89 c6                	mov    %eax,%esi
  800420fd72:	48 bf cb ad 21 04 80 	movabs $0x800421adcb,%rdi
  800420fd79:	00 00 00 
  800420fd7c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fd81:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800420fd88:	00 00 00 
  800420fd8b:	ff d2                	callq  *%rdx
  800420fd8d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fd92:	e9 c2 00 00 00       	jmpq   800420fe59 <readline+0x157>
  800420fd97:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800420fd9b:	74 06                	je     800420fda3 <readline+0xa1>
  800420fd9d:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  800420fda1:	75 26                	jne    800420fdc9 <readline+0xc7>
  800420fda3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420fda7:	7e 20                	jle    800420fdc9 <readline+0xc7>
  800420fda9:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fdad:	74 11                	je     800420fdc0 <readline+0xbe>
  800420fdaf:	bf 08 00 00 00       	mov    $0x8,%edi
  800420fdb4:	48 b8 54 13 20 04 80 	movabs $0x8004201354,%rax
  800420fdbb:	00 00 00 
  800420fdbe:	ff d0                	callq  *%rax
  800420fdc0:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800420fdc4:	e9 8b 00 00 00       	jmpq   800420fe54 <readline+0x152>
  800420fdc9:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800420fdcd:	7e 3f                	jle    800420fe0e <readline+0x10c>
  800420fdcf:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  800420fdd6:	7f 36                	jg     800420fe0e <readline+0x10c>
  800420fdd8:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fddc:	74 11                	je     800420fdef <readline+0xed>
  800420fdde:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420fde1:	89 c7                	mov    %eax,%edi
  800420fde3:	48 b8 54 13 20 04 80 	movabs $0x8004201354,%rax
  800420fdea:	00 00 00 
  800420fded:	ff d0                	callq  *%rax
  800420fdef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fdf2:	8d 50 01             	lea    0x1(%rax),%edx
  800420fdf5:	89 55 fc             	mov    %edx,-0x4(%rbp)
  800420fdf8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420fdfb:	89 d1                	mov    %edx,%ecx
  800420fdfd:	48 ba a0 f2 49 04 80 	movabs $0x800449f2a0,%rdx
  800420fe04:	00 00 00 
  800420fe07:	48 98                	cltq   
  800420fe09:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420fe0c:	eb 46                	jmp    800420fe54 <readline+0x152>
  800420fe0e:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  800420fe12:	74 0a                	je     800420fe1e <readline+0x11c>
  800420fe14:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  800420fe18:	0f 85 34 ff ff ff    	jne    800420fd52 <readline+0x50>
  800420fe1e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800420fe22:	74 11                	je     800420fe35 <readline+0x133>
  800420fe24:	bf 0a 00 00 00       	mov    $0xa,%edi
  800420fe29:	48 b8 54 13 20 04 80 	movabs $0x8004201354,%rax
  800420fe30:	00 00 00 
  800420fe33:	ff d0                	callq  *%rax
  800420fe35:	48 ba a0 f2 49 04 80 	movabs $0x800449f2a0,%rdx
  800420fe3c:	00 00 00 
  800420fe3f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fe42:	48 98                	cltq   
  800420fe44:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800420fe48:	48 b8 a0 f2 49 04 80 	movabs $0x800449f2a0,%rax
  800420fe4f:	00 00 00 
  800420fe52:	eb 05                	jmp    800420fe59 <readline+0x157>
  800420fe54:	e9 f9 fe ff ff       	jmpq   800420fd52 <readline+0x50>
  800420fe59:	c9                   	leaveq 
  800420fe5a:	c3                   	retq   

000000800420fe5b <strlen>:
  800420fe5b:	55                   	push   %rbp
  800420fe5c:	48 89 e5             	mov    %rsp,%rbp
  800420fe5f:	48 83 ec 18          	sub    $0x18,%rsp
  800420fe63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe67:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fe6e:	eb 09                	jmp    800420fe79 <strlen+0x1e>
  800420fe70:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fe74:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420fe79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe7d:	0f b6 00             	movzbl (%rax),%eax
  800420fe80:	84 c0                	test   %al,%al
  800420fe82:	75 ec                	jne    800420fe70 <strlen+0x15>
  800420fe84:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fe87:	c9                   	leaveq 
  800420fe88:	c3                   	retq   

000000800420fe89 <strnlen>:
  800420fe89:	55                   	push   %rbp
  800420fe8a:	48 89 e5             	mov    %rsp,%rbp
  800420fe8d:	48 83 ec 20          	sub    $0x20,%rsp
  800420fe91:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe95:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fe99:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420fea0:	eb 0e                	jmp    800420feb0 <strnlen+0x27>
  800420fea2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420fea6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800420feab:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  800420feb0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420feb5:	74 0b                	je     800420fec2 <strnlen+0x39>
  800420feb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420febb:	0f b6 00             	movzbl (%rax),%eax
  800420febe:	84 c0                	test   %al,%al
  800420fec0:	75 e0                	jne    800420fea2 <strnlen+0x19>
  800420fec2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420fec5:	c9                   	leaveq 
  800420fec6:	c3                   	retq   

000000800420fec7 <strcpy>:
  800420fec7:	55                   	push   %rbp
  800420fec8:	48 89 e5             	mov    %rsp,%rbp
  800420fecb:	48 83 ec 20          	sub    $0x20,%rsp
  800420fecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fed3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fed7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fedb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fedf:	90                   	nop
  800420fee0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fee4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fee8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420feec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420fef0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fef4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fef8:	0f b6 12             	movzbl (%rdx),%edx
  800420fefb:	88 10                	mov    %dl,(%rax)
  800420fefd:	0f b6 00             	movzbl (%rax),%eax
  800420ff00:	84 c0                	test   %al,%al
  800420ff02:	75 dc                	jne    800420fee0 <strcpy+0x19>
  800420ff04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff08:	c9                   	leaveq 
  800420ff09:	c3                   	retq   

000000800420ff0a <strcat>:
  800420ff0a:	55                   	push   %rbp
  800420ff0b:	48 89 e5             	mov    %rsp,%rbp
  800420ff0e:	48 83 ec 20          	sub    $0x20,%rsp
  800420ff12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ff16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ff1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff1e:	48 89 c7             	mov    %rax,%rdi
  800420ff21:	48 b8 5b fe 20 04 80 	movabs $0x800420fe5b,%rax
  800420ff28:	00 00 00 
  800420ff2b:	ff d0                	callq  *%rax
  800420ff2d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ff30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ff33:	48 63 d0             	movslq %eax,%rdx
  800420ff36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff3a:	48 01 c2             	add    %rax,%rdx
  800420ff3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ff41:	48 89 c6             	mov    %rax,%rsi
  800420ff44:	48 89 d7             	mov    %rdx,%rdi
  800420ff47:	48 b8 c7 fe 20 04 80 	movabs $0x800420fec7,%rax
  800420ff4e:	00 00 00 
  800420ff51:	ff d0                	callq  *%rax
  800420ff53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff57:	c9                   	leaveq 
  800420ff58:	c3                   	retq   

000000800420ff59 <strncpy>:
  800420ff59:	55                   	push   %rbp
  800420ff5a:	48 89 e5             	mov    %rsp,%rbp
  800420ff5d:	48 83 ec 28          	sub    $0x28,%rsp
  800420ff61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ff65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ff69:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420ff6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420ff75:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420ff7c:	00 
  800420ff7d:	eb 2a                	jmp    800420ffa9 <strncpy+0x50>
  800420ff7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff83:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420ff87:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ff8b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ff8f:	0f b6 12             	movzbl (%rdx),%edx
  800420ff92:	88 10                	mov    %dl,(%rax)
  800420ff94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ff98:	0f b6 00             	movzbl (%rax),%eax
  800420ff9b:	84 c0                	test   %al,%al
  800420ff9d:	74 05                	je     800420ffa4 <strncpy+0x4b>
  800420ff9f:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  800420ffa4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420ffa9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffad:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420ffb1:	72 cc                	jb     800420ff7f <strncpy+0x26>
  800420ffb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ffb7:	c9                   	leaveq 
  800420ffb8:	c3                   	retq   

000000800420ffb9 <strlcpy>:
  800420ffb9:	55                   	push   %rbp
  800420ffba:	48 89 e5             	mov    %rsp,%rbp
  800420ffbd:	48 83 ec 28          	sub    $0x28,%rsp
  800420ffc1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ffc5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420ffc9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420ffcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffd1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ffd5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420ffda:	74 3d                	je     8004210019 <strlcpy+0x60>
  800420ffdc:	eb 1d                	jmp    800420fffb <strlcpy+0x42>
  800420ffde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ffe2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420ffe6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ffea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ffee:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800420fff2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420fff6:	0f b6 12             	movzbl (%rdx),%edx
  800420fff9:	88 10                	mov    %dl,(%rax)
  800420fffb:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210000:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210005:	74 0b                	je     8004210012 <strlcpy+0x59>
  8004210007:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421000b:	0f b6 00             	movzbl (%rax),%eax
  800421000e:	84 c0                	test   %al,%al
  8004210010:	75 cc                	jne    800420ffde <strlcpy+0x25>
  8004210012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210016:	c6 00 00             	movb   $0x0,(%rax)
  8004210019:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421001d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210021:	48 29 c2             	sub    %rax,%rdx
  8004210024:	48 89 d0             	mov    %rdx,%rax
  8004210027:	c9                   	leaveq 
  8004210028:	c3                   	retq   

0000008004210029 <strcmp>:
  8004210029:	55                   	push   %rbp
  800421002a:	48 89 e5             	mov    %rsp,%rbp
  800421002d:	48 83 ec 10          	sub    $0x10,%rsp
  8004210031:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210035:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210039:	eb 0a                	jmp    8004210045 <strcmp+0x1c>
  800421003b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210040:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210049:	0f b6 00             	movzbl (%rax),%eax
  800421004c:	84 c0                	test   %al,%al
  800421004e:	74 12                	je     8004210062 <strcmp+0x39>
  8004210050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210054:	0f b6 10             	movzbl (%rax),%edx
  8004210057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421005b:	0f b6 00             	movzbl (%rax),%eax
  800421005e:	38 c2                	cmp    %al,%dl
  8004210060:	74 d9                	je     800421003b <strcmp+0x12>
  8004210062:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210066:	0f b6 00             	movzbl (%rax),%eax
  8004210069:	0f b6 d0             	movzbl %al,%edx
  800421006c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210070:	0f b6 00             	movzbl (%rax),%eax
  8004210073:	0f b6 c0             	movzbl %al,%eax
  8004210076:	29 c2                	sub    %eax,%edx
  8004210078:	89 d0                	mov    %edx,%eax
  800421007a:	c9                   	leaveq 
  800421007b:	c3                   	retq   

000000800421007c <strncmp>:
  800421007c:	55                   	push   %rbp
  800421007d:	48 89 e5             	mov    %rsp,%rbp
  8004210080:	48 83 ec 18          	sub    $0x18,%rsp
  8004210084:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210088:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421008c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210090:	eb 0f                	jmp    80042100a1 <strncmp+0x25>
  8004210092:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210097:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421009c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042100a1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042100a6:	74 1d                	je     80042100c5 <strncmp+0x49>
  80042100a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100ac:	0f b6 00             	movzbl (%rax),%eax
  80042100af:	84 c0                	test   %al,%al
  80042100b1:	74 12                	je     80042100c5 <strncmp+0x49>
  80042100b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100b7:	0f b6 10             	movzbl (%rax),%edx
  80042100ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100be:	0f b6 00             	movzbl (%rax),%eax
  80042100c1:	38 c2                	cmp    %al,%dl
  80042100c3:	74 cd                	je     8004210092 <strncmp+0x16>
  80042100c5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042100ca:	75 07                	jne    80042100d3 <strncmp+0x57>
  80042100cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042100d1:	eb 18                	jmp    80042100eb <strncmp+0x6f>
  80042100d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042100d7:	0f b6 00             	movzbl (%rax),%eax
  80042100da:	0f b6 d0             	movzbl %al,%edx
  80042100dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042100e1:	0f b6 00             	movzbl (%rax),%eax
  80042100e4:	0f b6 c0             	movzbl %al,%eax
  80042100e7:	29 c2                	sub    %eax,%edx
  80042100e9:	89 d0                	mov    %edx,%eax
  80042100eb:	c9                   	leaveq 
  80042100ec:	c3                   	retq   

00000080042100ed <strchr>:
  80042100ed:	55                   	push   %rbp
  80042100ee:	48 89 e5             	mov    %rsp,%rbp
  80042100f1:	48 83 ec 10          	sub    $0x10,%rsp
  80042100f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042100f9:	89 f0                	mov    %esi,%eax
  80042100fb:	88 45 f4             	mov    %al,-0xc(%rbp)
  80042100fe:	eb 17                	jmp    8004210117 <strchr+0x2a>
  8004210100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210104:	0f b6 00             	movzbl (%rax),%eax
  8004210107:	3a 45 f4             	cmp    -0xc(%rbp),%al
  800421010a:	75 06                	jne    8004210112 <strchr+0x25>
  800421010c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210110:	eb 15                	jmp    8004210127 <strchr+0x3a>
  8004210112:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210117:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421011b:	0f b6 00             	movzbl (%rax),%eax
  800421011e:	84 c0                	test   %al,%al
  8004210120:	75 de                	jne    8004210100 <strchr+0x13>
  8004210122:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210127:	c9                   	leaveq 
  8004210128:	c3                   	retq   

0000008004210129 <strfind>:
  8004210129:	55                   	push   %rbp
  800421012a:	48 89 e5             	mov    %rsp,%rbp
  800421012d:	48 83 ec 10          	sub    $0x10,%rsp
  8004210131:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210135:	89 f0                	mov    %esi,%eax
  8004210137:	88 45 f4             	mov    %al,-0xc(%rbp)
  800421013a:	eb 11                	jmp    800421014d <strfind+0x24>
  800421013c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210140:	0f b6 00             	movzbl (%rax),%eax
  8004210143:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210146:	74 12                	je     800421015a <strfind+0x31>
  8004210148:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421014d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210151:	0f b6 00             	movzbl (%rax),%eax
  8004210154:	84 c0                	test   %al,%al
  8004210156:	75 e4                	jne    800421013c <strfind+0x13>
  8004210158:	eb 01                	jmp    800421015b <strfind+0x32>
  800421015a:	90                   	nop
  800421015b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421015f:	c9                   	leaveq 
  8004210160:	c3                   	retq   

0000008004210161 <memset>:
  8004210161:	55                   	push   %rbp
  8004210162:	48 89 e5             	mov    %rsp,%rbp
  8004210165:	48 83 ec 18          	sub    $0x18,%rsp
  8004210169:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421016d:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210170:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210174:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210179:	75 06                	jne    8004210181 <memset+0x20>
  800421017b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421017f:	eb 69                	jmp    80042101ea <memset+0x89>
  8004210181:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210185:	83 e0 03             	and    $0x3,%eax
  8004210188:	48 85 c0             	test   %rax,%rax
  800421018b:	75 48                	jne    80042101d5 <memset+0x74>
  800421018d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210191:	83 e0 03             	and    $0x3,%eax
  8004210194:	48 85 c0             	test   %rax,%rax
  8004210197:	75 3c                	jne    80042101d5 <memset+0x74>
  8004210199:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  80042101a0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042101a3:	c1 e0 18             	shl    $0x18,%eax
  80042101a6:	89 c2                	mov    %eax,%edx
  80042101a8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042101ab:	c1 e0 10             	shl    $0x10,%eax
  80042101ae:	09 c2                	or     %eax,%edx
  80042101b0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042101b3:	c1 e0 08             	shl    $0x8,%eax
  80042101b6:	09 d0                	or     %edx,%eax
  80042101b8:	09 45 f4             	or     %eax,-0xc(%rbp)
  80042101bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042101bf:	48 c1 e8 02          	shr    $0x2,%rax
  80042101c3:	48 89 c1             	mov    %rax,%rcx
  80042101c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042101ca:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042101cd:	48 89 d7             	mov    %rdx,%rdi
  80042101d0:	fc                   	cld    
  80042101d1:	f3 ab                	rep stos %eax,%es:(%rdi)
  80042101d3:	eb 11                	jmp    80042101e6 <memset+0x85>
  80042101d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042101d9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042101dc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042101e0:	48 89 d7             	mov    %rdx,%rdi
  80042101e3:	fc                   	cld    
  80042101e4:	f3 aa                	rep stos %al,%es:(%rdi)
  80042101e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042101ea:	c9                   	leaveq 
  80042101eb:	c3                   	retq   

00000080042101ec <memmove>:
  80042101ec:	55                   	push   %rbp
  80042101ed:	48 89 e5             	mov    %rsp,%rbp
  80042101f0:	48 83 ec 28          	sub    $0x28,%rsp
  80042101f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042101f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042101fc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210200:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210204:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210208:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421020c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210214:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210218:	0f 83 88 00 00 00    	jae    80042102a6 <memmove+0xba>
  800421021e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210222:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210226:	48 01 d0             	add    %rdx,%rax
  8004210229:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  800421022d:	76 77                	jbe    80042102a6 <memmove+0xba>
  800421022f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210233:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210237:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421023b:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  800421023f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210243:	83 e0 03             	and    $0x3,%eax
  8004210246:	48 85 c0             	test   %rax,%rax
  8004210249:	75 3b                	jne    8004210286 <memmove+0x9a>
  800421024b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421024f:	83 e0 03             	and    $0x3,%eax
  8004210252:	48 85 c0             	test   %rax,%rax
  8004210255:	75 2f                	jne    8004210286 <memmove+0x9a>
  8004210257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421025b:	83 e0 03             	and    $0x3,%eax
  800421025e:	48 85 c0             	test   %rax,%rax
  8004210261:	75 23                	jne    8004210286 <memmove+0x9a>
  8004210263:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210267:	48 83 e8 04          	sub    $0x4,%rax
  800421026b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421026f:	48 83 ea 04          	sub    $0x4,%rdx
  8004210273:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210277:	48 c1 e9 02          	shr    $0x2,%rcx
  800421027b:	48 89 c7             	mov    %rax,%rdi
  800421027e:	48 89 d6             	mov    %rdx,%rsi
  8004210281:	fd                   	std    
  8004210282:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210284:	eb 1d                	jmp    80042102a3 <memmove+0xb7>
  8004210286:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421028a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421028e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210292:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210296:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421029a:	48 89 d7             	mov    %rdx,%rdi
  800421029d:	48 89 c1             	mov    %rax,%rcx
  80042102a0:	fd                   	std    
  80042102a1:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042102a3:	fc                   	cld    
  80042102a4:	eb 57                	jmp    80042102fd <memmove+0x111>
  80042102a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042102aa:	83 e0 03             	and    $0x3,%eax
  80042102ad:	48 85 c0             	test   %rax,%rax
  80042102b0:	75 36                	jne    80042102e8 <memmove+0xfc>
  80042102b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042102b6:	83 e0 03             	and    $0x3,%eax
  80042102b9:	48 85 c0             	test   %rax,%rax
  80042102bc:	75 2a                	jne    80042102e8 <memmove+0xfc>
  80042102be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102c2:	83 e0 03             	and    $0x3,%eax
  80042102c5:	48 85 c0             	test   %rax,%rax
  80042102c8:	75 1e                	jne    80042102e8 <memmove+0xfc>
  80042102ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042102ce:	48 c1 e8 02          	shr    $0x2,%rax
  80042102d2:	48 89 c1             	mov    %rax,%rcx
  80042102d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042102d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042102dd:	48 89 c7             	mov    %rax,%rdi
  80042102e0:	48 89 d6             	mov    %rdx,%rsi
  80042102e3:	fc                   	cld    
  80042102e4:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  80042102e6:	eb 15                	jmp    80042102fd <memmove+0x111>
  80042102e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042102ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042102f0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042102f4:	48 89 c7             	mov    %rax,%rdi
  80042102f7:	48 89 d6             	mov    %rdx,%rsi
  80042102fa:	fc                   	cld    
  80042102fb:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  80042102fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210301:	c9                   	leaveq 
  8004210302:	c3                   	retq   

0000008004210303 <memcpy>:
  8004210303:	55                   	push   %rbp
  8004210304:	48 89 e5             	mov    %rsp,%rbp
  8004210307:	48 83 ec 18          	sub    $0x18,%rsp
  800421030b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421030f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210313:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210317:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421031b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421031f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210323:	48 89 ce             	mov    %rcx,%rsi
  8004210326:	48 89 c7             	mov    %rax,%rdi
  8004210329:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  8004210330:	00 00 00 
  8004210333:	ff d0                	callq  *%rax
  8004210335:	c9                   	leaveq 
  8004210336:	c3                   	retq   

0000008004210337 <memcmp>:
  8004210337:	55                   	push   %rbp
  8004210338:	48 89 e5             	mov    %rsp,%rbp
  800421033b:	48 83 ec 28          	sub    $0x28,%rsp
  800421033f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210343:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210347:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421034b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421034f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210357:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421035b:	eb 36                	jmp    8004210393 <memcmp+0x5c>
  800421035d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210361:	0f b6 10             	movzbl (%rax),%edx
  8004210364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210368:	0f b6 00             	movzbl (%rax),%eax
  800421036b:	38 c2                	cmp    %al,%dl
  800421036d:	74 1a                	je     8004210389 <memcmp+0x52>
  800421036f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210373:	0f b6 00             	movzbl (%rax),%eax
  8004210376:	0f b6 d0             	movzbl %al,%edx
  8004210379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421037d:	0f b6 00             	movzbl (%rax),%eax
  8004210380:	0f b6 c0             	movzbl %al,%eax
  8004210383:	29 c2                	sub    %eax,%edx
  8004210385:	89 d0                	mov    %edx,%eax
  8004210387:	eb 20                	jmp    80042103a9 <memcmp+0x72>
  8004210389:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421038e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210393:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210397:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  800421039b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421039f:	48 85 c0             	test   %rax,%rax
  80042103a2:	75 b9                	jne    800421035d <memcmp+0x26>
  80042103a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042103a9:	c9                   	leaveq 
  80042103aa:	c3                   	retq   

00000080042103ab <memfind>:
  80042103ab:	55                   	push   %rbp
  80042103ac:	48 89 e5             	mov    %rsp,%rbp
  80042103af:	48 83 ec 28          	sub    $0x28,%rsp
  80042103b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042103b7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042103ba:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042103be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042103c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042103c6:	48 01 d0             	add    %rdx,%rax
  80042103c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042103cd:	eb 13                	jmp    80042103e2 <memfind+0x37>
  80042103cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103d3:	0f b6 00             	movzbl (%rax),%eax
  80042103d6:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042103d9:	38 d0                	cmp    %dl,%al
  80042103db:	74 11                	je     80042103ee <memfind+0x43>
  80042103dd:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042103e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103e6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042103ea:	72 e3                	jb     80042103cf <memfind+0x24>
  80042103ec:	eb 01                	jmp    80042103ef <memfind+0x44>
  80042103ee:	90                   	nop
  80042103ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042103f3:	c9                   	leaveq 
  80042103f4:	c3                   	retq   

00000080042103f5 <strtol>:
  80042103f5:	55                   	push   %rbp
  80042103f6:	48 89 e5             	mov    %rsp,%rbp
  80042103f9:	48 83 ec 38          	sub    $0x38,%rsp
  80042103fd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210401:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210405:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210408:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421040f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210416:	00 
  8004210417:	eb 05                	jmp    800421041e <strtol+0x29>
  8004210419:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  800421041e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210422:	0f b6 00             	movzbl (%rax),%eax
  8004210425:	3c 20                	cmp    $0x20,%al
  8004210427:	74 f0                	je     8004210419 <strtol+0x24>
  8004210429:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421042d:	0f b6 00             	movzbl (%rax),%eax
  8004210430:	3c 09                	cmp    $0x9,%al
  8004210432:	74 e5                	je     8004210419 <strtol+0x24>
  8004210434:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210438:	0f b6 00             	movzbl (%rax),%eax
  800421043b:	3c 2b                	cmp    $0x2b,%al
  800421043d:	75 07                	jne    8004210446 <strtol+0x51>
  800421043f:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210444:	eb 17                	jmp    800421045d <strtol+0x68>
  8004210446:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421044a:	0f b6 00             	movzbl (%rax),%eax
  800421044d:	3c 2d                	cmp    $0x2d,%al
  800421044f:	75 0c                	jne    800421045d <strtol+0x68>
  8004210451:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210456:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  800421045d:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210461:	74 06                	je     8004210469 <strtol+0x74>
  8004210463:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210467:	75 28                	jne    8004210491 <strtol+0x9c>
  8004210469:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421046d:	0f b6 00             	movzbl (%rax),%eax
  8004210470:	3c 30                	cmp    $0x30,%al
  8004210472:	75 1d                	jne    8004210491 <strtol+0x9c>
  8004210474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210478:	48 83 c0 01          	add    $0x1,%rax
  800421047c:	0f b6 00             	movzbl (%rax),%eax
  800421047f:	3c 78                	cmp    $0x78,%al
  8004210481:	75 0e                	jne    8004210491 <strtol+0x9c>
  8004210483:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210488:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  800421048f:	eb 2c                	jmp    80042104bd <strtol+0xc8>
  8004210491:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210495:	75 19                	jne    80042104b0 <strtol+0xbb>
  8004210497:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421049b:	0f b6 00             	movzbl (%rax),%eax
  800421049e:	3c 30                	cmp    $0x30,%al
  80042104a0:	75 0e                	jne    80042104b0 <strtol+0xbb>
  80042104a2:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042104a7:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  80042104ae:	eb 0d                	jmp    80042104bd <strtol+0xc8>
  80042104b0:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042104b4:	75 07                	jne    80042104bd <strtol+0xc8>
  80042104b6:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  80042104bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104c1:	0f b6 00             	movzbl (%rax),%eax
  80042104c4:	3c 2f                	cmp    $0x2f,%al
  80042104c6:	7e 1d                	jle    80042104e5 <strtol+0xf0>
  80042104c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104cc:	0f b6 00             	movzbl (%rax),%eax
  80042104cf:	3c 39                	cmp    $0x39,%al
  80042104d1:	7f 12                	jg     80042104e5 <strtol+0xf0>
  80042104d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104d7:	0f b6 00             	movzbl (%rax),%eax
  80042104da:	0f be c0             	movsbl %al,%eax
  80042104dd:	83 e8 30             	sub    $0x30,%eax
  80042104e0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042104e3:	eb 4e                	jmp    8004210533 <strtol+0x13e>
  80042104e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104e9:	0f b6 00             	movzbl (%rax),%eax
  80042104ec:	3c 60                	cmp    $0x60,%al
  80042104ee:	7e 1d                	jle    800421050d <strtol+0x118>
  80042104f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104f4:	0f b6 00             	movzbl (%rax),%eax
  80042104f7:	3c 7a                	cmp    $0x7a,%al
  80042104f9:	7f 12                	jg     800421050d <strtol+0x118>
  80042104fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042104ff:	0f b6 00             	movzbl (%rax),%eax
  8004210502:	0f be c0             	movsbl %al,%eax
  8004210505:	83 e8 57             	sub    $0x57,%eax
  8004210508:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800421050b:	eb 26                	jmp    8004210533 <strtol+0x13e>
  800421050d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210511:	0f b6 00             	movzbl (%rax),%eax
  8004210514:	3c 40                	cmp    $0x40,%al
  8004210516:	7e 47                	jle    800421055f <strtol+0x16a>
  8004210518:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421051c:	0f b6 00             	movzbl (%rax),%eax
  800421051f:	3c 5a                	cmp    $0x5a,%al
  8004210521:	7f 3c                	jg     800421055f <strtol+0x16a>
  8004210523:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210527:	0f b6 00             	movzbl (%rax),%eax
  800421052a:	0f be c0             	movsbl %al,%eax
  800421052d:	83 e8 37             	sub    $0x37,%eax
  8004210530:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210533:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210536:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210539:	7d 23                	jge    800421055e <strtol+0x169>
  800421053b:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210540:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210543:	48 98                	cltq   
  8004210545:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  800421054a:	48 89 c2             	mov    %rax,%rdx
  800421054d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210550:	48 98                	cltq   
  8004210552:	48 01 d0             	add    %rdx,%rax
  8004210555:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210559:	e9 5f ff ff ff       	jmpq   80042104bd <strtol+0xc8>
  800421055e:	90                   	nop
  800421055f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210564:	74 0b                	je     8004210571 <strtol+0x17c>
  8004210566:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421056a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421056e:	48 89 10             	mov    %rdx,(%rax)
  8004210571:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210575:	74 09                	je     8004210580 <strtol+0x18b>
  8004210577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421057b:	48 f7 d8             	neg    %rax
  800421057e:	eb 04                	jmp    8004210584 <strtol+0x18f>
  8004210580:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210584:	c9                   	leaveq 
  8004210585:	c3                   	retq   

0000008004210586 <strstr>:
  8004210586:	55                   	push   %rbp
  8004210587:	48 89 e5             	mov    %rsp,%rbp
  800421058a:	48 83 ec 30          	sub    $0x30,%rsp
  800421058e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210592:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210596:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421059a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421059e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042105a2:	0f b6 00             	movzbl (%rax),%eax
  80042105a5:	88 45 ff             	mov    %al,-0x1(%rbp)
  80042105a8:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  80042105ac:	75 06                	jne    80042105b4 <strstr+0x2e>
  80042105ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042105b2:	eb 6b                	jmp    800421061f <strstr+0x99>
  80042105b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042105b8:	48 89 c7             	mov    %rax,%rdi
  80042105bb:	48 b8 5b fe 20 04 80 	movabs $0x800420fe5b,%rax
  80042105c2:	00 00 00 
  80042105c5:	ff d0                	callq  *%rax
  80042105c7:	48 98                	cltq   
  80042105c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042105cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042105d1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042105d5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042105d9:	0f b6 00             	movzbl (%rax),%eax
  80042105dc:	88 45 ef             	mov    %al,-0x11(%rbp)
  80042105df:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  80042105e3:	75 07                	jne    80042105ec <strstr+0x66>
  80042105e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042105ea:	eb 33                	jmp    800421061f <strstr+0x99>
  80042105ec:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80042105f0:	3a 45 ff             	cmp    -0x1(%rbp),%al
  80042105f3:	75 d8                	jne    80042105cd <strstr+0x47>
  80042105f5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042105f9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042105fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210601:	48 89 ce             	mov    %rcx,%rsi
  8004210604:	48 89 c7             	mov    %rax,%rdi
  8004210607:	48 b8 7c 00 21 04 80 	movabs $0x800421007c,%rax
  800421060e:	00 00 00 
  8004210611:	ff d0                	callq  *%rax
  8004210613:	85 c0                	test   %eax,%eax
  8004210615:	75 b6                	jne    80042105cd <strstr+0x47>
  8004210617:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421061b:	48 83 e8 01          	sub    $0x1,%rax
  800421061f:	c9                   	leaveq 
  8004210620:	c3                   	retq   

0000008004210621 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210621:	55                   	push   %rbp
  8004210622:	48 89 e5             	mov    %rsp,%rbp
  8004210625:	48 83 ec 28          	sub    $0x28,%rsp
  8004210629:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421062d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210631:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210634:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210638:	48 8b 10             	mov    (%rax),%rdx
  800421063b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421063f:	48 01 d0             	add    %rdx,%rax
  8004210642:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210646:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421064d:	00 
	switch (bytes_to_read) {
  800421064e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210651:	83 f8 02             	cmp    $0x2,%eax
  8004210654:	0f 84 ab 00 00 00    	je     8004210705 <_dwarf_read_lsb+0xe4>
  800421065a:	83 f8 02             	cmp    $0x2,%eax
  800421065d:	7f 0e                	jg     800421066d <_dwarf_read_lsb+0x4c>
  800421065f:	83 f8 01             	cmp    $0x1,%eax
  8004210662:	0f 84 b3 00 00 00    	je     800421071b <_dwarf_read_lsb+0xfa>
  8004210668:	e9 d9 00 00 00       	jmpq   8004210746 <_dwarf_read_lsb+0x125>
  800421066d:	83 f8 04             	cmp    $0x4,%eax
  8004210670:	74 65                	je     80042106d7 <_dwarf_read_lsb+0xb6>
  8004210672:	83 f8 08             	cmp    $0x8,%eax
  8004210675:	0f 85 cb 00 00 00    	jne    8004210746 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421067b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421067f:	48 83 c0 04          	add    $0x4,%rax
  8004210683:	0f b6 00             	movzbl (%rax),%eax
  8004210686:	0f b6 c0             	movzbl %al,%eax
  8004210689:	48 c1 e0 20          	shl    $0x20,%rax
  800421068d:	48 89 c2             	mov    %rax,%rdx
  8004210690:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210694:	48 83 c0 05          	add    $0x5,%rax
  8004210698:	0f b6 00             	movzbl (%rax),%eax
  800421069b:	0f b6 c0             	movzbl %al,%eax
  800421069e:	48 c1 e0 28          	shl    $0x28,%rax
  80042106a2:	48 09 d0             	or     %rdx,%rax
  80042106a5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042106a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106ad:	48 83 c0 06          	add    $0x6,%rax
  80042106b1:	0f b6 00             	movzbl (%rax),%eax
  80042106b4:	0f b6 c0             	movzbl %al,%eax
  80042106b7:	48 c1 e0 30          	shl    $0x30,%rax
  80042106bb:	48 89 c2             	mov    %rax,%rdx
  80042106be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106c2:	48 83 c0 07          	add    $0x7,%rax
  80042106c6:	0f b6 00             	movzbl (%rax),%eax
  80042106c9:	0f b6 c0             	movzbl %al,%eax
  80042106cc:	48 c1 e0 38          	shl    $0x38,%rax
  80042106d0:	48 09 d0             	or     %rdx,%rax
  80042106d3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042106d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106db:	48 83 c0 02          	add    $0x2,%rax
  80042106df:	0f b6 00             	movzbl (%rax),%eax
  80042106e2:	0f b6 c0             	movzbl %al,%eax
  80042106e5:	48 c1 e0 10          	shl    $0x10,%rax
  80042106e9:	48 89 c2             	mov    %rax,%rdx
  80042106ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042106f0:	48 83 c0 03          	add    $0x3,%rax
  80042106f4:	0f b6 00             	movzbl (%rax),%eax
  80042106f7:	0f b6 c0             	movzbl %al,%eax
  80042106fa:	48 c1 e0 18          	shl    $0x18,%rax
  80042106fe:	48 09 d0             	or     %rdx,%rax
  8004210701:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210705:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210709:	48 83 c0 01          	add    $0x1,%rax
  800421070d:	0f b6 00             	movzbl (%rax),%eax
  8004210710:	0f b6 c0             	movzbl %al,%eax
  8004210713:	48 c1 e0 08          	shl    $0x8,%rax
  8004210717:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421071b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421071f:	0f b6 00             	movzbl (%rax),%eax
  8004210722:	0f b6 c0             	movzbl %al,%eax
  8004210725:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210729:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  800421072a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421072e:	48 8b 10             	mov    (%rax),%rdx
  8004210731:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210734:	48 98                	cltq   
  8004210736:	48 01 c2             	add    %rax,%rdx
  8004210739:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421073d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210744:	eb 05                	jmp    800421074b <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210746:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  800421074b:	c9                   	leaveq 
  800421074c:	c3                   	retq   

000000800421074d <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  800421074d:	55                   	push   %rbp
  800421074e:	48 89 e5             	mov    %rsp,%rbp
  8004210751:	48 83 ec 20          	sub    $0x20,%rsp
  8004210755:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210759:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  800421075c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210760:	48 8b 00             	mov    (%rax),%rax
  8004210763:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210767:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421076e:	00 
	switch (bytes_to_read) {
  800421076f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210772:	83 f8 02             	cmp    $0x2,%eax
  8004210775:	0f 84 ab 00 00 00    	je     8004210826 <_dwarf_decode_lsb+0xd9>
  800421077b:	83 f8 02             	cmp    $0x2,%eax
  800421077e:	7f 0e                	jg     800421078e <_dwarf_decode_lsb+0x41>
  8004210780:	83 f8 01             	cmp    $0x1,%eax
  8004210783:	0f 84 b3 00 00 00    	je     800421083c <_dwarf_decode_lsb+0xef>
  8004210789:	e9 d9 00 00 00       	jmpq   8004210867 <_dwarf_decode_lsb+0x11a>
  800421078e:	83 f8 04             	cmp    $0x4,%eax
  8004210791:	74 65                	je     80042107f8 <_dwarf_decode_lsb+0xab>
  8004210793:	83 f8 08             	cmp    $0x8,%eax
  8004210796:	0f 85 cb 00 00 00    	jne    8004210867 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  800421079c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107a0:	48 83 c0 04          	add    $0x4,%rax
  80042107a4:	0f b6 00             	movzbl (%rax),%eax
  80042107a7:	0f b6 c0             	movzbl %al,%eax
  80042107aa:	48 c1 e0 20          	shl    $0x20,%rax
  80042107ae:	48 89 c2             	mov    %rax,%rdx
  80042107b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107b5:	48 83 c0 05          	add    $0x5,%rax
  80042107b9:	0f b6 00             	movzbl (%rax),%eax
  80042107bc:	0f b6 c0             	movzbl %al,%eax
  80042107bf:	48 c1 e0 28          	shl    $0x28,%rax
  80042107c3:	48 09 d0             	or     %rdx,%rax
  80042107c6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042107ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107ce:	48 83 c0 06          	add    $0x6,%rax
  80042107d2:	0f b6 00             	movzbl (%rax),%eax
  80042107d5:	0f b6 c0             	movzbl %al,%eax
  80042107d8:	48 c1 e0 30          	shl    $0x30,%rax
  80042107dc:	48 89 c2             	mov    %rax,%rdx
  80042107df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107e3:	48 83 c0 07          	add    $0x7,%rax
  80042107e7:	0f b6 00             	movzbl (%rax),%eax
  80042107ea:	0f b6 c0             	movzbl %al,%eax
  80042107ed:	48 c1 e0 38          	shl    $0x38,%rax
  80042107f1:	48 09 d0             	or     %rdx,%rax
  80042107f4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042107f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042107fc:	48 83 c0 02          	add    $0x2,%rax
  8004210800:	0f b6 00             	movzbl (%rax),%eax
  8004210803:	0f b6 c0             	movzbl %al,%eax
  8004210806:	48 c1 e0 10          	shl    $0x10,%rax
  800421080a:	48 89 c2             	mov    %rax,%rdx
  800421080d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210811:	48 83 c0 03          	add    $0x3,%rax
  8004210815:	0f b6 00             	movzbl (%rax),%eax
  8004210818:	0f b6 c0             	movzbl %al,%eax
  800421081b:	48 c1 e0 18          	shl    $0x18,%rax
  800421081f:	48 09 d0             	or     %rdx,%rax
  8004210822:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210826:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421082a:	48 83 c0 01          	add    $0x1,%rax
  800421082e:	0f b6 00             	movzbl (%rax),%eax
  8004210831:	0f b6 c0             	movzbl %al,%eax
  8004210834:	48 c1 e0 08          	shl    $0x8,%rax
  8004210838:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421083c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210840:	0f b6 00             	movzbl (%rax),%eax
  8004210843:	0f b6 c0             	movzbl %al,%eax
  8004210846:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421084a:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421084b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421084f:	48 8b 10             	mov    (%rax),%rdx
  8004210852:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210855:	48 98                	cltq   
  8004210857:	48 01 c2             	add    %rax,%rdx
  800421085a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421085e:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210865:	eb 05                	jmp    800421086c <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210867:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421086c:	c9                   	leaveq 
  800421086d:	c3                   	retq   

000000800421086e <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421086e:	55                   	push   %rbp
  800421086f:	48 89 e5             	mov    %rsp,%rbp
  8004210872:	48 83 ec 28          	sub    $0x28,%rsp
  8004210876:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421087a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421087e:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210881:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210885:	48 8b 10             	mov    (%rax),%rdx
  8004210888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421088c:	48 01 d0             	add    %rdx,%rax
  800421088f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004210893:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210896:	83 f8 02             	cmp    $0x2,%eax
  8004210899:	74 35                	je     80042108d0 <_dwarf_read_msb+0x62>
  800421089b:	83 f8 02             	cmp    $0x2,%eax
  800421089e:	7f 0a                	jg     80042108aa <_dwarf_read_msb+0x3c>
  80042108a0:	83 f8 01             	cmp    $0x1,%eax
  80042108a3:	74 18                	je     80042108bd <_dwarf_read_msb+0x4f>
  80042108a5:	e9 53 01 00 00       	jmpq   80042109fd <_dwarf_read_msb+0x18f>
  80042108aa:	83 f8 04             	cmp    $0x4,%eax
  80042108ad:	74 49                	je     80042108f8 <_dwarf_read_msb+0x8a>
  80042108af:	83 f8 08             	cmp    $0x8,%eax
  80042108b2:	0f 84 96 00 00 00    	je     800421094e <_dwarf_read_msb+0xe0>
  80042108b8:	e9 40 01 00 00       	jmpq   80042109fd <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  80042108bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108c1:	0f b6 00             	movzbl (%rax),%eax
  80042108c4:	0f b6 c0             	movzbl %al,%eax
  80042108c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042108cb:	e9 34 01 00 00       	jmpq   8004210a04 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042108d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108d4:	48 83 c0 01          	add    $0x1,%rax
  80042108d8:	0f b6 00             	movzbl (%rax),%eax
  80042108db:	0f b6 d0             	movzbl %al,%edx
  80042108de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108e2:	0f b6 00             	movzbl (%rax),%eax
  80042108e5:	0f b6 c0             	movzbl %al,%eax
  80042108e8:	48 c1 e0 08          	shl    $0x8,%rax
  80042108ec:	48 09 d0             	or     %rdx,%rax
  80042108ef:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042108f3:	e9 0c 01 00 00       	jmpq   8004210a04 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042108f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108fc:	48 83 c0 03          	add    $0x3,%rax
  8004210900:	0f b6 00             	movzbl (%rax),%eax
  8004210903:	0f b6 c0             	movzbl %al,%eax
  8004210906:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421090a:	48 83 c2 02          	add    $0x2,%rdx
  800421090e:	0f b6 12             	movzbl (%rdx),%edx
  8004210911:	0f b6 d2             	movzbl %dl,%edx
  8004210914:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210918:	48 09 d0             	or     %rdx,%rax
  800421091b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  800421091f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210923:	48 83 c0 01          	add    $0x1,%rax
  8004210927:	0f b6 00             	movzbl (%rax),%eax
  800421092a:	0f b6 c0             	movzbl %al,%eax
  800421092d:	48 c1 e0 10          	shl    $0x10,%rax
  8004210931:	48 89 c2             	mov    %rax,%rdx
  8004210934:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210938:	0f b6 00             	movzbl (%rax),%eax
  800421093b:	0f b6 c0             	movzbl %al,%eax
  800421093e:	48 c1 e0 18          	shl    $0x18,%rax
  8004210942:	48 09 d0             	or     %rdx,%rax
  8004210945:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210949:	e9 b6 00 00 00       	jmpq   8004210a04 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  800421094e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210952:	48 83 c0 07          	add    $0x7,%rax
  8004210956:	0f b6 00             	movzbl (%rax),%eax
  8004210959:	0f b6 c0             	movzbl %al,%eax
  800421095c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210960:	48 83 c2 06          	add    $0x6,%rdx
  8004210964:	0f b6 12             	movzbl (%rdx),%edx
  8004210967:	0f b6 d2             	movzbl %dl,%edx
  800421096a:	48 c1 e2 08          	shl    $0x8,%rdx
  800421096e:	48 09 d0             	or     %rdx,%rax
  8004210971:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210975:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210979:	48 83 c0 05          	add    $0x5,%rax
  800421097d:	0f b6 00             	movzbl (%rax),%eax
  8004210980:	0f b6 c0             	movzbl %al,%eax
  8004210983:	48 c1 e0 10          	shl    $0x10,%rax
  8004210987:	48 89 c2             	mov    %rax,%rdx
  800421098a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421098e:	48 83 c0 04          	add    $0x4,%rax
  8004210992:	0f b6 00             	movzbl (%rax),%eax
  8004210995:	0f b6 c0             	movzbl %al,%eax
  8004210998:	48 c1 e0 18          	shl    $0x18,%rax
  800421099c:	48 09 d0             	or     %rdx,%rax
  800421099f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042109a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109a7:	48 83 c0 03          	add    $0x3,%rax
  80042109ab:	0f b6 00             	movzbl (%rax),%eax
  80042109ae:	0f b6 c0             	movzbl %al,%eax
  80042109b1:	48 c1 e0 20          	shl    $0x20,%rax
  80042109b5:	48 89 c2             	mov    %rax,%rdx
  80042109b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109bc:	48 83 c0 02          	add    $0x2,%rax
  80042109c0:	0f b6 00             	movzbl (%rax),%eax
  80042109c3:	0f b6 c0             	movzbl %al,%eax
  80042109c6:	48 c1 e0 28          	shl    $0x28,%rax
  80042109ca:	48 09 d0             	or     %rdx,%rax
  80042109cd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042109d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109d5:	48 83 c0 01          	add    $0x1,%rax
  80042109d9:	0f b6 00             	movzbl (%rax),%eax
  80042109dc:	0f b6 c0             	movzbl %al,%eax
  80042109df:	48 c1 e0 30          	shl    $0x30,%rax
  80042109e3:	48 89 c2             	mov    %rax,%rdx
  80042109e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109ea:	0f b6 00             	movzbl (%rax),%eax
  80042109ed:	0f b6 c0             	movzbl %al,%eax
  80042109f0:	48 c1 e0 38          	shl    $0x38,%rax
  80042109f4:	48 09 d0             	or     %rdx,%rax
  80042109f7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042109fb:	eb 07                	jmp    8004210a04 <_dwarf_read_msb+0x196>
	default:
		return (0);
  80042109fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210a02:	eb 1a                	jmp    8004210a1e <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  8004210a04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210a08:	48 8b 10             	mov    (%rax),%rdx
  8004210a0b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210a0e:	48 98                	cltq   
  8004210a10:	48 01 c2             	add    %rax,%rdx
  8004210a13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210a17:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210a1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210a1e:	c9                   	leaveq 
  8004210a1f:	c3                   	retq   

0000008004210a20 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  8004210a20:	55                   	push   %rbp
  8004210a21:	48 89 e5             	mov    %rsp,%rbp
  8004210a24:	48 83 ec 20          	sub    $0x20,%rsp
  8004210a28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210a2c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004210a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a33:	48 8b 00             	mov    (%rax),%rax
  8004210a36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210a3a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210a41:	00 
	switch (bytes_to_read) {
  8004210a42:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210a45:	83 f8 02             	cmp    $0x2,%eax
  8004210a48:	74 35                	je     8004210a7f <_dwarf_decode_msb+0x5f>
  8004210a4a:	83 f8 02             	cmp    $0x2,%eax
  8004210a4d:	7f 0a                	jg     8004210a59 <_dwarf_decode_msb+0x39>
  8004210a4f:	83 f8 01             	cmp    $0x1,%eax
  8004210a52:	74 18                	je     8004210a6c <_dwarf_decode_msb+0x4c>
  8004210a54:	e9 53 01 00 00       	jmpq   8004210bac <_dwarf_decode_msb+0x18c>
  8004210a59:	83 f8 04             	cmp    $0x4,%eax
  8004210a5c:	74 49                	je     8004210aa7 <_dwarf_decode_msb+0x87>
  8004210a5e:	83 f8 08             	cmp    $0x8,%eax
  8004210a61:	0f 84 96 00 00 00    	je     8004210afd <_dwarf_decode_msb+0xdd>
  8004210a67:	e9 40 01 00 00       	jmpq   8004210bac <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  8004210a6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a70:	0f b6 00             	movzbl (%rax),%eax
  8004210a73:	0f b6 c0             	movzbl %al,%eax
  8004210a76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210a7a:	e9 34 01 00 00       	jmpq   8004210bb3 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004210a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a83:	48 83 c0 01          	add    $0x1,%rax
  8004210a87:	0f b6 00             	movzbl (%rax),%eax
  8004210a8a:	0f b6 d0             	movzbl %al,%edx
  8004210a8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a91:	0f b6 00             	movzbl (%rax),%eax
  8004210a94:	0f b6 c0             	movzbl %al,%eax
  8004210a97:	48 c1 e0 08          	shl    $0x8,%rax
  8004210a9b:	48 09 d0             	or     %rdx,%rax
  8004210a9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004210aa2:	e9 0c 01 00 00       	jmpq   8004210bb3 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004210aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210aab:	48 83 c0 03          	add    $0x3,%rax
  8004210aaf:	0f b6 00             	movzbl (%rax),%eax
  8004210ab2:	0f b6 c0             	movzbl %al,%eax
  8004210ab5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210ab9:	48 83 c2 02          	add    $0x2,%rdx
  8004210abd:	0f b6 12             	movzbl (%rdx),%edx
  8004210ac0:	0f b6 d2             	movzbl %dl,%edx
  8004210ac3:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210ac7:	48 09 d0             	or     %rdx,%rax
  8004210aca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004210ace:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ad2:	48 83 c0 01          	add    $0x1,%rax
  8004210ad6:	0f b6 00             	movzbl (%rax),%eax
  8004210ad9:	0f b6 c0             	movzbl %al,%eax
  8004210adc:	48 c1 e0 10          	shl    $0x10,%rax
  8004210ae0:	48 89 c2             	mov    %rax,%rdx
  8004210ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ae7:	0f b6 00             	movzbl (%rax),%eax
  8004210aea:	0f b6 c0             	movzbl %al,%eax
  8004210aed:	48 c1 e0 18          	shl    $0x18,%rax
  8004210af1:	48 09 d0             	or     %rdx,%rax
  8004210af4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210af8:	e9 b6 00 00 00       	jmpq   8004210bb3 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004210afd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b01:	48 83 c0 07          	add    $0x7,%rax
  8004210b05:	0f b6 00             	movzbl (%rax),%eax
  8004210b08:	0f b6 c0             	movzbl %al,%eax
  8004210b0b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210b0f:	48 83 c2 06          	add    $0x6,%rdx
  8004210b13:	0f b6 12             	movzbl (%rdx),%edx
  8004210b16:	0f b6 d2             	movzbl %dl,%edx
  8004210b19:	48 c1 e2 08          	shl    $0x8,%rdx
  8004210b1d:	48 09 d0             	or     %rdx,%rax
  8004210b20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004210b24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b28:	48 83 c0 05          	add    $0x5,%rax
  8004210b2c:	0f b6 00             	movzbl (%rax),%eax
  8004210b2f:	0f b6 c0             	movzbl %al,%eax
  8004210b32:	48 c1 e0 10          	shl    $0x10,%rax
  8004210b36:	48 89 c2             	mov    %rax,%rdx
  8004210b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b3d:	48 83 c0 04          	add    $0x4,%rax
  8004210b41:	0f b6 00             	movzbl (%rax),%eax
  8004210b44:	0f b6 c0             	movzbl %al,%eax
  8004210b47:	48 c1 e0 18          	shl    $0x18,%rax
  8004210b4b:	48 09 d0             	or     %rdx,%rax
  8004210b4e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004210b52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b56:	48 83 c0 03          	add    $0x3,%rax
  8004210b5a:	0f b6 00             	movzbl (%rax),%eax
  8004210b5d:	0f b6 c0             	movzbl %al,%eax
  8004210b60:	48 c1 e0 20          	shl    $0x20,%rax
  8004210b64:	48 89 c2             	mov    %rax,%rdx
  8004210b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b6b:	48 83 c0 02          	add    $0x2,%rax
  8004210b6f:	0f b6 00             	movzbl (%rax),%eax
  8004210b72:	0f b6 c0             	movzbl %al,%eax
  8004210b75:	48 c1 e0 28          	shl    $0x28,%rax
  8004210b79:	48 09 d0             	or     %rdx,%rax
  8004210b7c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004210b80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b84:	48 83 c0 01          	add    $0x1,%rax
  8004210b88:	0f b6 00             	movzbl (%rax),%eax
  8004210b8b:	0f b6 c0             	movzbl %al,%eax
  8004210b8e:	48 c1 e0 30          	shl    $0x30,%rax
  8004210b92:	48 89 c2             	mov    %rax,%rdx
  8004210b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b99:	0f b6 00             	movzbl (%rax),%eax
  8004210b9c:	0f b6 c0             	movzbl %al,%eax
  8004210b9f:	48 c1 e0 38          	shl    $0x38,%rax
  8004210ba3:	48 09 d0             	or     %rdx,%rax
  8004210ba6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210baa:	eb 07                	jmp    8004210bb3 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  8004210bac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210bb1:	eb 1a                	jmp    8004210bcd <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004210bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bb7:	48 8b 10             	mov    (%rax),%rdx
  8004210bba:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210bbd:	48 98                	cltq   
  8004210bbf:	48 01 c2             	add    %rax,%rdx
  8004210bc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bc6:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210bc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210bcd:	c9                   	leaveq 
  8004210bce:	c3                   	retq   

0000008004210bcf <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210bcf:	55                   	push   %rbp
  8004210bd0:	48 89 e5             	mov    %rsp,%rbp
  8004210bd3:	48 83 ec 30          	sub    $0x30,%rsp
  8004210bd7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210bdb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004210bdf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210be6:	00 
	uint8_t b;
	int shift = 0;
  8004210be7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210bf2:	48 8b 10             	mov    (%rax),%rdx
  8004210bf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bf9:	48 01 d0             	add    %rdx,%rax
  8004210bfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210c00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c04:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c08:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210c0c:	0f b6 00             	movzbl (%rax),%eax
  8004210c0f:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210c12:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c16:	83 e0 7f             	and    $0x7f,%eax
  8004210c19:	89 c2                	mov    %eax,%edx
  8004210c1b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c1e:	89 c1                	mov    %eax,%ecx
  8004210c20:	d3 e2                	shl    %cl,%edx
  8004210c22:	89 d0                	mov    %edx,%eax
  8004210c24:	48 98                	cltq   
  8004210c26:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210c2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210c2e:	48 8b 00             	mov    (%rax),%rax
  8004210c31:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210c35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210c39:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210c3c:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210c40:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c44:	84 c0                	test   %al,%al
  8004210c46:	78 b8                	js     8004210c00 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004210c48:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210c4c:	7f 1f                	jg     8004210c6d <_dwarf_read_sleb128+0x9e>
  8004210c4e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210c52:	83 e0 40             	and    $0x40,%eax
  8004210c55:	85 c0                	test   %eax,%eax
  8004210c57:	74 14                	je     8004210c6d <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004210c59:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c5c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210c61:	89 c1                	mov    %eax,%ecx
  8004210c63:	d3 e2                	shl    %cl,%edx
  8004210c65:	89 d0                	mov    %edx,%eax
  8004210c67:	48 98                	cltq   
  8004210c69:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004210c6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210c71:	c9                   	leaveq 
  8004210c72:	c3                   	retq   

0000008004210c73 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004210c73:	55                   	push   %rbp
  8004210c74:	48 89 e5             	mov    %rsp,%rbp
  8004210c77:	48 83 ec 30          	sub    $0x30,%rsp
  8004210c7b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210c7f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004210c83:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210c8a:	00 
	uint8_t b;
	int shift = 0;
  8004210c8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004210c92:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210c96:	48 8b 10             	mov    (%rax),%rdx
  8004210c99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c9d:	48 01 d0             	add    %rdx,%rax
  8004210ca0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210ca4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ca8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210cac:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210cb0:	0f b6 00             	movzbl (%rax),%eax
  8004210cb3:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210cb6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210cba:	83 e0 7f             	and    $0x7f,%eax
  8004210cbd:	89 c2                	mov    %eax,%edx
  8004210cbf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210cc2:	89 c1                	mov    %eax,%ecx
  8004210cc4:	d3 e2                	shl    %cl,%edx
  8004210cc6:	89 d0                	mov    %edx,%eax
  8004210cc8:	48 98                	cltq   
  8004210cca:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004210cce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210cd2:	48 8b 00             	mov    (%rax),%rax
  8004210cd5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210cd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210cdd:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004210ce0:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210ce4:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ce8:	84 c0                	test   %al,%al
  8004210cea:	78 b8                	js     8004210ca4 <_dwarf_read_uleb128+0x31>

	return (ret);
  8004210cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210cf0:	c9                   	leaveq 
  8004210cf1:	c3                   	retq   

0000008004210cf2 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  8004210cf2:	55                   	push   %rbp
  8004210cf3:	48 89 e5             	mov    %rsp,%rbp
  8004210cf6:	48 83 ec 28          	sub    $0x28,%rsp
  8004210cfa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004210cfe:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210d05:	00 
	uint8_t b;
	int shift = 0;
  8004210d06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210d0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d11:	48 8b 00             	mov    (%rax),%rax
  8004210d14:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210d18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d1c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210d20:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210d24:	0f b6 00             	movzbl (%rax),%eax
  8004210d27:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210d2a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210d2e:	83 e0 7f             	and    $0x7f,%eax
  8004210d31:	89 c2                	mov    %eax,%edx
  8004210d33:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210d36:	89 c1                	mov    %eax,%ecx
  8004210d38:	d3 e2                	shl    %cl,%edx
  8004210d3a:	89 d0                	mov    %edx,%eax
  8004210d3c:	48 98                	cltq   
  8004210d3e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210d42:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210d46:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210d4a:	84 c0                	test   %al,%al
  8004210d4c:	78 ca                	js     8004210d18 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004210d4e:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004210d52:	7f 1f                	jg     8004210d73 <_dwarf_decode_sleb128+0x81>
  8004210d54:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210d58:	83 e0 40             	and    $0x40,%eax
  8004210d5b:	85 c0                	test   %eax,%eax
  8004210d5d:	74 14                	je     8004210d73 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004210d5f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210d62:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004210d67:	89 c1                	mov    %eax,%ecx
  8004210d69:	d3 e2                	shl    %cl,%edx
  8004210d6b:	89 d0                	mov    %edx,%eax
  8004210d6d:	48 98                	cltq   
  8004210d6f:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004210d73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d77:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210d7b:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210d82:	c9                   	leaveq 
  8004210d83:	c3                   	retq   

0000008004210d84 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004210d84:	55                   	push   %rbp
  8004210d85:	48 89 e5             	mov    %rsp,%rbp
  8004210d88:	48 83 ec 28          	sub    $0x28,%rsp
  8004210d8c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004210d90:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210d97:	00 
	uint8_t b;
	int shift = 0;
  8004210d98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004210d9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210da3:	48 8b 00             	mov    (%rax),%rax
  8004210da6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004210daa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210dae:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210db2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210db6:	0f b6 00             	movzbl (%rax),%eax
  8004210db9:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004210dbc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210dc0:	83 e0 7f             	and    $0x7f,%eax
  8004210dc3:	89 c2                	mov    %eax,%edx
  8004210dc5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210dc8:	89 c1                	mov    %eax,%ecx
  8004210dca:	d3 e2                	shl    %cl,%edx
  8004210dcc:	89 d0                	mov    %edx,%eax
  8004210dce:	48 98                	cltq   
  8004210dd0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004210dd4:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004210dd8:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004210ddc:	84 c0                	test   %al,%al
  8004210dde:	78 ca                	js     8004210daa <_dwarf_decode_uleb128+0x26>

	*dp = src;
  8004210de0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210de4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210de8:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210deb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004210def:	c9                   	leaveq 
  8004210df0:	c3                   	retq   

0000008004210df1 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  8004210df1:	55                   	push   %rbp
  8004210df2:	48 89 e5             	mov    %rsp,%rbp
  8004210df5:	48 83 ec 28          	sub    $0x28,%rsp
  8004210df9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210dfd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210e01:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  8004210e05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e09:	48 8b 10             	mov    (%rax),%rdx
  8004210e0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e10:	48 01 d0             	add    %rdx,%rax
  8004210e13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210e17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004210e1f:	eb 17                	jmp    8004210e38 <_dwarf_read_string+0x47>
		src++;
  8004210e21:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004210e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e2a:	48 8b 00             	mov    (%rax),%rax
  8004210e2d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e31:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e35:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004210e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e3c:	0f b6 00             	movzbl (%rax),%eax
  8004210e3f:	84 c0                	test   %al,%al
  8004210e41:	74 0d                	je     8004210e50 <_dwarf_read_string+0x5f>
  8004210e43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e47:	48 8b 00             	mov    (%rax),%rax
  8004210e4a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210e4e:	72 d1                	jb     8004210e21 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004210e50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210e54:	0f b6 00             	movzbl (%rax),%eax
  8004210e57:	84 c0                	test   %al,%al
  8004210e59:	75 1f                	jne    8004210e7a <_dwarf_read_string+0x89>
  8004210e5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e5f:	48 8b 00             	mov    (%rax),%rax
  8004210e62:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004210e66:	73 12                	jae    8004210e7a <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004210e68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e6c:	48 8b 00             	mov    (%rax),%rax
  8004210e6f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210e73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e77:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210e7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210e7e:	c9                   	leaveq 
  8004210e7f:	c3                   	retq   

0000008004210e80 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004210e80:	55                   	push   %rbp
  8004210e81:	48 89 e5             	mov    %rsp,%rbp
  8004210e84:	48 83 ec 28          	sub    $0x28,%rsp
  8004210e88:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e8c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210e90:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004210e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e98:	48 8b 10             	mov    (%rax),%rdx
  8004210e9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e9f:	48 01 d0             	add    %rdx,%rax
  8004210ea2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210eaa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004210eae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210eb2:	48 8b 10             	mov    (%rax),%rdx
  8004210eb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210eb9:	48 01 c2             	add    %rax,%rdx
  8004210ebc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210ec0:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210ec3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004210ec7:	c9                   	leaveq 
  8004210ec8:	c3                   	retq   

0000008004210ec9 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004210ec9:	55                   	push   %rbp
  8004210eca:	48 89 e5             	mov    %rsp,%rbp
  8004210ecd:	48 83 ec 20          	sub    $0x20,%rsp
  8004210ed1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  8004210ed5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ed9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210edd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210ee2:	75 35                	jne    8004210f19 <_dwarf_elf_get_byte_order+0x50>
  8004210ee4:	48 b9 e0 ad 21 04 80 	movabs $0x800421ade0,%rcx
  8004210eeb:	00 00 00 
  8004210eee:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004210ef5:	00 00 00 
  8004210ef8:	be 29 01 00 00       	mov    $0x129,%esi
  8004210efd:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004210f04:	00 00 00 
  8004210f07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210f0c:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004210f13:	00 00 00 
  8004210f16:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004210f19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f1d:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  8004210f21:	0f b6 c0             	movzbl %al,%eax
  8004210f24:	83 f8 02             	cmp    $0x2,%eax
  8004210f27:	75 07                	jne    8004210f30 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004210f29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210f2e:	eb 05                	jmp    8004210f35 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004210f30:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004210f35:	c9                   	leaveq 
  8004210f36:	c3                   	retq   

0000008004210f37 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004210f37:	55                   	push   %rbp
  8004210f38:	48 89 e5             	mov    %rsp,%rbp
  8004210f3b:	48 83 ec 20          	sub    $0x20,%rsp
  8004210f3f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004210f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004210f4b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004210f50:	75 35                	jne    8004210f87 <_dwarf_elf_get_pointer_size+0x50>
  8004210f52:	48 b9 e0 ad 21 04 80 	movabs $0x800421ade0,%rcx
  8004210f59:	00 00 00 
  8004210f5c:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004210f63:	00 00 00 
  8004210f66:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004210f6b:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004210f72:	00 00 00 
  8004210f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210f7a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004210f81:	00 00 00 
  8004210f84:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004210f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f8b:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004210f8f:	3c 01                	cmp    $0x1,%al
  8004210f91:	75 07                	jne    8004210f9a <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004210f93:	b8 04 00 00 00       	mov    $0x4,%eax
  8004210f98:	eb 05                	jmp    8004210f9f <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  8004210f9a:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004210f9f:	c9                   	leaveq 
  8004210fa0:	c3                   	retq   

0000008004210fa1 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004210fa1:	55                   	push   %rbp
  8004210fa2:	48 89 e5             	mov    %rsp,%rbp
  8004210fa5:	48 83 ec 10          	sub    $0x10,%rsp
  8004210fa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210fad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004210fb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fb5:	ba 60 00 00 00       	mov    $0x60,%edx
  8004210fba:	be 00 00 00 00       	mov    $0x0,%esi
  8004210fbf:	48 89 c7             	mov    %rax,%rdi
  8004210fc2:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004210fc9:	00 00 00 
  8004210fcc:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004210fce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fd2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004210fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fdd:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004210fe4:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004210fe5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fe9:	48 89 c7             	mov    %rax,%rdi
  8004210fec:	48 b8 37 0f 21 04 80 	movabs $0x8004210f37,%rax
  8004210ff3:	00 00 00 
  8004210ff6:	ff d0                	callq  *%rax
  8004210ff8:	0f b6 d0             	movzbl %al,%edx
  8004210ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210fff:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211006:	48 89 c7             	mov    %rax,%rdi
  8004211009:	48 b8 c9 0e 21 04 80 	movabs $0x8004210ec9,%rax
  8004211010:	00 00 00 
  8004211013:	ff d0                	callq  *%rax
  8004211015:	85 c0                	test   %eax,%eax
  8004211017:	75 26                	jne    800421103f <_dwarf_init+0x9e>
		dbg->read = _dwarf_read_msb;
  8004211019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421101d:	48 b9 6e 08 21 04 80 	movabs $0x800421086e,%rcx
  8004211024:	00 00 00 
  8004211027:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  800421102b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421102f:	48 b9 20 0a 21 04 80 	movabs $0x8004210a20,%rcx
  8004211036:	00 00 00 
  8004211039:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800421103d:	eb 24                	jmp    8004211063 <_dwarf_init+0xc2>
	} else {
		dbg->read = _dwarf_read_lsb;
  800421103f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211043:	48 be 21 06 21 04 80 	movabs $0x8004210621,%rsi
  800421104a:	00 00 00 
  800421104d:	48 89 70 18          	mov    %rsi,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211051:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211055:	48 ba 4d 07 21 04 80 	movabs $0x800421074d,%rdx
  800421105c:	00 00 00 
  800421105f:	48 89 50 20          	mov    %rdx,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211063:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211067:	48 89 c7             	mov    %rax,%rdi
  800421106a:	48 b8 ab 24 21 04 80 	movabs $0x80042124ab,%rax
  8004211071:	00 00 00 
  8004211074:	ff d0                	callq  *%rax
	return 0;
  8004211076:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421107b:	c9                   	leaveq 
  800421107c:	c3                   	retq   

000000800421107d <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  800421107d:	55                   	push   %rbp
  800421107e:	48 89 e5             	mov    %rsp,%rbp
  8004211081:	48 83 ec 20          	sub    $0x20,%rsp
  8004211085:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211089:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  800421108d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211091:	48 8b 10             	mov    (%rax),%rdx
  8004211094:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211098:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421109c:	48 39 c2             	cmp    %rax,%rdx
  800421109f:	76 0a                	jbe    80042110ab <_get_next_cu+0x2e>
		return -1;
  80042110a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042110a6:	e9 71 01 00 00       	jmpq   800421121c <_get_next_cu+0x19f>

	offset = dbg->curr_off_dbginfo;
  80042110ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110af:	48 8b 00             	mov    (%rax),%rax
  80042110b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  80042110b6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042110ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042110be:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  80042110c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110c6:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042110ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042110ce:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042110d2:	48 89 d7             	mov    %rdx,%rdi
  80042110d5:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  80042110d9:	ba 04 00 00 00       	mov    $0x4,%edx
  80042110de:	48 89 ce             	mov    %rcx,%rsi
  80042110e1:	ff d0                	callq  *%rax
  80042110e3:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  80042110e6:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042110ea:	75 2a                	jne    8004211116 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  80042110ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042110f0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042110f4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042110f8:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042110fc:	48 89 d7             	mov    %rdx,%rdi
  80042110ff:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  8004211103:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211108:	48 89 ce             	mov    %rcx,%rsi
  800421110b:	ff d0                	callq  *%rax
  800421110d:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211110:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211114:	eb 04                	jmp    800421111a <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211116:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  800421111a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421111e:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211122:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211125:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211128:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421112c:	48 01 c2             	add    %rax,%rdx
  800421112f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211133:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421113a:	48 8b 10             	mov    (%rax),%rdx
  800421113d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211141:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211145:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211148:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421114c:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  800421114f:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211153:	75 07                	jne    800421115c <_get_next_cu+0xdf>
  8004211155:	ba 04 00 00 00       	mov    $0x4,%edx
  800421115a:	eb 05                	jmp    8004211161 <_get_next_cu+0xe4>
  800421115c:	ba 0c 00 00 00       	mov    $0xc,%edx
  8004211161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211165:	88 50 18             	mov    %dl,0x18(%rax)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421116c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211170:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211174:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211178:	48 89 d7             	mov    %rdx,%rdi
  800421117b:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421117f:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211184:	48 89 ce             	mov    %rcx,%rsi
  8004211187:	ff d0                	callq  *%rax
  8004211189:	89 c2                	mov    %eax,%edx
  800421118b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421118f:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211197:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421119b:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  800421119f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042111a3:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  80042111a7:	48 89 cf             	mov    %rcx,%rdi
  80042111aa:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  80042111ae:	48 89 ce             	mov    %rcx,%rsi
  80042111b1:	ff d0                	callq  *%rax
  80042111b3:	48 89 c2             	mov    %rax,%rdx
  80042111b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111ba:	48 89 50 10          	mov    %rdx,0x10(%rax)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  80042111be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042111c2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042111c6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042111ca:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042111ce:	48 89 d7             	mov    %rdx,%rdi
  80042111d1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  80042111d5:	ba 01 00 00 00       	mov    $0x1,%edx
  80042111da:	48 89 ce             	mov    %rcx,%rsi
  80042111dd:	ff d0                	callq  *%rax
  80042111df:	89 c2                	mov    %eax,%edx
  80042111e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111e5:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  80042111e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111ec:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042111f0:	66 83 f8 01          	cmp    $0x1,%ax
  80042111f4:	76 0e                	jbe    8004211204 <_get_next_cu+0x187>
  80042111f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111fa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042111fe:	66 83 f8 04          	cmp    $0x4,%ax
  8004211202:	76 07                	jbe    800421120b <_get_next_cu+0x18e>
		return -1;
  8004211204:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211209:	eb 11                	jmp    800421121c <_get_next_cu+0x19f>
	}

	cu->cu_die_offset = offset;
  800421120b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421120f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211213:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211217:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421121c:	c9                   	leaveq 
  800421121d:	c3                   	retq   

000000800421121e <print_cu>:

void print_cu(Dwarf_CU cu)
{
  800421121e:	55                   	push   %rbp
  800421121f:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211222:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211226:	0f b6 c8             	movzbl %al,%ecx
  8004211229:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  800421122d:	0f b7 d0             	movzwl %ax,%edx
  8004211230:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211234:	48 89 c6             	mov    %rax,%rsi
  8004211237:	48 bf 12 ae 21 04 80 	movabs $0x800421ae12,%rdi
  800421123e:	00 00 00 
  8004211241:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211246:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  800421124d:	00 00 00 
  8004211250:	41 ff d0             	callq  *%r8
}
  8004211253:	90                   	nop
  8004211254:	5d                   	pop    %rbp
  8004211255:	c3                   	retq   

0000008004211256 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211256:	55                   	push   %rbp
  8004211257:	48 89 e5             	mov    %rsp,%rbp
  800421125a:	48 83 ec 60          	sub    $0x60,%rsp
  800421125e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211262:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211266:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800421126a:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  800421126e:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211273:	75 35                	jne    80042112aa <_dwarf_abbrev_parse+0x54>
  8004211275:	48 b9 21 ae 21 04 80 	movabs $0x800421ae21,%rcx
  800421127c:	00 00 00 
  800421127f:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211286:	00 00 00 
  8004211289:	be a4 01 00 00       	mov    $0x1a4,%esi
  800421128e:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211295:	00 00 00 
  8004211298:	b8 00 00 00 00       	mov    $0x0,%eax
  800421129d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042112a4:	00 00 00 
  80042112a7:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  80042112aa:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  80042112af:	75 35                	jne    80042112e6 <_dwarf_abbrev_parse+0x90>
  80042112b1:	48 b9 2d ae 21 04 80 	movabs $0x800421ae2d,%rcx
  80042112b8:	00 00 00 
  80042112bb:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  80042112c2:	00 00 00 
  80042112c5:	be a5 01 00 00       	mov    $0x1a5,%esi
  80042112ca:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  80042112d1:	00 00 00 
  80042112d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042112d9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042112e0:	00 00 00 
  80042112e3:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  80042112e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042112ea:	48 8b 10             	mov    (%rax),%rdx
  80042112ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042112f1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042112f5:	48 39 c2             	cmp    %rax,%rdx
  80042112f8:	72 0a                	jb     8004211304 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  80042112fa:	b8 04 00 00 00       	mov    $0x4,%eax
  80042112ff:	e9 d3 01 00 00       	jmpq   80042114d7 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211304:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211308:	48 8b 00             	mov    (%rax),%rax
  800421130b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  800421130f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211313:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211317:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  800421131b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421131f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211323:	48 89 d6             	mov    %rdx,%rsi
  8004211326:	48 89 c7             	mov    %rax,%rdi
  8004211329:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  8004211330:	00 00 00 
  8004211333:	ff d0                	callq  *%rax
  8004211335:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211339:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421133e:	75 15                	jne    8004211355 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211340:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211344:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  800421134b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211350:	e9 82 01 00 00       	jmpq   80042114d7 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211359:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421135d:	48 89 d6             	mov    %rdx,%rsi
  8004211360:	48 89 c7             	mov    %rax,%rdi
  8004211363:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  800421136a:	00 00 00 
  800421136d:	ff d0                	callq  *%rax
  800421136f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211373:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211377:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421137b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  800421137f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211383:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211388:	48 89 cf             	mov    %rcx,%rdi
  800421138b:	ff d0                	callq  *%rax
  800421138d:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211390:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211394:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211398:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  800421139b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421139f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042113a3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  80042113a7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042113ab:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  80042113af:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  80042113b2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042113b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042113ba:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  80042113be:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042113c2:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  80042113c9:	00 
	abp->ab_atnum    = 0;
  80042113ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042113ce:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  80042113d5:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  80042113d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042113da:	48 8b 00             	mov    (%rax),%rax
  80042113dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042113e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113e5:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042113e9:	48 89 d6             	mov    %rdx,%rsi
  80042113ec:	48 89 c7             	mov    %rax,%rdi
  80042113ef:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  80042113f6:	00 00 00 
  80042113f9:	ff d0                	callq  *%rax
  80042113fb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  80042113ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211403:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211407:	48 89 d6             	mov    %rdx,%rsi
  800421140a:	48 89 c7             	mov    %rax,%rdi
  800421140d:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  8004211414:	00 00 00 
  8004211417:	ff d0                	callq  *%rax
  8004211419:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  800421141d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211422:	0f 84 89 00 00 00    	je     80042114b1 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211428:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421142c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211430:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211434:	48 89 d0             	mov    %rdx,%rax
  8004211437:	48 01 c0             	add    %rax,%rax
  800421143a:	48 01 d0             	add    %rdx,%rax
  800421143d:	48 c1 e0 03          	shl    $0x3,%rax
  8004211441:	48 01 c8             	add    %rcx,%rax
  8004211444:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211448:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421144c:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  800421144f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211453:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211457:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  800421145b:	48 89 d0             	mov    %rdx,%rax
  800421145e:	48 01 c0             	add    %rax,%rax
  8004211461:	48 01 d0             	add    %rdx,%rax
  8004211464:	48 c1 e0 03          	shl    $0x3,%rax
  8004211468:	48 01 c8             	add    %rcx,%rax
  800421146b:	48 8d 50 38          	lea    0x38(%rax),%rdx
  800421146f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211473:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211476:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421147a:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421147e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211482:	48 89 d0             	mov    %rdx,%rax
  8004211485:	48 01 c0             	add    %rax,%rax
  8004211488:	48 01 d0             	add    %rdx,%rax
  800421148b:	48 c1 e0 03          	shl    $0x3,%rax
  800421148f:	48 01 c8             	add    %rcx,%rax
  8004211492:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211496:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421149a:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  800421149d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042114a1:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042114a5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042114a9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042114ad:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  80042114b1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042114b6:	0f 85 1a ff ff ff    	jne    80042113d6 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  80042114bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042114c0:	48 8b 00             	mov    (%rax),%rax
  80042114c3:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  80042114c7:	48 89 c2             	mov    %rax,%rdx
  80042114ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042114ce:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  80042114d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042114d7:	c9                   	leaveq 
  80042114d8:	c3                   	retq   

00000080042114d9 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  80042114d9:	55                   	push   %rbp
  80042114da:	48 89 e5             	mov    %rsp,%rbp
  80042114dd:	48 83 ec 40          	sub    $0x40,%rsp
  80042114e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042114e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042114e9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  80042114ed:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042114f2:	75 0a                	jne    80042114fe <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  80042114f4:	b8 04 00 00 00       	mov    $0x4,%eax
  80042114f9:	e9 e3 00 00 00       	jmpq   80042115e1 <_dwarf_abbrev_find+0x108>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  80042114fe:	48 bf 38 ae 21 04 80 	movabs $0x800421ae38,%rdi
  8004211505:	00 00 00 
  8004211508:	48 b8 6c 57 21 04 80 	movabs $0x800421576c,%rax
  800421150f:	00 00 00 
  8004211512:	ff d0                	callq  *%rax
  8004211514:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211518:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421151d:	75 35                	jne    8004211554 <_dwarf_abbrev_find+0x7b>
  800421151f:	48 b9 2d ae 21 04 80 	movabs $0x800421ae2d,%rcx
  8004211526:	00 00 00 
  8004211529:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211530:	00 00 00 
  8004211533:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211538:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  800421153f:	00 00 00 
  8004211542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211547:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421154e:	00 00 00 
  8004211551:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211554:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211558:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  800421155c:	eb 6a                	jmp    80042115c8 <_dwarf_abbrev_find+0xef>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  800421155e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211562:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211566:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  800421156a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421156e:	48 83 ec 08          	sub    $0x8,%rsp
  8004211572:	ff 75 40             	pushq  0x40(%rbp)
  8004211575:	ff 75 38             	pushq  0x38(%rbp)
  8004211578:	ff 75 30             	pushq  0x30(%rbp)
  800421157b:	ff 75 28             	pushq  0x28(%rbp)
  800421157e:	ff 75 20             	pushq  0x20(%rbp)
  8004211581:	ff 75 18             	pushq  0x18(%rbp)
  8004211584:	ff 75 10             	pushq  0x10(%rbp)
  8004211587:	48 89 c7             	mov    %rax,%rdi
  800421158a:	48 b8 56 12 21 04 80 	movabs $0x8004211256,%rax
  8004211591:	00 00 00 
  8004211594:	ff d0                	callq  *%rax
  8004211596:	48 83 c4 40          	add    $0x40,%rsp
  800421159a:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  800421159d:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042115a1:	74 05                	je     80042115a8 <_dwarf_abbrev_find+0xcf>
			return (ret);
  80042115a3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042115a6:	eb 39                	jmp    80042115e1 <_dwarf_abbrev_find+0x108>
		if (abp->ab_entry == entry) {
  80042115a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042115ac:	48 8b 00             	mov    (%rax),%rax
  80042115af:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042115b3:	75 07                	jne    80042115bc <_dwarf_abbrev_find+0xe3>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  80042115b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042115ba:	eb 25                	jmp    80042115e1 <_dwarf_abbrev_find+0x108>
		}
		if (abp->ab_entry == 0) {
  80042115bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042115c0:	48 8b 00             	mov    (%rax),%rax
  80042115c3:	48 85 c0             	test   %rax,%rax
  80042115c6:	74 13                	je     80042115db <_dwarf_abbrev_find+0x102>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  80042115c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042115cc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042115d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115d4:	48 39 c2             	cmp    %rax,%rdx
  80042115d7:	77 85                	ja     800421155e <_dwarf_abbrev_find+0x85>
  80042115d9:	eb 01                	jmp    80042115dc <_dwarf_abbrev_find+0x103>
			return DW_DLE_NONE;
		}
		if (abp->ab_entry == 0) {
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  80042115db:	90                   	nop
		}
	}

	return DW_DLE_NO_ENTRY;
  80042115dc:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042115e1:	c9                   	leaveq 
  80042115e2:	c3                   	retq   

00000080042115e3 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  80042115e3:	55                   	push   %rbp
  80042115e4:	48 89 e5             	mov    %rsp,%rbp
  80042115e7:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  80042115ee:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042115f5:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042115fc:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004211603:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800421160a:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004211611:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004211618:	48 bf 46 ae 21 04 80 	movabs $0x800421ae46,%rdi
  800421161f:	00 00 00 
  8004211622:	48 b8 6c 57 21 04 80 	movabs $0x800421576c,%rax
  8004211629:	00 00 00 
  800421162c:	ff d0                	callq  *%rax
  800421162e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004211632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211636:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421163a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  800421163e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211645:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004211649:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  800421164c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004211653:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421165a:	ba 60 00 00 00       	mov    $0x60,%edx
  800421165f:	be 00 00 00 00       	mov    $0x0,%esi
  8004211664:	48 89 c7             	mov    %rax,%rdi
  8004211667:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  800421166e:	00 00 00 
  8004211671:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004211673:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421167a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  8004211681:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211688:	48 8b 00             	mov    (%rax),%rax
  800421168b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  800421168f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211696:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421169a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800421169e:	8b 45 10             	mov    0x10(%rbp),%eax
  80042116a1:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042116a4:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042116ab:	00 

	switch (form) {
  80042116ac:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  80042116b3:	20 
  80042116b4:	0f 87 87 04 00 00    	ja     8004211b41 <_dwarf_attr_init+0x55e>
  80042116ba:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042116c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042116c8:	00 
  80042116c9:	48 b8 70 ae 21 04 80 	movabs $0x800421ae70,%rax
  80042116d0:	00 00 00 
  80042116d3:	48 01 d0             	add    %rdx,%rax
  80042116d6:	48 8b 00             	mov    (%rax),%rax
  80042116d9:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042116db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042116e2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042116e6:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042116ed:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042116f1:	0f b6 d2             	movzbl %dl,%edx
  80042116f4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042116fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042116ff:	48 89 cf             	mov    %rcx,%rdi
  8004211702:	ff d0                	callq  *%rax
  8004211704:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211708:	e9 3e 04 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421170d:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211714:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211718:	48 89 d6             	mov    %rdx,%rsi
  800421171b:	48 89 c7             	mov    %rax,%rdi
  800421171e:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  8004211725:	00 00 00 
  8004211728:	ff d0                	callq  *%rax
  800421172a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421172e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211732:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211739:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421173d:	48 89 ce             	mov    %rcx,%rsi
  8004211740:	48 89 c7             	mov    %rax,%rdi
  8004211743:	48 b8 80 0e 21 04 80 	movabs $0x8004210e80,%rax
  800421174a:	00 00 00 
  800421174d:	ff d0                	callq  *%rax
  800421174f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211753:	e9 f3 03 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211758:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421175f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211763:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421176a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421176e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211773:	48 89 cf             	mov    %rcx,%rdi
  8004211776:	ff d0                	callq  *%rax
  8004211778:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421177c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211780:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211787:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421178b:	48 89 ce             	mov    %rcx,%rsi
  800421178e:	48 89 c7             	mov    %rax,%rdi
  8004211791:	48 b8 80 0e 21 04 80 	movabs $0x8004210e80,%rax
  8004211798:	00 00 00 
  800421179b:	ff d0                	callq  *%rax
  800421179d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042117a1:	e9 a5 03 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042117a6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117ad:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042117b1:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042117b8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042117bc:	ba 02 00 00 00       	mov    $0x2,%edx
  80042117c1:	48 89 cf             	mov    %rcx,%rdi
  80042117c4:	ff d0                	callq  *%rax
  80042117c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042117ca:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042117ce:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042117d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117d9:	48 89 ce             	mov    %rcx,%rsi
  80042117dc:	48 89 c7             	mov    %rax,%rdi
  80042117df:	48 b8 80 0e 21 04 80 	movabs $0x8004210e80,%rax
  80042117e6:	00 00 00 
  80042117e9:	ff d0                	callq  *%rax
  80042117eb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042117ef:	e9 57 03 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042117f4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042117fb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042117ff:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211806:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421180a:	ba 04 00 00 00       	mov    $0x4,%edx
  800421180f:	48 89 cf             	mov    %rcx,%rdi
  8004211812:	ff d0                	callq  *%rax
  8004211814:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211818:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421181c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211823:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211827:	48 89 ce             	mov    %rcx,%rsi
  800421182a:	48 89 c7             	mov    %rax,%rdi
  800421182d:	48 b8 80 0e 21 04 80 	movabs $0x8004210e80,%rax
  8004211834:	00 00 00 
  8004211837:	ff d0                	callq  *%rax
  8004211839:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421183d:	e9 09 03 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211842:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211849:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421184d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211854:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211858:	ba 01 00 00 00       	mov    $0x1,%edx
  800421185d:	48 89 cf             	mov    %rcx,%rdi
  8004211860:	ff d0                	callq  *%rax
  8004211862:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211866:	e9 e0 02 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800421186b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211872:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211876:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421187d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211881:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211886:	48 89 cf             	mov    %rcx,%rdi
  8004211889:	ff d0                	callq  *%rax
  800421188b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421188f:	e9 b7 02 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211894:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421189b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421189f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042118a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042118aa:	ba 04 00 00 00       	mov    $0x4,%edx
  80042118af:	48 89 cf             	mov    %rcx,%rdi
  80042118b2:	ff d0                	callq  *%rax
  80042118b4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118b8:	e9 8e 02 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042118bd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042118c4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042118c8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042118cf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042118d3:	ba 08 00 00 00       	mov    $0x8,%edx
  80042118d8:	48 89 cf             	mov    %rcx,%rdi
  80042118db:	ff d0                	callq  *%rax
  80042118dd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042118e1:	e9 65 02 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  80042118e6:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042118ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118f1:	48 89 d6             	mov    %rdx,%rsi
  80042118f4:	48 89 c7             	mov    %rax,%rdi
  80042118f7:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  80042118fe:	00 00 00 
  8004211901:	ff d0                	callq  *%rax
  8004211903:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800421190a:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004211911:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004211918:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800421191f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211926:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421192d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211934:	48 83 ec 08          	sub    $0x8,%rsp
  8004211938:	6a 01                	pushq  $0x1
  800421193a:	4d 89 c1             	mov    %r8,%r9
  800421193d:	49 89 f8             	mov    %rdi,%r8
  8004211940:	48 89 c7             	mov    %rax,%rdi
  8004211943:	48 b8 e3 15 21 04 80 	movabs $0x80042115e3,%rax
  800421194a:	00 00 00 
  800421194d:	ff d0                	callq  *%rax
  800421194f:	48 83 c4 10          	add    $0x10,%rsp
  8004211953:	e9 21 03 00 00       	jmpq   8004211c79 <_dwarf_attr_init+0x696>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  8004211958:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421195f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211963:	66 83 f8 02          	cmp    $0x2,%ax
  8004211967:	75 32                	jne    800421199b <_dwarf_attr_init+0x3b8>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211969:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211970:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211974:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421197b:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800421197f:	0f b6 d2             	movzbl %dl,%edx
  8004211982:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211989:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421198d:	48 89 cf             	mov    %rcx,%rdi
  8004211990:	ff d0                	callq  *%rax
  8004211992:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		else if (cu->version == 3)
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
		break;
  8004211996:	e9 af 01 00 00       	jmpq   8004211b4a <_dwarf_attr_init+0x567>
		form = _dwarf_read_uleb128(ds_data, offsetp);
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
	case DW_FORM_ref_addr:
		if (cu->version == 2)
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
		else if (cu->version == 3)
  800421199b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042119a2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042119a6:	66 83 f8 03          	cmp    $0x3,%ax
  80042119aa:	0f 85 9a 01 00 00    	jne    8004211b4a <_dwarf_attr_init+0x567>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042119b0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042119b7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042119bb:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042119bf:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042119c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042119ca:	48 89 cf             	mov    %rcx,%rdi
  80042119cd:	ff d0                	callq  *%rax
  80042119cf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042119d3:	e9 72 01 00 00       	jmpq   8004211b4a <_dwarf_attr_init+0x567>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042119d8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042119df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119e3:	48 89 d6             	mov    %rdx,%rsi
  80042119e6:	48 89 c7             	mov    %rax,%rdi
  80042119e9:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  80042119f0:	00 00 00 
  80042119f3:	ff d0                	callq  *%rax
  80042119f5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042119f9:	e9 4d 01 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  80042119fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211a05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a09:	48 89 d6             	mov    %rdx,%rsi
  8004211a0c:	48 89 c7             	mov    %rax,%rdi
  8004211a0f:	48 b8 cf 0b 21 04 80 	movabs $0x8004210bcf,%rax
  8004211a16:	00 00 00 
  8004211a19:	ff d0                	callq  *%rax
  8004211a1b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211a1f:	e9 27 01 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211a24:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211a2b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211a2f:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211a33:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211a3a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211a3e:	48 89 cf             	mov    %rcx,%rdi
  8004211a41:	ff d0                	callq  *%rax
  8004211a43:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211a47:	e9 ff 00 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  8004211a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211a50:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004211a54:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211a5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a5f:	48 89 ce             	mov    %rcx,%rsi
  8004211a62:	48 89 c7             	mov    %rax,%rdi
  8004211a65:	48 b8 f1 0d 21 04 80 	movabs $0x8004210df1,%rax
  8004211a6c:	00 00 00 
  8004211a6f:	ff d0                	callq  *%rax
  8004211a71:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211a75:	e9 d1 00 00 00       	jmpq   8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004211a7a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211a81:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211a85:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004211a89:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211a90:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211a94:	48 89 cf             	mov    %rcx,%rdi
  8004211a97:	ff d0                	callq  *%rax
  8004211a99:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004211a9d:	48 bf 52 ae 21 04 80 	movabs $0x800421ae52,%rdi
  8004211aa4:	00 00 00 
  8004211aa7:	48 b8 6c 57 21 04 80 	movabs $0x800421576c,%rax
  8004211aae:	00 00 00 
  8004211ab1:	ff d0                	callq  *%rax
  8004211ab3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004211ab7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211abc:	75 35                	jne    8004211af3 <_dwarf_attr_init+0x510>
  8004211abe:	48 b9 5d ae 21 04 80 	movabs $0x800421ae5d,%rcx
  8004211ac5:	00 00 00 
  8004211ac8:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211acf:	00 00 00 
  8004211ad2:	be 51 02 00 00       	mov    $0x251,%esi
  8004211ad7:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211ade:	00 00 00 
  8004211ae1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ae6:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004211aed:	00 00 00 
  8004211af0:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  8004211af3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211af7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004211afb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211aff:	48 01 d0             	add    %rdx,%rax
  8004211b02:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211b06:	eb 43                	jmp    8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004211b08:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004211b0f:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004211b10:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211b14:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b1f:	48 89 ce             	mov    %rcx,%rsi
  8004211b22:	48 89 c7             	mov    %rax,%rdi
  8004211b25:	48 b8 80 0e 21 04 80 	movabs $0x8004210e80,%rax
  8004211b2c:	00 00 00 
  8004211b2f:	ff d0                	callq  *%rax
  8004211b31:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211b35:	eb 14                	jmp    8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004211b37:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004211b3e:	00 
		break;
  8004211b3f:	eb 0a                	jmp    8004211b4b <_dwarf_attr_init+0x568>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004211b41:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004211b48:	eb 01                	jmp    8004211b4b <_dwarf_attr_init+0x568>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
		else if (cu->version == 3)
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
		break;
  8004211b4a:	90                   	nop
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
		break;
	}

	if (ret == DW_DLE_NONE) {
  8004211b4b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211b4f:	0f 85 21 01 00 00    	jne    8004211c76 <_dwarf_attr_init+0x693>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004211b55:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004211b5c:	09 
  8004211b5d:	74 1e                	je     8004211b7d <_dwarf_attr_init+0x59a>
  8004211b5f:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004211b66:	0a 
  8004211b67:	74 14                	je     8004211b7d <_dwarf_attr_init+0x59a>
  8004211b69:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004211b70:	03 
  8004211b71:	74 0a                	je     8004211b7d <_dwarf_attr_init+0x59a>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004211b73:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  8004211b7a:	04 
  8004211b7b:	75 10                	jne    8004211b8d <_dwarf_attr_init+0x5aa>
			atref.at_block.bl_len = atref.u[0].u64;
  8004211b7d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004211b81:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004211b85:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211b89:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  8004211b8d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004211b91:	48 83 f8 03          	cmp    $0x3,%rax
  8004211b95:	75 39                	jne    8004211bd0 <_dwarf_attr_init+0x5ed>
			switch (atref.at_form) {
  8004211b97:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004211b9b:	48 83 f8 08          	cmp    $0x8,%rax
  8004211b9f:	74 1c                	je     8004211bbd <_dwarf_attr_init+0x5da>
  8004211ba1:	48 83 f8 0e          	cmp    $0xe,%rax
  8004211ba5:	74 02                	je     8004211ba9 <_dwarf_attr_init+0x5c6>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004211ba7:	eb 27                	jmp    8004211bd0 <_dwarf_attr_init+0x5ed>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  8004211ba9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211bad:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211bb4:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211bbb:	eb 13                	jmp    8004211bd0 <_dwarf_attr_init+0x5ed>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004211bbd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211bc1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211bc8:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004211bcf:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004211bd0:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211bd7:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004211bde:	8d 48 01             	lea    0x1(%rax),%ecx
  8004211be1:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004211be8:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004211bee:	0f b6 c0             	movzbl %al,%eax
  8004211bf1:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004211bf8:	48 63 d0             	movslq %eax,%rdx
  8004211bfb:	48 89 d0             	mov    %rdx,%rax
  8004211bfe:	48 01 c0             	add    %rax,%rax
  8004211c01:	48 01 d0             	add    %rdx,%rax
  8004211c04:	48 c1 e0 05          	shl    $0x5,%rax
  8004211c08:	48 01 c8             	add    %rcx,%rax
  8004211c0b:	48 05 70 03 00 00    	add    $0x370,%rax
  8004211c11:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004211c18:	48 89 10             	mov    %rdx,(%rax)
  8004211c1b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004211c22:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004211c26:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004211c2a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004211c2e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004211c32:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004211c36:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004211c3a:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004211c3e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211c42:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004211c46:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004211c4a:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004211c4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004211c52:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004211c56:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211c5a:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004211c5e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004211c62:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004211c66:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004211c6a:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004211c6e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211c72:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004211c76:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004211c79:	c9                   	leaveq 
  8004211c7a:	c3                   	retq   

0000008004211c7b <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  8004211c7b:	55                   	push   %rbp
  8004211c7c:	48 89 e5             	mov    %rsp,%rbp
  8004211c7f:	48 81 ec 90 03 00 00 	sub    $0x390,%rsp
  8004211c86:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  8004211c8d:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004211c94:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004211c9b:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004211ca1:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004211ca8:	00 
  8004211ca9:	75 35                	jne    8004211ce0 <dwarf_search_die_within_cu+0x65>
  8004211cab:	48 b9 78 af 21 04 80 	movabs $0x800421af78,%rcx
  8004211cb2:	00 00 00 
  8004211cb5:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211cbc:	00 00 00 
  8004211cbf:	be 86 02 00 00       	mov    $0x286,%esi
  8004211cc4:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211ccb:	00 00 00 
  8004211cce:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211cd3:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004211cda:	00 00 00 
  8004211cdd:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004211ce0:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004211ce7:	00 
  8004211ce8:	75 35                	jne    8004211d1f <dwarf_search_die_within_cu+0xa4>
  8004211cea:	48 b9 7c af 21 04 80 	movabs $0x800421af7c,%rcx
  8004211cf1:	00 00 00 
  8004211cf4:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211cfb:	00 00 00 
  8004211cfe:	be 88 02 00 00       	mov    $0x288,%esi
  8004211d03:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211d0a:	00 00 00 
  8004211d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d12:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004211d19:	00 00 00 
  8004211d1c:	41 ff d0             	callq  *%r8

	level = 1;
  8004211d1f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211d26:	e9 fa 01 00 00       	jmpq   8004211f25 <dwarf_search_die_within_cu+0x2aa>

		die_offset = offset;
  8004211d2b:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211d32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004211d36:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211d3d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211d41:	48 89 c2             	mov    %rax,%rdx
  8004211d44:	48 8d 85 80 fc ff ff 	lea    -0x380(%rbp),%rax
  8004211d4b:	48 89 c6             	mov    %rax,%rsi
  8004211d4e:	48 89 d7             	mov    %rdx,%rdi
  8004211d51:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  8004211d58:	00 00 00 
  8004211d5b:	ff d0                	callq  *%rax
  8004211d5d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004211d61:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211d66:	75 22                	jne    8004211d8a <dwarf_search_die_within_cu+0x10f>
			if (level == 0 || !search_sibling) {
  8004211d68:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211d6c:	74 09                	je     8004211d77 <dwarf_search_die_within_cu+0xfc>
  8004211d6e:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211d75:	75 0a                	jne    8004211d81 <dwarf_search_die_within_cu+0x106>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004211d77:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211d7c:	e9 d4 01 00 00       	jmpq   8004211f55 <dwarf_search_die_within_cu+0x2da>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  8004211d81:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004211d85:	e9 9b 01 00 00       	jmpq   8004211f25 <dwarf_search_die_within_cu+0x2aa>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004211d8a:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004211d91:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211d95:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211d9c:	48 83 ec 08          	sub    $0x8,%rsp
  8004211da0:	ff 75 40             	pushq  0x40(%rbp)
  8004211da3:	ff 75 38             	pushq  0x38(%rbp)
  8004211da6:	ff 75 30             	pushq  0x30(%rbp)
  8004211da9:	ff 75 28             	pushq  0x28(%rbp)
  8004211dac:	ff 75 20             	pushq  0x20(%rbp)
  8004211daf:	ff 75 18             	pushq  0x18(%rbp)
  8004211db2:	ff 75 10             	pushq  0x10(%rbp)
  8004211db5:	48 89 ce             	mov    %rcx,%rsi
  8004211db8:	48 89 c7             	mov    %rax,%rdi
  8004211dbb:	48 b8 d9 14 21 04 80 	movabs $0x80042114d9,%rax
  8004211dc2:	00 00 00 
  8004211dc5:	ff d0                	callq  *%rax
  8004211dc7:	48 83 c4 40          	add    $0x40,%rsp
  8004211dcb:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211dce:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211dd2:	74 08                	je     8004211ddc <dwarf_search_die_within_cu+0x161>
			return (ret);
  8004211dd4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211dd7:	e9 79 01 00 00       	jmpq   8004211f55 <dwarf_search_die_within_cu+0x2da>
		ret_die->die_offset = die_offset;
  8004211ddc:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211de3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211de7:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004211dea:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211df1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211df5:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004211df9:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211e00:	48 8d 50 20          	lea    0x20(%rax),%rdx
  8004211e04:	48 8d 85 b0 fc ff ff 	lea    -0x350(%rbp),%rax
  8004211e0b:	b9 66 00 00 00       	mov    $0x66,%ecx
  8004211e10:	48 89 d7             	mov    %rdx,%rdi
  8004211e13:	48 89 c6             	mov    %rax,%rsi
  8004211e16:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004211e19:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211e20:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004211e27:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004211e2e:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211e35:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211e39:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004211e40:	e9 91 00 00 00       	jmpq   8004211ed6 <dwarf_search_die_within_cu+0x25b>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004211e45:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211e48:	48 63 d0             	movslq %eax,%rdx
  8004211e4b:	48 89 d0             	mov    %rdx,%rax
  8004211e4e:	48 01 c0             	add    %rax,%rax
  8004211e51:	48 01 d0             	add    %rdx,%rax
  8004211e54:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e58:	48 01 e8             	add    %rbp,%rax
  8004211e5b:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004211e61:	48 8b 08             	mov    (%rax),%rcx
  8004211e64:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  8004211e6b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211e6e:	48 63 d0             	movslq %eax,%rdx
  8004211e71:	48 89 d0             	mov    %rdx,%rax
  8004211e74:	48 01 c0             	add    %rax,%rax
  8004211e77:	48 01 d0             	add    %rdx,%rax
  8004211e7a:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e7e:	48 83 c0 30          	add    $0x30,%rax
  8004211e82:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004211e86:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004211e8d:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  8004211e94:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211e9b:	48 83 ec 08          	sub    $0x8,%rsp
  8004211e9f:	6a 00                	pushq  $0x0
  8004211ea1:	49 89 c9             	mov    %rcx,%r9
  8004211ea4:	49 89 f8             	mov    %rdi,%r8
  8004211ea7:	48 89 d1             	mov    %rdx,%rcx
  8004211eaa:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004211eae:	48 89 c7             	mov    %rax,%rdi
  8004211eb1:	48 b8 e3 15 21 04 80 	movabs $0x80042115e3,%rax
  8004211eb8:	00 00 00 
  8004211ebb:	ff d0                	callq  *%rax
  8004211ebd:	48 83 c4 10          	add    $0x10,%rsp
  8004211ec1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004211ec4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004211ec8:	74 08                	je     8004211ed2 <dwarf_search_die_within_cu+0x257>
				return (ret);
  8004211eca:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211ecd:	e9 83 00 00 00       	jmpq   8004211f55 <dwarf_search_die_within_cu+0x2da>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004211ed2:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004211ed6:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004211ed9:	48 63 d0             	movslq %eax,%rdx
  8004211edc:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004211ee3:	48 39 c2             	cmp    %rax,%rdx
  8004211ee6:	0f 82 59 ff ff ff    	jb     8004211e45 <dwarf_search_die_within_cu+0x1ca>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004211eec:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004211ef3:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004211efa:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004211efe:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004211f05:	74 17                	je     8004211f1e <dwarf_search_die_within_cu+0x2a3>
  8004211f07:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004211f0b:	7e 11                	jle    8004211f1e <dwarf_search_die_within_cu+0x2a3>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211f0d:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004211f14:	3c 01                	cmp    $0x1,%al
  8004211f16:	75 0d                	jne    8004211f25 <dwarf_search_die_within_cu+0x2aa>
				/* Advance to next DIE level. */
				level++;
  8004211f18:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004211f1c:	eb 07                	jmp    8004211f25 <dwarf_search_die_within_cu+0x2aa>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004211f1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f23:	eb 30                	jmp    8004211f55 <dwarf_search_die_within_cu+0x2da>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004211f25:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004211f29:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211f30:	48 39 c2             	cmp    %rax,%rdx
  8004211f33:	76 1b                	jbe    8004211f50 <dwarf_search_die_within_cu+0x2d5>
  8004211f35:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004211f3c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004211f40:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004211f47:	48 39 c2             	cmp    %rax,%rdx
  8004211f4a:	0f 87 db fd ff ff    	ja     8004211d2b <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004211f50:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211f55:	c9                   	leaveq 
  8004211f56:	c3                   	retq   

0000008004211f57 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004211f57:	55                   	push   %rbp
  8004211f58:	48 89 e5             	mov    %rsp,%rbp
  8004211f5b:	48 83 ec 30          	sub    $0x30,%rsp
  8004211f5f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211f63:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211f67:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004211f6b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211f70:	75 35                	jne    8004211fa7 <dwarf_offdie+0x50>
  8004211f72:	48 b9 78 af 21 04 80 	movabs $0x800421af78,%rcx
  8004211f79:	00 00 00 
  8004211f7c:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211f83:	00 00 00 
  8004211f86:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004211f8b:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211f92:	00 00 00 
  8004211f95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f9a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004211fa1:	00 00 00 
  8004211fa4:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004211fa7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004211fac:	75 35                	jne    8004211fe3 <dwarf_offdie+0x8c>
  8004211fae:	48 b9 7c af 21 04 80 	movabs $0x800421af7c,%rcx
  8004211fb5:	00 00 00 
  8004211fb8:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004211fbf:	00 00 00 
  8004211fc2:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004211fc7:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004211fce:	00 00 00 
  8004211fd1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fd6:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004211fdd:	00 00 00 
  8004211fe0:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004211fe3:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004211fe7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211feb:	76 45                	jbe    8004212032 <dwarf_offdie+0xdb>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004211fed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004211ff1:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004211ff5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ff9:	48 83 ec 08          	sub    $0x8,%rsp
  8004211ffd:	ff 75 40             	pushq  0x40(%rbp)
  8004212000:	ff 75 38             	pushq  0x38(%rbp)
  8004212003:	ff 75 30             	pushq  0x30(%rbp)
  8004212006:	ff 75 28             	pushq  0x28(%rbp)
  8004212009:	ff 75 20             	pushq  0x20(%rbp)
  800421200c:	ff 75 18             	pushq  0x18(%rbp)
  800421200f:	ff 75 10             	pushq  0x10(%rbp)
  8004212012:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212017:	48 89 c7             	mov    %rax,%rdi
  800421201a:	48 b8 7b 1c 21 04 80 	movabs $0x8004211c7b,%rax
  8004212021:	00 00 00 
  8004212024:	ff d0                	callq  *%rax
  8004212026:	48 83 c4 40          	add    $0x40,%rsp
  800421202a:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  800421202d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212030:	eb 05                	jmp    8004212037 <dwarf_offdie+0xe0>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212032:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212037:	c9                   	leaveq 
  8004212038:	c3                   	retq   

0000008004212039 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212039:	55                   	push   %rbp
  800421203a:	48 89 e5             	mov    %rsp,%rbp
  800421203d:	48 83 ec 20          	sub    $0x20,%rsp
  8004212041:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212045:	89 f0                	mov    %esi,%eax
  8004212047:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  800421204b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212052:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212053:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421205a:	eb 57                	jmp    80042120b3 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  800421205c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212060:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212063:	48 63 d0             	movslq %eax,%rdx
  8004212066:	48 89 d0             	mov    %rdx,%rax
  8004212069:	48 01 c0             	add    %rax,%rax
  800421206c:	48 01 d0             	add    %rdx,%rax
  800421206f:	48 c1 e0 05          	shl    $0x5,%rax
  8004212073:	48 01 c8             	add    %rcx,%rax
  8004212076:	48 05 80 03 00 00    	add    $0x380,%rax
  800421207c:	48 8b 10             	mov    (%rax),%rdx
  800421207f:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212083:	48 39 c2             	cmp    %rax,%rdx
  8004212086:	75 27                	jne    80042120af <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212088:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421208b:	48 63 d0             	movslq %eax,%rdx
  800421208e:	48 89 d0             	mov    %rdx,%rax
  8004212091:	48 01 c0             	add    %rax,%rax
  8004212094:	48 01 d0             	add    %rdx,%rax
  8004212097:	48 c1 e0 05          	shl    $0x5,%rax
  800421209b:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  80042120a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120a6:	48 01 d0             	add    %rdx,%rax
  80042120a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  80042120ad:	eb 17                	jmp    80042120c6 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  80042120af:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042120b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120b7:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  80042120be:	0f b6 c0             	movzbl %al,%eax
  80042120c1:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  80042120c4:	7f 96                	jg     800421205c <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  80042120c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042120ca:	c9                   	leaveq 
  80042120cb:	c3                   	retq   

00000080042120cc <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  80042120cc:	55                   	push   %rbp
  80042120cd:	48 89 e5             	mov    %rsp,%rbp
  80042120d0:	48 83 ec 40          	sub    $0x40,%rsp
  80042120d4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042120d8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042120dc:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042120e0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  80042120e4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042120e9:	75 35                	jne    8004212120 <dwarf_siblingof+0x54>
  80042120eb:	48 b9 78 af 21 04 80 	movabs $0x800421af78,%rcx
  80042120f2:	00 00 00 
  80042120f5:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  80042120fc:	00 00 00 
  80042120ff:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212104:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  800421210b:	00 00 00 
  800421210e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212113:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421211a:	00 00 00 
  800421211d:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212120:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212125:	75 35                	jne    800421215c <dwarf_siblingof+0x90>
  8004212127:	48 b9 7c af 21 04 80 	movabs $0x800421af7c,%rcx
  800421212e:	00 00 00 
  8004212131:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004212138:	00 00 00 
  800421213b:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212140:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004212147:	00 00 00 
  800421214a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421214f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004212156:	00 00 00 
  8004212159:	41 ff d0             	callq  *%r8
	assert(cu);
  800421215c:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212161:	75 35                	jne    8004212198 <dwarf_siblingof+0xcc>
  8004212163:	48 b9 84 af 21 04 80 	movabs $0x800421af84,%rcx
  800421216a:	00 00 00 
  800421216d:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004212174:	00 00 00 
  8004212177:	be ee 02 00 00       	mov    $0x2ee,%esi
  800421217c:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004212183:	00 00 00 
  8004212186:	b8 00 00 00 00       	mov    $0x0,%eax
  800421218b:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004212192:	00 00 00 
  8004212195:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212198:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421219d:	75 44                	jne    80042121e3 <dwarf_siblingof+0x117>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  800421219f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042121a3:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042121a7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042121ab:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042121af:	48 83 ec 08          	sub    $0x8,%rsp
  80042121b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042121b7:	ff 70 30             	pushq  0x30(%rax)
  80042121ba:	ff 70 28             	pushq  0x28(%rax)
  80042121bd:	ff 70 20             	pushq  0x20(%rax)
  80042121c0:	ff 70 18             	pushq  0x18(%rax)
  80042121c3:	ff 70 10             	pushq  0x10(%rax)
  80042121c6:	ff 70 08             	pushq  0x8(%rax)
  80042121c9:	ff 30                	pushq  (%rax)
  80042121cb:	48 89 cf             	mov    %rcx,%rdi
  80042121ce:	48 b8 57 1f 21 04 80 	movabs $0x8004211f57,%rax
  80042121d5:	00 00 00 
  80042121d8:	ff d0                	callq  *%rax
  80042121da:	48 83 c4 40          	add    $0x40,%rsp
  80042121de:	e9 e9 00 00 00       	jmpq   80042122cc <dwarf_siblingof+0x200>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  80042121e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042121ea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042121ee:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042121f2:	84 c0                	test   %al,%al
  80042121f4:	75 0e                	jne    8004212204 <dwarf_siblingof+0x138>
		offset = die->die_next_off;
  80042121f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042121fa:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042121fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212202:	eb 6b                	jmp    800421226f <dwarf_siblingof+0x1a3>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212204:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212208:	be 01 00 00 00       	mov    $0x1,%esi
  800421220d:	48 89 c7             	mov    %rax,%rdi
  8004212210:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  8004212217:	00 00 00 
  800421221a:	ff d0                	callq  *%rax
  800421221c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212220:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212225:	74 35                	je     800421225c <dwarf_siblingof+0x190>
			if (at->at_form != DW_FORM_ref_addr)
  8004212227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421222b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421222f:	48 83 f8 10          	cmp    $0x10,%rax
  8004212233:	74 19                	je     800421224e <dwarf_siblingof+0x182>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212239:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421223d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212241:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212245:	48 01 d0             	add    %rdx,%rax
  8004212248:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421224c:	eb 21                	jmp    800421226f <dwarf_siblingof+0x1a3>
			else
				offset = at->u[0].u64;
  800421224e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212252:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212256:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421225a:	eb 13                	jmp    800421226f <dwarf_siblingof+0x1a3>
		} else {
			offset = die->die_next_off;
  800421225c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212260:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212264:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212268:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  800421226f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212272:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212276:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800421227a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  800421227e:	48 83 ec 08          	sub    $0x8,%rsp
  8004212282:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212286:	ff 70 30             	pushq  0x30(%rax)
  8004212289:	ff 70 28             	pushq  0x28(%rax)
  800421228c:	ff 70 20             	pushq  0x20(%rax)
  800421228f:	ff 70 18             	pushq  0x18(%rax)
  8004212292:	ff 70 10             	pushq  0x10(%rax)
  8004212295:	ff 70 08             	pushq  0x8(%rax)
  8004212298:	ff 30                	pushq  (%rax)
  800421229a:	48 b8 7b 1c 21 04 80 	movabs $0x8004211c7b,%rax
  80042122a1:	00 00 00 
  80042122a4:	ff d0                	callq  *%rax
  80042122a6:	48 83 c4 40          	add    $0x40,%rsp
  80042122aa:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  80042122ad:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  80042122b1:	75 07                	jne    80042122ba <dwarf_siblingof+0x1ee>
		return (DW_DLV_NO_ENTRY);
  80042122b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042122b8:	eb 12                	jmp    80042122cc <dwarf_siblingof+0x200>
	} else if (ret != DW_DLE_NONE)
  80042122ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042122be:	74 07                	je     80042122c7 <dwarf_siblingof+0x1fb>
		return (DW_DLV_ERROR);
  80042122c0:	b8 01 00 00 00       	mov    $0x1,%eax
  80042122c5:	eb 05                	jmp    80042122cc <dwarf_siblingof+0x200>


	return (DW_DLV_OK);
  80042122c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042122cc:	c9                   	leaveq 
  80042122cd:	c3                   	retq   

00000080042122ce <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  80042122ce:	55                   	push   %rbp
  80042122cf:	48 89 e5             	mov    %rsp,%rbp
  80042122d2:	48 83 ec 30          	sub    $0x30,%rsp
  80042122d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042122da:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042122de:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042122e2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  80042122e6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042122eb:	75 35                	jne    8004212322 <dwarf_child+0x54>
  80042122ed:	48 b9 87 af 21 04 80 	movabs $0x800421af87,%rcx
  80042122f4:	00 00 00 
  80042122f7:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  80042122fe:	00 00 00 
  8004212301:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212306:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  800421230d:	00 00 00 
  8004212310:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212315:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421231c:	00 00 00 
  800421231f:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212322:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212327:	75 35                	jne    800421235e <dwarf_child+0x90>
  8004212329:	48 b9 7c af 21 04 80 	movabs $0x800421af7c,%rcx
  8004212330:	00 00 00 
  8004212333:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  800421233a:	00 00 00 
  800421233d:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212342:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004212349:	00 00 00 
  800421234c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212351:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004212358:	00 00 00 
  800421235b:	41 ff d0             	callq  *%r8
	assert(dbg);
  800421235e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212363:	75 35                	jne    800421239a <dwarf_child+0xcc>
  8004212365:	48 b9 78 af 21 04 80 	movabs $0x800421af78,%rcx
  800421236c:	00 00 00 
  800421236f:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  8004212376:	00 00 00 
  8004212379:	be 1e 03 00 00       	mov    $0x31e,%esi
  800421237e:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  8004212385:	00 00 00 
  8004212388:	b8 00 00 00 00       	mov    $0x0,%eax
  800421238d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004212394:	00 00 00 
  8004212397:	41 ff d0             	callq  *%r8
	assert(cu);
  800421239a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421239f:	75 35                	jne    80042123d6 <dwarf_child+0x108>
  80042123a1:	48 b9 84 af 21 04 80 	movabs $0x800421af84,%rcx
  80042123a8:	00 00 00 
  80042123ab:	48 ba ea ad 21 04 80 	movabs $0x800421adea,%rdx
  80042123b2:	00 00 00 
  80042123b5:	be 1f 03 00 00       	mov    $0x31f,%esi
  80042123ba:	48 bf ff ad 21 04 80 	movabs $0x800421adff,%rdi
  80042123c1:	00 00 00 
  80042123c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042123c9:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042123d0:	00 00 00 
  80042123d3:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  80042123d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042123da:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  80042123de:	84 c0                	test   %al,%al
  80042123e0:	75 07                	jne    80042123e9 <dwarf_child+0x11b>
		return (DW_DLE_NO_ENTRY);
  80042123e2:	b8 04 00 00 00       	mov    $0x4,%eax
  80042123e7:	eb 63                	jmp    800421244c <dwarf_child+0x17e>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  80042123e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042123ed:	48 8b 70 08          	mov    0x8(%rax),%rsi
  80042123f1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042123f5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  80042123f9:	48 83 ec 08          	sub    $0x8,%rsp
  80042123fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212401:	ff 70 30             	pushq  0x30(%rax)
  8004212404:	ff 70 28             	pushq  0x28(%rax)
  8004212407:	ff 70 20             	pushq  0x20(%rax)
  800421240a:	ff 70 18             	pushq  0x18(%rax)
  800421240d:	ff 70 10             	pushq  0x10(%rax)
  8004212410:	ff 70 08             	pushq  0x8(%rax)
  8004212413:	ff 30                	pushq  (%rax)
  8004212415:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421241a:	48 b8 7b 1c 21 04 80 	movabs $0x8004211c7b,%rax
  8004212421:	00 00 00 
  8004212424:	ff d0                	callq  *%rax
  8004212426:	48 83 c4 40          	add    $0x40,%rsp
  800421242a:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  800421242d:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212431:	75 07                	jne    800421243a <dwarf_child+0x16c>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212433:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212438:	eb 12                	jmp    800421244c <dwarf_child+0x17e>
	} else if (ret != DW_DLE_NONE)
  800421243a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421243e:	74 07                	je     8004212447 <dwarf_child+0x179>
		return (DW_DLV_ERROR);
  8004212440:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212445:	eb 05                	jmp    800421244c <dwarf_child+0x17e>

	return (DW_DLV_OK);
  8004212447:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421244c:	c9                   	leaveq 
  800421244d:	c3                   	retq   

000000800421244e <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  800421244e:	55                   	push   %rbp
  800421244f:	48 89 e5             	mov    %rsp,%rbp
  8004212452:	48 83 ec 20          	sub    $0x20,%rsp
  8004212456:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  800421245a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421245e:	48 8b 00             	mov    (%rax),%rax
  8004212461:	48 89 c7             	mov    %rax,%rdi
  8004212464:	48 b8 6c 57 21 04 80 	movabs $0x800421576c,%rax
  800421246b:	00 00 00 
  800421246e:	ff d0                	callq  *%rax
  8004212470:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212474:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212478:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421247c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212480:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212484:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212488:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421248c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212490:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212498:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421249c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124a0:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  80042124a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042124a9:	c9                   	leaveq 
  80042124aa:	c3                   	retq   

00000080042124ab <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  80042124ab:	55                   	push   %rbp
  80042124ac:	48 89 e5             	mov    %rsp,%rbp
  80042124af:	48 83 ec 08          	sub    $0x8,%rsp
  80042124b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  80042124b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124bb:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  80042124c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124c5:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  80042124cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124cf:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  80042124d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124d9:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  80042124df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042124e3:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  80042124e9:	90                   	nop
  80042124ea:	c9                   	leaveq 
  80042124eb:	c3                   	retq   

00000080042124ec <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  80042124ec:	55                   	push   %rbp
  80042124ed:	48 89 e5             	mov    %rsp,%rbp
  80042124f0:	48 83 ec 40          	sub    $0x40,%rsp
  80042124f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042124f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042124fc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212500:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212504:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212508:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421250c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212510:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212514:	ba 80 00 00 00       	mov    $0x80,%edx
  8004212519:	be 00 00 00 00       	mov    $0x0,%esi
  800421251e:	48 89 c7             	mov    %rax,%rdi
  8004212521:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004212528:	00 00 00 
  800421252b:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  800421252d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212531:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212535:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004212539:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421253e:	75 60                	jne    80042125a0 <dwarf_get_fde_at_pc+0xb4>
		return (DW_DLV_ERROR);
  8004212540:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212545:	eb 73                	jmp    80042125ba <dwarf_get_fde_at_pc+0xce>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004212547:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  800421254b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421254f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212553:	be 01 00 00 00       	mov    $0x1,%esi
  8004212558:	48 89 c7             	mov    %rax,%rdi
  800421255b:	48 b8 5c 47 21 04 80 	movabs $0x800421475c,%rax
  8004212562:	00 00 00 
  8004212565:	ff d0                	callq  *%rax
  8004212567:	85 c0                	test   %eax,%eax
  8004212569:	79 07                	jns    8004212572 <dwarf_get_fde_at_pc+0x86>
		{
			return DW_DLV_NO_ENTRY;
  800421256b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212570:	eb 48                	jmp    80042125ba <dwarf_get_fde_at_pc+0xce>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212572:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212576:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421257a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421257e:	77 20                	ja     80042125a0 <dwarf_get_fde_at_pc+0xb4>
  8004212580:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212584:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004212588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421258c:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212590:	48 01 d0             	add    %rdx,%rax
  8004212593:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212597:	76 07                	jbe    80042125a0 <dwarf_get_fde_at_pc+0xb4>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  8004212599:	b8 00 00 00 00       	mov    $0x0,%eax
  800421259e:	eb 1a                	jmp    80042125ba <dwarf_get_fde_at_pc+0xce>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042125a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042125a4:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042125a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042125ac:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042125b0:	48 39 c2             	cmp    %rax,%rdx
  80042125b3:	72 92                	jb     8004212547 <dwarf_get_fde_at_pc+0x5b>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  80042125b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042125ba:	c9                   	leaveq 
  80042125bb:	c3                   	retq   

00000080042125bc <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042125bc:	55                   	push   %rbp
  80042125bd:	48 89 e5             	mov    %rsp,%rbp
  80042125c0:	48 83 ec 30          	sub    $0x30,%rsp
  80042125c4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042125c8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042125cc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042125d0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int i;

	assert(dest != NULL);
  80042125d4:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042125d9:	75 35                	jne    8004212610 <_dwarf_frame_regtable_copy+0x54>
  80042125db:	48 b9 9a af 21 04 80 	movabs $0x800421af9a,%rcx
  80042125e2:	00 00 00 
  80042125e5:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  80042125ec:	00 00 00 
  80042125ef:	be 57 00 00 00       	mov    $0x57,%esi
  80042125f4:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  80042125fb:	00 00 00 
  80042125fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212603:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421260a:	00 00 00 
  800421260d:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004212610:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212615:	75 35                	jne    800421264c <_dwarf_frame_regtable_copy+0x90>
  8004212617:	48 b9 d2 af 21 04 80 	movabs $0x800421afd2,%rcx
  800421261e:	00 00 00 
  8004212621:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  8004212628:	00 00 00 
  800421262b:	be 58 00 00 00       	mov    $0x58,%esi
  8004212630:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  8004212637:	00 00 00 
  800421263a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421263f:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004212646:	00 00 00 
  8004212649:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  800421264c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212650:	48 8b 00             	mov    (%rax),%rax
  8004212653:	48 85 c0             	test   %rax,%rax
  8004212656:	75 39                	jne    8004212691 <_dwarf_frame_regtable_copy+0xd5>
		*dest = &global_rt_table_shadow;
  8004212658:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421265c:	48 bf e0 f6 49 04 80 	movabs $0x800449f6e0,%rdi
  8004212663:	00 00 00 
  8004212666:	48 89 38             	mov    %rdi,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004212669:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421266d:	48 8b 00             	mov    (%rax),%rax
  8004212670:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212674:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004212678:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  800421267c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212680:	48 8b 00             	mov    (%rax),%rax
  8004212683:	48 be e0 d7 69 04 80 	movabs $0x800469d7e0,%rsi
  800421268a:	00 00 00 
  800421268d:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212691:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212695:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004212699:	48 8b 12             	mov    (%rdx),%rdx
  800421269c:	48 89 d1             	mov    %rdx,%rcx
  800421269f:	ba 18 00 00 00       	mov    $0x18,%edx
  80042126a4:	48 89 c6             	mov    %rax,%rsi
  80042126a7:	48 89 cf             	mov    %rcx,%rdi
  80042126aa:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  80042126b1:	00 00 00 
  80042126b4:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042126b6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042126bd:	eb 5a                	jmp    8004212719 <_dwarf_frame_regtable_copy+0x15d>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042126bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042126c3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042126c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042126ca:	48 63 d0             	movslq %eax,%rdx
  80042126cd:	48 89 d0             	mov    %rdx,%rax
  80042126d0:	48 01 c0             	add    %rax,%rax
  80042126d3:	48 01 d0             	add    %rdx,%rax
  80042126d6:	48 c1 e0 03          	shl    $0x3,%rax
  80042126da:	48 01 c1             	add    %rax,%rcx
  80042126dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042126e1:	48 8b 00             	mov    (%rax),%rax
  80042126e4:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042126e8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042126eb:	48 63 d0             	movslq %eax,%rdx
  80042126ee:	48 89 d0             	mov    %rdx,%rax
  80042126f1:	48 01 c0             	add    %rax,%rax
  80042126f4:	48 01 d0             	add    %rdx,%rax
  80042126f7:	48 c1 e0 03          	shl    $0x3,%rax
  80042126fb:	48 01 f0             	add    %rsi,%rax
  80042126fe:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212703:	48 89 ce             	mov    %rcx,%rsi
  8004212706:	48 89 c7             	mov    %rax,%rdi
  8004212709:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  8004212710:	00 00 00 
  8004212713:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004212715:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212719:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421271d:	48 8b 00             	mov    (%rax),%rax
  8004212720:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212724:	0f b7 c0             	movzwl %ax,%eax
  8004212727:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421272a:	7e 44                	jle    8004212770 <_dwarf_frame_regtable_copy+0x1b4>
		     i < src->rt3_reg_table_size; i++)
  800421272c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212730:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212734:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212737:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421273a:	7f 83                	jg     80042126bf <_dwarf_frame_regtable_copy+0x103>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421273c:	eb 32                	jmp    8004212770 <_dwarf_frame_regtable_copy+0x1b4>
		(*dest)->rt3_rules[i].dw_regnum =
  800421273e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212742:	48 8b 00             	mov    (%rax),%rax
  8004212745:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212749:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421274c:	48 63 d0             	movslq %eax,%rdx
  800421274f:	48 89 d0             	mov    %rdx,%rax
  8004212752:	48 01 c0             	add    %rax,%rax
  8004212755:	48 01 d0             	add    %rdx,%rax
  8004212758:	48 c1 e0 03          	shl    $0x3,%rax
  800421275c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004212760:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212764:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004212768:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  800421276c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004212770:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212774:	48 8b 00             	mov    (%rax),%rax
  8004212777:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421277b:	0f b7 c0             	movzwl %ax,%eax
  800421277e:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004212781:	7f bb                	jg     800421273e <_dwarf_frame_regtable_copy+0x182>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004212783:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212788:	c9                   	leaveq 
  8004212789:	c3                   	retq   

000000800421278a <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  800421278a:	55                   	push   %rbp
  800421278b:	48 89 e5             	mov    %rsp,%rbp
  800421278e:	53                   	push   %rbx
  800421278f:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  8004212796:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421279a:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800421279e:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  80042127a2:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  80042127a6:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042127ad:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042127b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042127bb:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042127c2:	00 
  80042127c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042127c7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042127cb:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042127cf:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042127d3:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042127d6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042127da:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042127de:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042127e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042127e6:	48 89 c7             	mov    %rax,%rdi
  80042127e9:	48 b8 bc 25 21 04 80 	movabs $0x80042125bc,%rax
  80042127f0:	00 00 00 
  80042127f3:	ff d0                	callq  *%rax
	p = insts;
  80042127f5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042127f9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  80042127fd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212801:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212805:	48 01 d0             	add    %rdx,%rax
  8004212808:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  800421280c:	e9 38 0d 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		if (*p == DW_CFA_nop) {
  8004212811:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212815:	0f b6 00             	movzbl (%rax),%eax
  8004212818:	84 c0                	test   %al,%al
  800421281a:	75 11                	jne    800421282d <_dwarf_frame_run_inst+0xa3>
			p++;
  800421281c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212820:	48 83 c0 01          	add    $0x1,%rax
  8004212824:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004212828:	e9 1c 0d 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		}

		high2 = *p & 0xc0;
  800421282d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004212831:	0f b6 00             	movzbl (%rax),%eax
  8004212834:	83 e0 c0             	and    $0xffffffc0,%eax
  8004212837:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  800421283a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421283e:	0f b6 00             	movzbl (%rax),%eax
  8004212841:	83 e0 3f             	and    $0x3f,%eax
  8004212844:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004212847:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421284b:	48 83 c0 01          	add    $0x1,%rax
  800421284f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004212853:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004212857:	0f 84 a4 01 00 00    	je     8004212a01 <_dwarf_frame_run_inst+0x277>
			switch (high2) {
  800421285d:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004212861:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004212866:	74 37                	je     800421289f <_dwarf_frame_run_inst+0x115>
  8004212868:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800421286d:	0f 84 03 01 00 00    	je     8004212976 <_dwarf_frame_run_inst+0x1ec>
  8004212873:	83 f8 40             	cmp    $0x40,%eax
  8004212876:	0f 85 73 01 00 00    	jne    80042129ef <_dwarf_frame_run_inst+0x265>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  800421287c:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212880:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212887:	ff 
  8004212888:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  800421288c:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212890:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212894:	0f 83 61 01 00 00    	jae    80042129fb <_dwarf_frame_run_inst+0x271>
			                goto program_done;
  800421289a:	e9 c4 0c 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			        break;
			case DW_CFA_offset:
			        *row_pc = pc;
  800421289f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042128a3:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042128a7:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042128aa:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128ae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128b2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042128b6:	66 39 c2             	cmp    %ax,%dx
  80042128b9:	72 0c                	jb     80042128c7 <_dwarf_frame_run_inst+0x13d>
  80042128bb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042128c2:	e9 9c 0c 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			        RL[low6].dw_offset_relevant = 1;
  80042128c7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128cb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042128cf:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128d3:	48 89 d0             	mov    %rdx,%rax
  80042128d6:	48 01 c0             	add    %rax,%rax
  80042128d9:	48 01 d0             	add    %rdx,%rax
  80042128dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042128e0:	48 01 c8             	add    %rcx,%rax
  80042128e3:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042128e6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042128ea:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042128ee:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042128f2:	48 89 d0             	mov    %rdx,%rax
  80042128f5:	48 01 c0             	add    %rax,%rax
  80042128f8:	48 01 d0             	add    %rdx,%rax
  80042128fb:	48 c1 e0 03          	shl    $0x3,%rax
  80042128ff:	48 01 c8             	add    %rcx,%rax
  8004212902:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212906:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421290a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421290e:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212912:	48 89 d0             	mov    %rdx,%rax
  8004212915:	48 01 c0             	add    %rax,%rax
  8004212918:	48 01 d0             	add    %rdx,%rax
  800421291b:	48 c1 e0 03          	shl    $0x3,%rax
  800421291f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212923:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212927:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421292b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  800421292f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212933:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212937:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421293b:	48 89 d0             	mov    %rdx,%rax
  800421293e:	48 01 c0             	add    %rax,%rax
  8004212941:	48 01 d0             	add    %rdx,%rax
  8004212944:	48 c1 e0 03          	shl    $0x3,%rax
  8004212948:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  800421294c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212950:	48 89 c7             	mov    %rax,%rdi
  8004212953:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  800421295a:	00 00 00 
  800421295d:	ff d0                	callq  *%rax
  800421295f:	48 89 c2             	mov    %rax,%rdx
  8004212962:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212969:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  800421296d:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004212971:	e9 86 00 00 00       	jmpq   80042129fc <_dwarf_frame_run_inst+0x272>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004212976:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421297a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421297e:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004212981:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004212985:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212989:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421298d:	66 39 c2             	cmp    %ax,%dx
  8004212990:	72 0c                	jb     800421299e <_dwarf_frame_run_inst+0x214>
  8004212992:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212999:	e9 c5 0b 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			        memcpy(&RL[low6], &INITRL[low6],
  800421299e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042129a2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042129a6:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042129aa:	48 89 d0             	mov    %rdx,%rax
  80042129ad:	48 01 c0             	add    %rax,%rax
  80042129b0:	48 01 d0             	add    %rdx,%rax
  80042129b3:	48 c1 e0 03          	shl    $0x3,%rax
  80042129b7:	48 01 c1             	add    %rax,%rcx
  80042129ba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042129be:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042129c2:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042129c6:	48 89 d0             	mov    %rdx,%rax
  80042129c9:	48 01 c0             	add    %rax,%rax
  80042129cc:	48 01 d0             	add    %rdx,%rax
  80042129cf:	48 c1 e0 03          	shl    $0x3,%rax
  80042129d3:	48 01 f0             	add    %rsi,%rax
  80042129d6:	ba 18 00 00 00       	mov    $0x18,%edx
  80042129db:	48 89 ce             	mov    %rcx,%rsi
  80042129de:	48 89 c7             	mov    %rax,%rdi
  80042129e1:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  80042129e8:	00 00 00 
  80042129eb:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042129ed:	eb 0d                	jmp    80042129fc <_dwarf_frame_run_inst+0x272>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042129ef:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  80042129f6:	e9 68 0b 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			switch (high2) {
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
			        if (pc_req < pc)
			                goto program_done;
			        break;
  80042129fb:	90                   	nop
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
			        goto program_done;
			}

			continue;
  80042129fc:	e9 48 0b 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		}

		switch (low6) {
  8004212a01:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004212a05:	83 f8 16             	cmp    $0x16,%eax
  8004212a08:	0f 87 32 0b 00 00    	ja     8004213540 <_dwarf_frame_run_inst+0xdb6>
  8004212a0e:	89 c0                	mov    %eax,%eax
  8004212a10:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004212a17:	00 
  8004212a18:	48 b8 e0 af 21 04 80 	movabs $0x800421afe0,%rax
  8004212a1f:	00 00 00 
  8004212a22:	48 01 d0             	add    %rdx,%rax
  8004212a25:	48 8b 00             	mov    (%rax),%rax
  8004212a28:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004212a2a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a2e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a32:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212a36:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004212a39:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a3d:	89 ce                	mov    %ecx,%esi
  8004212a3f:	48 89 d7             	mov    %rdx,%rdi
  8004212a42:	ff d0                	callq  *%rax
  8004212a44:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a48:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a4c:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a50:	0f 82 03 0b 00 00    	jb     8004213559 <_dwarf_frame_run_inst+0xdcf>
			        goto program_done;
			break;
  8004212a56:	e9 ee 0a 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  8004212a5b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a5f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a63:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a67:	be 01 00 00 00       	mov    $0x1,%esi
  8004212a6c:	48 89 d7             	mov    %rdx,%rdi
  8004212a6f:	ff d0                	callq  *%rax
  8004212a71:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212a78:	ff 
  8004212a79:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212a7d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212a81:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212a85:	0f 82 d1 0a 00 00    	jb     800421355c <_dwarf_frame_run_inst+0xdd2>
			        goto program_done;
			break;
  8004212a8b:	e9 b9 0a 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004212a90:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212a94:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212a98:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212a9c:	be 02 00 00 00       	mov    $0x2,%esi
  8004212aa1:	48 89 d7             	mov    %rdx,%rdi
  8004212aa4:	ff d0                	callq  *%rax
  8004212aa6:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212aad:	ff 
  8004212aae:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212ab2:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212ab6:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212aba:	0f 82 9f 0a 00 00    	jb     800421355f <_dwarf_frame_run_inst+0xdd5>
			        goto program_done;
			break;
  8004212ac0:	e9 84 0a 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004212ac5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212ac9:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004212acd:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004212ad1:	be 04 00 00 00       	mov    $0x4,%esi
  8004212ad6:	48 89 d7             	mov    %rdx,%rdi
  8004212ad9:	ff d0                	callq  *%rax
  8004212adb:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004212ae2:	ff 
  8004212ae3:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004212ae7:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004212aeb:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004212aef:	0f 82 6d 0a 00 00    	jb     8004213562 <_dwarf_frame_run_inst+0xdd8>
			        goto program_done;
			break;
  8004212af5:	e9 4f 0a 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004212afa:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212afe:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212b02:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212b05:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212b09:	48 89 c7             	mov    %rax,%rdi
  8004212b0c:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212b13:	00 00 00 
  8004212b16:	ff d0                	callq  *%rax
  8004212b18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212b1c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212b20:	48 89 c7             	mov    %rax,%rdi
  8004212b23:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212b2a:	00 00 00 
  8004212b2d:	ff d0                	callq  *%rax
  8004212b2f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212b33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b37:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212b3b:	0f b7 c0             	movzwl %ax,%eax
  8004212b3e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212b42:	77 0c                	ja     8004212b50 <_dwarf_frame_run_inst+0x3c6>
  8004212b44:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212b4b:	e9 13 0a 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 1;
  8004212b50:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b54:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b58:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b5c:	48 89 d0             	mov    %rdx,%rax
  8004212b5f:	48 01 c0             	add    %rax,%rax
  8004212b62:	48 01 d0             	add    %rdx,%rax
  8004212b65:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b69:	48 01 c8             	add    %rcx,%rax
  8004212b6c:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004212b6f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b73:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b7b:	48 89 d0             	mov    %rdx,%rax
  8004212b7e:	48 01 c0             	add    %rax,%rax
  8004212b81:	48 01 d0             	add    %rdx,%rax
  8004212b84:	48 c1 e0 03          	shl    $0x3,%rax
  8004212b88:	48 01 c8             	add    %rcx,%rax
  8004212b8b:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004212b8f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212b93:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212b97:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212b9b:	48 89 d0             	mov    %rdx,%rax
  8004212b9e:	48 01 c0             	add    %rax,%rax
  8004212ba1:	48 01 d0             	add    %rdx,%rax
  8004212ba4:	48 c1 e0 03          	shl    $0x3,%rax
  8004212ba8:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212bac:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212bb0:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004212bb4:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004212bb8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212bbc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212bc0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212bc4:	48 89 d0             	mov    %rdx,%rax
  8004212bc7:	48 01 c0             	add    %rax,%rax
  8004212bca:	48 01 d0             	add    %rdx,%rax
  8004212bcd:	48 c1 e0 03          	shl    $0x3,%rax
  8004212bd1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212bd5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004212bdc:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004212be1:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004212be5:	e9 5f 09 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004212bea:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212bee:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212bf2:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212bf5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212bf9:	48 89 c7             	mov    %rax,%rdi
  8004212bfc:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212c03:	00 00 00 
  8004212c06:	ff d0                	callq  *%rax
  8004212c08:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212c0c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c10:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212c14:	0f b7 c0             	movzwl %ax,%eax
  8004212c17:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212c1b:	77 0c                	ja     8004212c29 <_dwarf_frame_run_inst+0x49f>
  8004212c1d:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212c24:	e9 3a 09 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			memcpy(&RL[reg], &INITRL[reg],
  8004212c29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004212c2d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c31:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c35:	48 89 d0             	mov    %rdx,%rax
  8004212c38:	48 01 c0             	add    %rax,%rax
  8004212c3b:	48 01 d0             	add    %rdx,%rax
  8004212c3e:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c42:	48 01 c1             	add    %rax,%rcx
  8004212c45:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212c49:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212c4d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c51:	48 89 d0             	mov    %rdx,%rax
  8004212c54:	48 01 c0             	add    %rax,%rax
  8004212c57:	48 01 d0             	add    %rdx,%rax
  8004212c5a:	48 c1 e0 03          	shl    $0x3,%rax
  8004212c5e:	48 01 f0             	add    %rsi,%rax
  8004212c61:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212c66:	48 89 ce             	mov    %rcx,%rsi
  8004212c69:	48 89 c7             	mov    %rax,%rdi
  8004212c6c:	48 b8 03 03 21 04 80 	movabs $0x8004210303,%rax
  8004212c73:	00 00 00 
  8004212c76:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004212c78:	e9 cc 08 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004212c7d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212c81:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212c85:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212c88:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212c8c:	48 89 c7             	mov    %rax,%rdi
  8004212c8f:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212c96:	00 00 00 
  8004212c99:	ff d0                	callq  *%rax
  8004212c9b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212c9f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ca3:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212ca7:	0f b7 c0             	movzwl %ax,%eax
  8004212caa:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212cae:	77 0c                	ja     8004212cbc <_dwarf_frame_run_inst+0x532>
  8004212cb0:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212cb7:	e9 a7 08 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 0;
  8004212cbc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cc0:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212cc4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212cc8:	48 89 d0             	mov    %rdx,%rax
  8004212ccb:	48 01 c0             	add    %rax,%rax
  8004212cce:	48 01 d0             	add    %rdx,%rax
  8004212cd1:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cd5:	48 01 c8             	add    %rcx,%rax
  8004212cd8:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004212cdb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212cdf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ce3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ce7:	48 89 d0             	mov    %rdx,%rax
  8004212cea:	48 01 c0             	add    %rax,%rax
  8004212ced:	48 01 d0             	add    %rdx,%rax
  8004212cf0:	48 c1 e0 03          	shl    $0x3,%rax
  8004212cf4:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212cf8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212cfc:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004212d00:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212d04:	e9 40 08 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  8004212d09:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d0d:	48 89 c7             	mov    %rax,%rdi
  8004212d10:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212d17:	00 00 00 
  8004212d1a:	ff d0                	callq  *%rax
  8004212d1c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212d20:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d24:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212d28:	0f b7 c0             	movzwl %ax,%eax
  8004212d2b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212d2f:	77 0c                	ja     8004212d3d <_dwarf_frame_run_inst+0x5b3>
  8004212d31:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212d38:	e9 26 08 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 0;
  8004212d3d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d41:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d45:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d49:	48 89 d0             	mov    %rdx,%rax
  8004212d4c:	48 01 c0             	add    %rax,%rax
  8004212d4f:	48 01 d0             	add    %rdx,%rax
  8004212d52:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d56:	48 01 c8             	add    %rcx,%rax
  8004212d59:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  8004212d5c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212d60:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212d64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212d68:	48 89 d0             	mov    %rdx,%rax
  8004212d6b:	48 01 c0             	add    %rax,%rax
  8004212d6e:	48 01 d0             	add    %rdx,%rax
  8004212d71:	48 c1 e0 03          	shl    $0x3,%rax
  8004212d75:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004212d79:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212d7d:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004212d81:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004212d85:	e9 bf 07 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_register:
			*row_pc = pc;
  8004212d8a:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212d8e:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212d92:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212d95:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212d99:	48 89 c7             	mov    %rax,%rdi
  8004212d9c:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212da3:	00 00 00 
  8004212da6:	ff d0                	callq  *%rax
  8004212da8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004212dac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212db0:	48 89 c7             	mov    %rax,%rdi
  8004212db3:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212dba:	00 00 00 
  8004212dbd:	ff d0                	callq  *%rax
  8004212dbf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212dc3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212dc7:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212dcb:	0f b7 c0             	movzwl %ax,%eax
  8004212dce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212dd2:	77 0c                	ja     8004212de0 <_dwarf_frame_run_inst+0x656>
  8004212dd4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212ddb:	e9 83 07 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 0;
  8004212de0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212de4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212de8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212dec:	48 89 d0             	mov    %rdx,%rax
  8004212def:	48 01 c0             	add    %rax,%rax
  8004212df2:	48 01 d0             	add    %rdx,%rax
  8004212df5:	48 c1 e0 03          	shl    $0x3,%rax
  8004212df9:	48 01 c8             	add    %rcx,%rax
  8004212dfc:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004212dff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212e03:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212e07:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212e0b:	48 89 d0             	mov    %rdx,%rax
  8004212e0e:	48 01 c0             	add    %rax,%rax
  8004212e11:	48 01 d0             	add    %rdx,%rax
  8004212e14:	48 c1 e0 03          	shl    $0x3,%rax
  8004212e18:	48 01 c8             	add    %rcx,%rax
  8004212e1b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004212e1f:	66 89 50 02          	mov    %dx,0x2(%rax)
			break;
  8004212e23:	e9 21 07 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  8004212e28:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212e2c:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212e30:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004212e34:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212e38:	48 89 c7             	mov    %rax,%rdi
  8004212e3b:	48 b8 bc 25 21 04 80 	movabs $0x80042125bc,%rax
  8004212e42:	00 00 00 
  8004212e45:	ff d0                	callq  *%rax
			break;
  8004212e47:	e9 fd 06 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_restore_state:
			*row_pc = pc;
  8004212e4c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e50:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e54:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  8004212e57:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212e5b:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212e5f:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004212e63:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212e67:	48 89 c7             	mov    %rax,%rdi
  8004212e6a:	48 b8 bc 25 21 04 80 	movabs $0x80042125bc,%rax
  8004212e71:	00 00 00 
  8004212e74:	ff d0                	callq  *%rax
			break;
  8004212e76:	e9 ce 06 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004212e7b:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212e7f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212e83:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212e86:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212e8a:	48 89 c7             	mov    %rax,%rdi
  8004212e8d:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212e94:	00 00 00 
  8004212e97:	ff d0                	callq  *%rax
  8004212e99:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004212e9d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212ea1:	48 89 c7             	mov    %rax,%rdi
  8004212ea4:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212eab:	00 00 00 
  8004212eae:	ff d0                	callq  *%rax
  8004212eb0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212eb4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212eb8:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212ebb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ebf:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004212ec3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ec7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ecb:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212ecf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ed3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212ed7:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212edb:	e9 69 06 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  8004212ee0:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212ee4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212ee8:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212eeb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212eef:	48 89 c7             	mov    %rax,%rdi
  8004212ef2:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212ef9:	00 00 00 
  8004212efc:	ff d0                	callq  *%rax
  8004212efe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004212f02:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f06:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212f0a:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004212f0e:	e9 36 06 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004212f13:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212f17:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212f1b:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004212f1e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f22:	48 89 c7             	mov    %rax,%rdi
  8004212f25:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212f2c:	00 00 00 
  8004212f2f:	ff d0                	callq  *%rax
  8004212f31:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004212f35:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f39:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004212f3c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f40:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004212f44:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f48:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212f4c:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004212f50:	e9 f4 05 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004212f55:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212f59:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212f5d:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004212f60:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f64:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004212f67:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f6b:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004212f6f:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004212f73:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212f77:	48 89 c7             	mov    %rax,%rdi
  8004212f7a:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212f81:	00 00 00 
  8004212f84:	ff d0                	callq  *%rax
  8004212f86:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004212f8a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f8e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212f92:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004212f96:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212f9a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212f9e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212fa2:	48 01 d0             	add    %rdx,%rax
  8004212fa5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004212fa9:	e9 9b 05 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_expression:
			*row_pc = pc;
  8004212fae:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004212fb2:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004212fb6:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004212fb9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004212fbd:	48 89 c7             	mov    %rax,%rdi
  8004212fc0:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004212fc7:	00 00 00 
  8004212fca:	ff d0                	callq  *%rax
  8004212fcc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004212fd0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212fd4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212fd8:	0f b7 c0             	movzwl %ax,%eax
  8004212fdb:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212fdf:	77 0c                	ja     8004212fed <_dwarf_frame_run_inst+0x863>
  8004212fe1:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004212fe8:	e9 76 05 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 0;
  8004212fed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004212ff1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ff5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ff9:	48 89 d0             	mov    %rdx,%rax
  8004212ffc:	48 01 c0             	add    %rax,%rax
  8004212fff:	48 01 d0             	add    %rdx,%rax
  8004213002:	48 c1 e0 03          	shl    $0x3,%rax
  8004213006:	48 01 c8             	add    %rcx,%rax
  8004213009:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  800421300c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213010:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213014:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213018:	48 89 d0             	mov    %rdx,%rax
  800421301b:	48 01 c0             	add    %rax,%rax
  800421301e:	48 01 d0             	add    %rdx,%rax
  8004213021:	48 c1 e0 03          	shl    $0x3,%rax
  8004213025:	48 01 c8             	add    %rcx,%rax
  8004213028:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  800421302c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213030:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213034:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213038:	48 89 d0             	mov    %rdx,%rax
  800421303b:	48 01 c0             	add    %rax,%rax
  800421303e:	48 01 d0             	add    %rdx,%rax
  8004213041:	48 c1 e0 03          	shl    $0x3,%rax
  8004213045:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213049:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421304d:	48 89 c7             	mov    %rax,%rdi
  8004213050:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004213057:	00 00 00 
  800421305a:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  800421305c:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213060:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213064:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213068:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421306c:	48 89 d0             	mov    %rdx,%rax
  800421306f:	48 01 c0             	add    %rax,%rax
  8004213072:	48 01 d0             	add    %rdx,%rax
  8004213075:	48 c1 e0 03          	shl    $0x3,%rax
  8004213079:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421307d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213081:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213085:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213089:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421308d:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213091:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213095:	48 89 d0             	mov    %rdx,%rax
  8004213098:	48 01 c0             	add    %rax,%rax
  800421309b:	48 01 d0             	add    %rdx,%rax
  800421309e:	48 c1 e0 03          	shl    $0x3,%rax
  80042130a2:	48 01 f0             	add    %rsi,%rax
  80042130a5:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042130a9:	48 01 c8             	add    %rcx,%rax
  80042130ac:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  80042130b0:	e9 94 04 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  80042130b5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042130b9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042130bd:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042130c0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042130c4:	48 89 c7             	mov    %rax,%rdi
  80042130c7:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  80042130ce:	00 00 00 
  80042130d1:	ff d0                	callq  *%rax
  80042130d3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042130d7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042130db:	48 89 c7             	mov    %rax,%rdi
  80042130de:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  80042130e5:	00 00 00 
  80042130e8:	ff d0                	callq  *%rax
  80042130ea:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042130ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042130f2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042130f6:	0f b7 c0             	movzwl %ax,%eax
  80042130f9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042130fd:	77 0c                	ja     800421310b <_dwarf_frame_run_inst+0x981>
  80042130ff:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213106:	e9 58 04 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 1;
  800421310b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421310f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213113:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213117:	48 89 d0             	mov    %rdx,%rax
  800421311a:	48 01 c0             	add    %rax,%rax
  800421311d:	48 01 d0             	add    %rdx,%rax
  8004213120:	48 c1 e0 03          	shl    $0x3,%rax
  8004213124:	48 01 c8             	add    %rcx,%rax
  8004213127:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  800421312a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421312e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213132:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213136:	48 89 d0             	mov    %rdx,%rax
  8004213139:	48 01 c0             	add    %rax,%rax
  800421313c:	48 01 d0             	add    %rdx,%rax
  800421313f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213143:	48 01 c8             	add    %rcx,%rax
  8004213146:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  800421314a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421314e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213152:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213156:	48 89 d0             	mov    %rdx,%rax
  8004213159:	48 01 c0             	add    %rax,%rax
  800421315c:	48 01 d0             	add    %rdx,%rax
  800421315f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213163:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213167:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421316b:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421316f:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213173:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213177:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421317b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421317f:	48 89 d0             	mov    %rdx,%rax
  8004213182:	48 01 c0             	add    %rax,%rax
  8004213185:	48 01 d0             	add    %rdx,%rax
  8004213188:	48 c1 e0 03          	shl    $0x3,%rax
  800421318c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213190:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213197:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  800421319c:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042131a0:	e9 a4 03 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  80042131a5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042131a9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042131ad:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042131b0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131b4:	48 89 c7             	mov    %rax,%rdi
  80042131b7:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  80042131be:	00 00 00 
  80042131c1:	ff d0                	callq  *%rax
  80042131c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  80042131c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131cb:	48 89 c7             	mov    %rax,%rdi
  80042131ce:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  80042131d5:	00 00 00 
  80042131d8:	ff d0                	callq  *%rax
  80042131da:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  80042131de:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131e2:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042131e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131e9:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042131ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131f1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042131f5:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  80042131f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131fd:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213204:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213209:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  800421320d:	e9 37 03 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213212:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213216:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421321a:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  800421321d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213221:	48 89 c7             	mov    %rax,%rdi
  8004213224:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  800421322b:	00 00 00 
  800421322e:	ff d0                	callq  *%rax
  8004213230:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213234:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213238:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800421323b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421323f:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213243:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213247:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421324e:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213253:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213257:	e9 ed 02 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_val_offset:
			*row_pc = pc;
  800421325c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213260:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213264:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213267:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421326b:	48 89 c7             	mov    %rax,%rdi
  800421326e:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004213275:	00 00 00 
  8004213278:	ff d0                	callq  *%rax
  800421327a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421327e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213282:	48 89 c7             	mov    %rax,%rdi
  8004213285:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  800421328c:	00 00 00 
  800421328f:	ff d0                	callq  *%rax
  8004213291:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213295:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213299:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421329d:	0f b7 c0             	movzwl %ax,%eax
  80042132a0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042132a4:	77 0c                	ja     80042132b2 <_dwarf_frame_run_inst+0xb28>
  80042132a6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042132ad:	e9 b1 02 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 1;
  80042132b2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132b6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132be:	48 89 d0             	mov    %rdx,%rax
  80042132c1:	48 01 c0             	add    %rax,%rax
  80042132c4:	48 01 d0             	add    %rdx,%rax
  80042132c7:	48 c1 e0 03          	shl    $0x3,%rax
  80042132cb:	48 01 c8             	add    %rcx,%rax
  80042132ce:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042132d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132d5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132dd:	48 89 d0             	mov    %rdx,%rax
  80042132e0:	48 01 c0             	add    %rax,%rax
  80042132e3:	48 01 d0             	add    %rdx,%rax
  80042132e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042132ea:	48 01 c8             	add    %rcx,%rax
  80042132ed:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042132f1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042132f5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042132f9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042132fd:	48 89 d0             	mov    %rdx,%rax
  8004213300:	48 01 c0             	add    %rax,%rax
  8004213303:	48 01 d0             	add    %rdx,%rax
  8004213306:	48 c1 e0 03          	shl    $0x3,%rax
  800421330a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421330e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213312:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213316:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800421331a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421331e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213322:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213326:	48 89 d0             	mov    %rdx,%rax
  8004213329:	48 01 c0             	add    %rax,%rax
  800421332c:	48 01 d0             	add    %rdx,%rax
  800421332f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213333:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213337:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421333e:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213343:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213347:	e9 fd 01 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  800421334c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213350:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213354:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213357:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421335b:	48 89 c7             	mov    %rax,%rdi
  800421335e:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004213365:	00 00 00 
  8004213368:	ff d0                	callq  *%rax
  800421336a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  800421336e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213372:	48 89 c7             	mov    %rax,%rdi
  8004213375:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  800421337c:	00 00 00 
  800421337f:	ff d0                	callq  *%rax
  8004213381:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213385:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213389:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421338d:	0f b7 c0             	movzwl %ax,%eax
  8004213390:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213394:	77 0c                	ja     80042133a2 <_dwarf_frame_run_inst+0xc18>
  8004213396:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421339d:	e9 c1 01 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 1;
  80042133a2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133a6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133aa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133ae:	48 89 d0             	mov    %rdx,%rax
  80042133b1:	48 01 c0             	add    %rax,%rax
  80042133b4:	48 01 d0             	add    %rdx,%rax
  80042133b7:	48 c1 e0 03          	shl    $0x3,%rax
  80042133bb:	48 01 c8             	add    %rcx,%rax
  80042133be:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  80042133c1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133c5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133cd:	48 89 d0             	mov    %rdx,%rax
  80042133d0:	48 01 c0             	add    %rax,%rax
  80042133d3:	48 01 d0             	add    %rdx,%rax
  80042133d6:	48 c1 e0 03          	shl    $0x3,%rax
  80042133da:	48 01 c8             	add    %rcx,%rax
  80042133dd:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042133e1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133e5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133ed:	48 89 d0             	mov    %rdx,%rax
  80042133f0:	48 01 c0             	add    %rax,%rax
  80042133f3:	48 01 d0             	add    %rdx,%rax
  80042133f6:	48 c1 e0 03          	shl    $0x3,%rax
  80042133fa:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042133fe:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213402:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213406:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  800421340a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421340e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213412:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213416:	48 89 d0             	mov    %rdx,%rax
  8004213419:	48 01 c0             	add    %rax,%rax
  800421341c:	48 01 d0             	add    %rdx,%rax
  800421341f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213423:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213427:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421342e:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213433:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213437:	e9 0d 01 00 00       	jmpq   8004213549 <_dwarf_frame_run_inst+0xdbf>
		case DW_CFA_val_expression:
			*row_pc = pc;
  800421343c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213440:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213444:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213447:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421344b:	48 89 c7             	mov    %rax,%rdi
  800421344e:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004213455:	00 00 00 
  8004213458:	ff d0                	callq  *%rax
  800421345a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421345e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213462:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213466:	0f b7 c0             	movzwl %ax,%eax
  8004213469:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421346d:	77 0c                	ja     800421347b <_dwarf_frame_run_inst+0xcf1>
  800421346f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213476:	e9 e8 00 00 00       	jmpq   8004213563 <_dwarf_frame_run_inst+0xdd9>
			RL[reg].dw_offset_relevant = 0;
  800421347b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421347f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213483:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213487:	48 89 d0             	mov    %rdx,%rax
  800421348a:	48 01 c0             	add    %rax,%rax
  800421348d:	48 01 d0             	add    %rdx,%rax
  8004213490:	48 c1 e0 03          	shl    $0x3,%rax
  8004213494:	48 01 c8             	add    %rcx,%rax
  8004213497:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  800421349a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421349e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134a2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134a6:	48 89 d0             	mov    %rdx,%rax
  80042134a9:	48 01 c0             	add    %rax,%rax
  80042134ac:	48 01 d0             	add    %rdx,%rax
  80042134af:	48 c1 e0 03          	shl    $0x3,%rax
  80042134b3:	48 01 c8             	add    %rcx,%rax
  80042134b6:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042134ba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134be:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134c2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134c6:	48 89 d0             	mov    %rdx,%rax
  80042134c9:	48 01 c0             	add    %rax,%rax
  80042134cc:	48 01 d0             	add    %rdx,%rax
  80042134cf:	48 c1 e0 03          	shl    $0x3,%rax
  80042134d3:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042134d7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042134db:	48 89 c7             	mov    %rax,%rdi
  80042134de:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  80042134e5:	00 00 00 
  80042134e8:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  80042134ea:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  80042134ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134f2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134fa:	48 89 d0             	mov    %rdx,%rax
  80042134fd:	48 01 c0             	add    %rax,%rax
  8004213500:	48 01 d0             	add    %rdx,%rax
  8004213503:	48 c1 e0 03          	shl    $0x3,%rax
  8004213507:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421350b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421350f:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213513:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213517:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421351b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421351f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213523:	48 89 d0             	mov    %rdx,%rax
  8004213526:	48 01 c0             	add    %rax,%rax
  8004213529:	48 01 d0             	add    %rdx,%rax
  800421352c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213530:	48 01 f0             	add    %rsi,%rax
  8004213533:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213537:	48 01 c8             	add    %rcx,%rax
  800421353a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421353e:	eb 09                	jmp    8004213549 <_dwarf_frame_run_inst+0xdbf>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213540:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004213547:	eb 1a                	jmp    8004213563 <_dwarf_frame_run_inst+0xdd9>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004213549:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421354d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213551:	0f 82 ba f2 ff ff    	jb     8004212811 <_dwarf_frame_run_inst+0x87>
  8004213557:	eb 0a                	jmp    8004213563 <_dwarf_frame_run_inst+0xdd9>

		switch (low6) {
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
			if (pc_req < pc)
			        goto program_done;
  8004213559:	90                   	nop
  800421355a:	eb 07                	jmp    8004213563 <_dwarf_frame_run_inst+0xdd9>
			break;
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
			if (pc_req < pc)
			        goto program_done;
  800421355c:	90                   	nop
  800421355d:	eb 04                	jmp    8004213563 <_dwarf_frame_run_inst+0xdd9>
			break;
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
			if (pc_req < pc)
			        goto program_done;
  800421355f:	90                   	nop
  8004213560:	eb 01                	jmp    8004213563 <_dwarf_frame_run_inst+0xdd9>
			break;
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
			if (pc_req < pc)
			        goto program_done;
  8004213562:	90                   	nop
			goto program_done;
		}
	}

program_done:
	return (ret);
  8004213563:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213566:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  800421356d:	5b                   	pop    %rbx
  800421356e:	5d                   	pop    %rbp
  800421356f:	c3                   	retq   

0000008004213570 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004213570:	55                   	push   %rbp
  8004213571:	48 89 e5             	mov    %rsp,%rbp
  8004213574:	48 83 ec 60          	sub    $0x60,%rsp
  8004213578:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421357c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213580:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213584:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213588:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  800421358c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004213590:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213595:	75 35                	jne    80042135cc <_dwarf_frame_get_internal_table+0x5c>
  8004213597:	48 b9 98 b0 21 04 80 	movabs $0x800421b098,%rcx
  800421359e:	00 00 00 
  80042135a1:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  80042135a8:	00 00 00 
  80042135ab:	be 83 01 00 00       	mov    $0x183,%esi
  80042135b0:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  80042135b7:	00 00 00 
  80042135ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042135bf:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042135c6:	00 00 00 
  80042135c9:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042135cc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042135d1:	75 35                	jne    8004213608 <_dwarf_frame_get_internal_table+0x98>
  80042135d3:	48 b9 a7 b0 21 04 80 	movabs $0x800421b0a7,%rcx
  80042135da:	00 00 00 
  80042135dd:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  80042135e4:	00 00 00 
  80042135e7:	be 86 01 00 00       	mov    $0x186,%esi
  80042135ec:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  80042135f3:	00 00 00 
  80042135f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042135fb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004213602:	00 00 00 
  8004213605:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  8004213608:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421360c:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213610:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004213614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213618:	ba 18 00 00 00       	mov    $0x18,%edx
  800421361d:	be 00 00 00 00       	mov    $0x0,%esi
  8004213622:	48 89 c7             	mov    %rax,%rdi
  8004213625:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  800421362c:	00 00 00 
  800421362f:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004213631:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213635:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213639:	0f b7 d0             	movzwl %ax,%edx
  800421363c:	48 89 d0             	mov    %rdx,%rax
  800421363f:	48 01 c0             	add    %rax,%rax
  8004213642:	48 01 d0             	add    %rdx,%rax
  8004213645:	48 c1 e0 03          	shl    $0x3,%rax
  8004213649:	48 89 c2             	mov    %rax,%rdx
  800421364c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213650:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213654:	be 00 00 00 00       	mov    $0x0,%esi
  8004213659:	48 89 c7             	mov    %rax,%rdi
  800421365c:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  8004213663:	00 00 00 
  8004213666:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213668:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421366f:	eb 2f                	jmp    80042136a0 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004213671:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213675:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213679:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421367c:	48 63 d0             	movslq %eax,%rdx
  800421367f:	48 89 d0             	mov    %rdx,%rax
  8004213682:	48 01 c0             	add    %rax,%rax
  8004213685:	48 01 d0             	add    %rdx,%rax
  8004213688:	48 c1 e0 03          	shl    $0x3,%rax
  800421368c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213690:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213694:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213698:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421369c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042136a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042136a4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042136a8:	0f b7 c0             	movzwl %ax,%eax
  80042136ab:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042136ae:	7f c1                	jg     8004213671 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  80042136b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136b4:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042136b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  80042136bc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042136c1:	75 35                	jne    80042136f8 <_dwarf_frame_get_internal_table+0x188>
  80042136c3:	48 b9 b3 b0 21 04 80 	movabs $0x800421b0b3,%rcx
  80042136ca:	00 00 00 
  80042136cd:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  80042136d4:	00 00 00 
  80042136d7:	be 95 01 00 00       	mov    $0x195,%esi
  80042136dc:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  80042136e3:	00 00 00 
  80042136e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042136eb:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042136f2:	00 00 00 
  80042136f5:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042136f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042136fc:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004213700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213704:	4c 8b 40 38          	mov    0x38(%rax),%r8
  8004213708:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421370c:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004213710:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213714:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004213718:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421371c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213720:	ff 75 a0             	pushq  -0x60(%rbp)
  8004213723:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004213727:	57                   	push   %rdi
  8004213728:	6a ff                	pushq  $0xffffffffffffffff
  800421372a:	6a 00                	pushq  $0x0
  800421372c:	48 89 c7             	mov    %rax,%rdi
  800421372f:	48 b8 8a 27 21 04 80 	movabs $0x800421278a,%rax
  8004213736:	00 00 00 
  8004213739:	ff d0                	callq  *%rax
  800421373b:	48 83 c4 20          	add    $0x20,%rsp
  800421373f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004213742:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213746:	74 08                	je     8004213750 <_dwarf_frame_get_internal_table+0x1e0>
		return (ret);
  8004213748:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421374b:	e9 8a 00 00 00       	jmpq   80042137da <_dwarf_frame_get_internal_table+0x26a>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004213750:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213754:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213758:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  800421375c:	77 61                	ja     80042137bf <_dwarf_frame_get_internal_table+0x24f>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  800421375e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213762:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004213766:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421376a:	4c 8b 48 40          	mov    0x40(%rax),%r9
  800421376e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213772:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004213776:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421377a:	48 8b 48 58          	mov    0x58(%rax),%rcx
  800421377e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213782:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004213786:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421378a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421378e:	ff 75 a0             	pushq  -0x60(%rbp)
  8004213791:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  8004213795:	41 50                	push   %r8
  8004213797:	ff 75 b8             	pushq  -0x48(%rbp)
  800421379a:	57                   	push   %rdi
  800421379b:	4d 89 d0             	mov    %r10,%r8
  800421379e:	48 89 c7             	mov    %rax,%rdi
  80042137a1:	48 b8 8a 27 21 04 80 	movabs $0x800421278a,%rax
  80042137a8:	00 00 00 
  80042137ab:	ff d0                	callq  *%rax
  80042137ad:	48 83 c4 20          	add    $0x20,%rsp
  80042137b1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042137b4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042137b8:	74 05                	je     80042137bf <_dwarf_frame_get_internal_table+0x24f>
			return (ret);
  80042137ba:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042137bd:	eb 1b                	jmp    80042137da <_dwarf_frame_get_internal_table+0x26a>
	}

	*ret_rt = rt;
  80042137bf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042137c3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042137c7:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042137ca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042137ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042137d2:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042137d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042137da:	c9                   	leaveq 
  80042137db:	c3                   	retq   

00000080042137dc <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  80042137dc:	55                   	push   %rbp
  80042137dd:	48 89 e5             	mov    %rsp,%rbp
  80042137e0:	48 83 ec 50          	sub    $0x50,%rsp
  80042137e4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042137e8:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042137ec:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042137f0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042137f4:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  80042137f8:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  80042137fc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004213801:	74 07                	je     800421380a <dwarf_get_fde_info_for_all_regs+0x2e>
  8004213803:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004213808:	75 0a                	jne    8004213814 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421380a:	b8 01 00 00 00       	mov    $0x1,%eax
  800421380f:	e9 f9 02 00 00       	jmpq   8004213b0d <dwarf_get_fde_info_for_all_regs+0x331>
	}

	assert(dbg != NULL);
  8004213814:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004213819:	75 35                	jne    8004213850 <dwarf_get_fde_info_for_all_regs+0x74>
  800421381b:	48 b9 a7 b0 21 04 80 	movabs $0x800421b0a7,%rcx
  8004213822:	00 00 00 
  8004213825:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  800421382c:	00 00 00 
  800421382f:	be bf 01 00 00       	mov    $0x1bf,%esi
  8004213834:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  800421383b:	00 00 00 
  800421383e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213843:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421384a:	00 00 00 
  800421384d:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004213850:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213854:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213858:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421385c:	77 19                	ja     8004213877 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800421385e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213862:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213866:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421386a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421386e:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004213871:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004213875:	77 0a                	ja     8004213881 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004213877:	b8 01 00 00 00       	mov    $0x1,%eax
  800421387c:	e9 8c 02 00 00       	jmpq   8004213b0d <dwarf_get_fde_info_for_all_regs+0x331>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004213881:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004213885:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004213889:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421388d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213891:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213895:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213899:	4d 89 c1             	mov    %r8,%r9
  800421389c:	49 89 f8             	mov    %rdi,%r8
  800421389f:	48 89 c7             	mov    %rax,%rdi
  80042138a2:	48 b8 70 35 21 04 80 	movabs $0x8004213570,%rax
  80042138a9:	00 00 00 
  80042138ac:	ff d0                	callq  *%rax
  80042138ae:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042138b1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042138b5:	74 0a                	je     80042138c1 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042138b7:	b8 01 00 00 00       	mov    $0x1,%eax
  80042138bc:	e9 4c 02 00 00       	jmpq   8004213b0d <dwarf_get_fde_info_for_all_regs+0x331>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042138c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042138c5:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042138c9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042138cd:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042138d2:	0f 87 b7 00 00 00    	ja     800421398f <dwarf_get_fde_info_for_all_regs+0x1b3>
		reg_table->rules[cfa].dw_offset_relevant =
  80042138d8:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  80042138dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138e0:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  80042138e3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042138e7:	48 63 c9             	movslq %ecx,%rcx
  80042138ea:	48 83 c1 01          	add    $0x1,%rcx
  80042138ee:	48 c1 e1 04          	shl    $0x4,%rcx
  80042138f2:	48 01 ca             	add    %rcx,%rdx
  80042138f5:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  80042138f7:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042138fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042138ff:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004213903:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213907:	48 63 c9             	movslq %ecx,%rcx
  800421390a:	48 83 c1 01          	add    $0x1,%rcx
  800421390e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213912:	48 01 ca             	add    %rcx,%rdx
  8004213915:	48 83 c2 01          	add    $0x1,%rdx
  8004213919:	88 02                	mov    %al,(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  800421391b:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  800421391f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213923:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213927:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421392b:	48 63 c9             	movslq %ecx,%rcx
  800421392e:	48 83 c1 01          	add    $0x1,%rcx
  8004213932:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213936:	48 01 ca             	add    %rcx,%rdx
  8004213939:	48 83 c2 02          	add    $0x2,%rdx
  800421393d:	66 89 02             	mov    %ax,(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004213940:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004213944:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213948:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421394c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213950:	48 63 c9             	movslq %ecx,%rcx
  8004213953:	48 83 c1 01          	add    $0x1,%rcx
  8004213957:	48 c1 e1 04          	shl    $0x4,%rcx
  800421395b:	48 01 ca             	add    %rcx,%rdx
  800421395e:	48 83 c2 08          	add    $0x8,%rdx
  8004213962:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004213965:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004213969:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421396d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213971:	48 63 d2             	movslq %edx,%rdx
  8004213974:	48 83 c2 01          	add    $0x1,%rdx
  8004213978:	48 c1 e2 04          	shl    $0x4,%rdx
  800421397c:	48 01 d0             	add    %rdx,%rax
  800421397f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004213983:	48 8b 00             	mov    (%rax),%rax
  8004213986:	48 89 01             	mov    %rax,(%rcx)
  8004213989:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  800421398d:	eb 3c                	jmp    80042139cb <dwarf_get_fde_info_for_all_regs+0x1ef>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  800421398f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213993:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  8004213996:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421399a:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  800421399c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139a0:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042139a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042139a8:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042139ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139af:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042139b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042139b7:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042139bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139bf:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042139c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042139c7:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042139cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042139d2:	e9 05 01 00 00       	jmpq   8004213adc <dwarf_get_fde_info_for_all_regs+0x300>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042139d7:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042139db:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042139de:	0f 84 f3 00 00 00    	je     8004213ad7 <dwarf_get_fde_info_for_all_regs+0x2fb>
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  80042139e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042139e8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042139ef:	48 63 d0             	movslq %eax,%rdx
  80042139f2:	48 89 d0             	mov    %rdx,%rax
  80042139f5:	48 01 c0             	add    %rax,%rax
  80042139f8:	48 01 d0             	add    %rdx,%rax
  80042139fb:	48 c1 e0 03          	shl    $0x3,%rax
  80042139ff:	48 01 c8             	add    %rcx,%rax
  8004213a02:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  8004213a05:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213a09:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a0c:	48 63 c9             	movslq %ecx,%rcx
  8004213a0f:	48 83 c1 01          	add    $0x1,%rcx
  8004213a13:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a17:	48 01 ca             	add    %rcx,%rdx
  8004213a1a:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  8004213a1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a20:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a24:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213a27:	48 63 d0             	movslq %eax,%rdx
  8004213a2a:	48 89 d0             	mov    %rdx,%rax
  8004213a2d:	48 01 c0             	add    %rax,%rax
  8004213a30:	48 01 d0             	add    %rdx,%rax
  8004213a33:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a37:	48 01 c8             	add    %rcx,%rax
  8004213a3a:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004213a3e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213a42:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a45:	48 63 c9             	movslq %ecx,%rcx
  8004213a48:	48 83 c1 01          	add    $0x1,%rcx
  8004213a4c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a50:	48 01 ca             	add    %rcx,%rdx
  8004213a53:	48 83 c2 01          	add    $0x1,%rdx
  8004213a57:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004213a59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a5d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a61:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213a64:	48 63 d0             	movslq %eax,%rdx
  8004213a67:	48 89 d0             	mov    %rdx,%rax
  8004213a6a:	48 01 c0             	add    %rax,%rax
  8004213a6d:	48 01 d0             	add    %rdx,%rax
  8004213a70:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a74:	48 01 c8             	add    %rcx,%rax
  8004213a77:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004213a7b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213a7f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213a82:	48 63 c9             	movslq %ecx,%rcx
  8004213a85:	48 83 c1 01          	add    $0x1,%rcx
  8004213a89:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213a8d:	48 01 ca             	add    %rcx,%rdx
  8004213a90:	48 83 c2 02          	add    $0x2,%rdx
  8004213a94:	66 89 02             	mov    %ax,(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004213a97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213a9b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a9f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213aa2:	48 63 d0             	movslq %eax,%rdx
  8004213aa5:	48 89 d0             	mov    %rdx,%rax
  8004213aa8:	48 01 c0             	add    %rax,%rax
  8004213aab:	48 01 d0             	add    %rdx,%rax
  8004213aae:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ab2:	48 01 c8             	add    %rcx,%rax
  8004213ab5:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  8004213ab9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004213abd:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004213ac0:	48 63 c9             	movslq %ecx,%rcx
  8004213ac3:	48 83 c1 01          	add    $0x1,%rcx
  8004213ac7:	48 c1 e1 04          	shl    $0x4,%rcx
  8004213acb:	48 01 ca             	add    %rcx,%rdx
  8004213ace:	48 83 c2 08          	add    $0x8,%rdx
  8004213ad2:	48 89 02             	mov    %rax,(%rdx)
  8004213ad5:	eb 01                	jmp    8004213ad8 <dwarf_get_fde_info_for_all_regs+0x2fc>
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;
  8004213ad7:	90                   	nop

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  8004213ad8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004213adc:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004213ae0:	7f 14                	jg     8004213af6 <dwarf_get_fde_info_for_all_regs+0x31a>
  8004213ae2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213ae6:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004213aea:	0f b7 c0             	movzwl %ax,%eax
  8004213aed:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213af0:	0f 8f e1 fe ff ff    	jg     80042139d7 <dwarf_get_fde_info_for_all_regs+0x1fb>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  8004213af6:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004213afb:	74 0b                	je     8004213b08 <dwarf_get_fde_info_for_all_regs+0x32c>
  8004213afd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004213b01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213b05:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004213b08:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213b0d:	c9                   	leaveq 
  8004213b0e:	c3                   	retq   

0000008004213b0f <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004213b0f:	55                   	push   %rbp
  8004213b10:	48 89 e5             	mov    %rsp,%rbp
  8004213b13:	48 83 ec 40          	sub    $0x40,%rsp
  8004213b17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213b1b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213b1f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004213b23:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213b27:	44 89 c0             	mov    %r8d,%eax
  8004213b2a:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004213b2e:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  8004213b31:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  8004213b35:	75 0a                	jne    8004213b41 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004213b37:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213b3c:	e9 f8 01 00 00       	jmpq   8004213d39 <_dwarf_frame_read_lsb_encoded+0x22a>

	application = encode & 0xf0;
  8004213b41:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213b45:	83 e0 f0             	and    $0xfffffff0,%eax
  8004213b48:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004213b4b:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004213b4f:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213b53:	83 f8 0c             	cmp    $0xc,%eax
  8004213b56:	0f 87 84 01 00 00    	ja     8004213ce0 <_dwarf_frame_read_lsb_encoded+0x1d1>
  8004213b5c:	89 c0                	mov    %eax,%eax
  8004213b5e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213b65:	00 
  8004213b66:	48 b8 c0 b0 21 04 80 	movabs $0x800421b0c0,%rax
  8004213b6d:	00 00 00 
  8004213b70:	48 01 d0             	add    %rdx,%rax
  8004213b73:	48 8b 00             	mov    (%rax),%rax
  8004213b76:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004213b78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213b7c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213b80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004213b84:	8b 52 28             	mov    0x28(%rdx),%edx
  8004213b87:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213b8b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213b8f:	48 89 cf             	mov    %rcx,%rdi
  8004213b92:	ff d0                	callq  *%rax
  8004213b94:	48 89 c2             	mov    %rax,%rdx
  8004213b97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213b9b:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213b9e:	e9 44 01 00 00       	jmpq   8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004213ba3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ba7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213bab:	48 89 d6             	mov    %rdx,%rsi
  8004213bae:	48 89 c7             	mov    %rax,%rdi
  8004213bb1:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  8004213bb8:	00 00 00 
  8004213bbb:	ff d0                	callq  *%rax
  8004213bbd:	48 89 c2             	mov    %rax,%rdx
  8004213bc0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bc4:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213bc7:	e9 1b 01 00 00       	jmpq   8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004213bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213bd0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213bd4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213bd8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213bdc:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213be1:	48 89 cf             	mov    %rcx,%rdi
  8004213be4:	ff d0                	callq  *%rax
  8004213be6:	48 89 c2             	mov    %rax,%rdx
  8004213be9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213bed:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213bf0:	e9 f2 00 00 00       	jmpq   8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004213bf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213bf9:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213bfd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213c01:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213c05:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213c0a:	48 89 cf             	mov    %rcx,%rdi
  8004213c0d:	ff d0                	callq  *%rax
  8004213c0f:	48 89 c2             	mov    %rax,%rdx
  8004213c12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c16:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c19:	e9 c9 00 00 00       	jmpq   8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  8004213c1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c22:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213c26:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213c2a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213c2e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213c33:	48 89 cf             	mov    %rcx,%rdi
  8004213c36:	ff d0                	callq  *%rax
  8004213c38:	48 89 c2             	mov    %rax,%rdx
  8004213c3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c3f:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c42:	e9 a0 00 00 00       	jmpq   8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004213c47:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213c4f:	48 89 d6             	mov    %rdx,%rsi
  8004213c52:	48 89 c7             	mov    %rax,%rdi
  8004213c55:	48 b8 cf 0b 21 04 80 	movabs $0x8004210bcf,%rax
  8004213c5c:	00 00 00 
  8004213c5f:	ff d0                	callq  *%rax
  8004213c61:	48 89 c2             	mov    %rax,%rdx
  8004213c64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c68:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c6b:	eb 7a                	jmp    8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004213c6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c71:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213c75:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213c79:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213c7d:	ba 02 00 00 00       	mov    $0x2,%edx
  8004213c82:	48 89 cf             	mov    %rcx,%rdi
  8004213c85:	ff d0                	callq  *%rax
  8004213c87:	48 0f bf d0          	movswq %ax,%rdx
  8004213c8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213c8f:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213c92:	eb 53                	jmp    8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004213c94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213c98:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213c9c:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213ca0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213ca4:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213ca9:	48 89 cf             	mov    %rcx,%rdi
  8004213cac:	ff d0                	callq  *%rax
  8004213cae:	48 63 d0             	movslq %eax,%rdx
  8004213cb1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213cb5:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213cb8:	eb 2d                	jmp    8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004213cba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213cbe:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213cc2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004213cc6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004213cca:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213ccf:	48 89 cf             	mov    %rcx,%rdi
  8004213cd2:	ff d0                	callq  *%rax
  8004213cd4:	48 89 c2             	mov    %rax,%rdx
  8004213cd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213cdb:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004213cde:	eb 07                	jmp    8004213ce7 <_dwarf_frame_read_lsb_encoded+0x1d8>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213ce0:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213ce5:	eb 52                	jmp    8004213d39 <_dwarf_frame_read_lsb_encoded+0x22a>
	}

	if (application == DW_EH_PE_pcrel) {
  8004213ce7:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  8004213ceb:	75 47                	jne    8004213d34 <_dwarf_frame_read_lsb_encoded+0x225>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  8004213ced:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004213cf1:	83 f8 01             	cmp    $0x1,%eax
  8004213cf4:	7c 3d                	jl     8004213d33 <_dwarf_frame_read_lsb_encoded+0x224>
  8004213cf6:	83 f8 04             	cmp    $0x4,%eax
  8004213cf9:	7e 0a                	jle    8004213d05 <_dwarf_frame_read_lsb_encoded+0x1f6>
  8004213cfb:	83 e8 09             	sub    $0x9,%eax
  8004213cfe:	83 f8 03             	cmp    $0x3,%eax
  8004213d01:	77 30                	ja     8004213d33 <_dwarf_frame_read_lsb_encoded+0x224>
  8004213d03:	eb 17                	jmp    8004213d1c <_dwarf_frame_read_lsb_encoded+0x20d>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004213d05:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213d09:	48 8b 10             	mov    (%rax),%rdx
  8004213d0c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d10:	48 01 c2             	add    %rax,%rdx
  8004213d13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213d17:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213d1a:	eb 18                	jmp    8004213d34 <_dwarf_frame_read_lsb_encoded+0x225>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004213d1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213d20:	48 8b 10             	mov    (%rax),%rdx
  8004213d23:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d27:	48 01 c2             	add    %rax,%rdx
  8004213d2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004213d2e:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004213d31:	eb 01                	jmp    8004213d34 <_dwarf_frame_read_lsb_encoded+0x225>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  8004213d33:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  8004213d34:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213d39:	c9                   	leaveq 
  8004213d3a:	c3                   	retq   

0000008004213d3b <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004213d3b:	55                   	push   %rbp
  8004213d3c:	48 89 e5             	mov    %rsp,%rbp
  8004213d3f:	48 83 ec 50          	sub    $0x50,%rsp
  8004213d43:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213d47:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213d4b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004213d4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d53:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213d57:	48 85 c0             	test   %rax,%rax
  8004213d5a:	74 0f                	je     8004213d6b <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004213d5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213d60:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213d64:	0f b6 00             	movzbl (%rax),%eax
  8004213d67:	3c 7a                	cmp    $0x7a,%al
  8004213d69:	74 35                	je     8004213da0 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004213d6b:	48 b9 28 b1 21 04 80 	movabs $0x800421b128,%rcx
  8004213d72:	00 00 00 
  8004213d75:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  8004213d7c:	00 00 00 
  8004213d7f:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004213d84:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  8004213d8b:	00 00 00 
  8004213d8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213d93:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004213d9a:	00 00 00 
  8004213d9d:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004213da0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213da4:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004213da8:	48 83 c0 01          	add    $0x1,%rax
  8004213dac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004213db0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213db4:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213db8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004213dbc:	e9 b4 00 00 00       	jmpq   8004213e75 <_dwarf_frame_parse_lsb_cie_augment+0x13a>
		switch (*aug_p) {
  8004213dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213dc5:	0f b6 00             	movzbl (%rax),%eax
  8004213dc8:	0f b6 c0             	movzbl %al,%eax
  8004213dcb:	83 f8 50             	cmp    $0x50,%eax
  8004213dce:	74 18                	je     8004213de8 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004213dd0:	83 f8 52             	cmp    $0x52,%eax
  8004213dd3:	74 7c                	je     8004213e51 <_dwarf_frame_parse_lsb_cie_augment+0x116>
  8004213dd5:	83 f8 4c             	cmp    $0x4c,%eax
  8004213dd8:	0f 85 8b 00 00 00    	jne    8004213e69 <_dwarf_frame_parse_lsb_cie_augment+0x12e>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  8004213dde:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004213de3:	e9 88 00 00 00       	jmpq   8004213e70 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004213de8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213dec:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213df0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213df4:	0f b6 00             	movzbl (%rax),%eax
  8004213df7:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004213dfa:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004213e01:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004213e02:	0f b6 7d ef          	movzbl -0x11(%rbp),%edi
  8004213e06:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004213e0a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004213e0e:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  8004213e12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e16:	48 83 ec 08          	sub    $0x8,%rsp
  8004213e1a:	ff 75 b8             	pushq  -0x48(%rbp)
  8004213e1d:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004213e23:	41 89 f8             	mov    %edi,%r8d
  8004213e26:	48 89 c7             	mov    %rax,%rdi
  8004213e29:	48 b8 0f 3b 21 04 80 	movabs $0x8004213b0f,%rax
  8004213e30:	00 00 00 
  8004213e33:	ff d0                	callq  *%rax
  8004213e35:	48 83 c4 10          	add    $0x10,%rsp
  8004213e39:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  8004213e3c:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004213e40:	74 05                	je     8004213e47 <_dwarf_frame_parse_lsb_cie_augment+0x10c>
				return (ret);
  8004213e42:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004213e45:	eb 42                	jmp    8004213e89 <_dwarf_frame_parse_lsb_cie_augment+0x14e>
			augdata_p += offset;
  8004213e47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213e4b:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004213e4f:	eb 1f                	jmp    8004213e70 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004213e51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213e55:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004213e59:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004213e5d:	0f b6 10             	movzbl (%rax),%edx
  8004213e60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213e64:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  8004213e67:	eb 07                	jmp    8004213e70 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004213e69:	b8 14 00 00 00       	mov    $0x14,%eax
  8004213e6e:	eb 19                	jmp    8004213e89 <_dwarf_frame_parse_lsb_cie_augment+0x14e>
		}
		aug_p++;
  8004213e70:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004213e75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213e79:	0f b6 00             	movzbl (%rax),%eax
  8004213e7c:	84 c0                	test   %al,%al
  8004213e7e:	0f 85 3d ff ff ff    	jne    8004213dc1 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004213e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213e89:	c9                   	leaveq 
  8004213e8a:	c3                   	retq   

0000008004213e8b <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004213e8b:	55                   	push   %rbp
  8004213e8c:	48 89 e5             	mov    %rsp,%rbp
  8004213e8f:	48 83 ec 60          	sub    $0x60,%rsp
  8004213e93:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213e97:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213e9b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213e9f:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213ea3:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004213ea7:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213eac:	75 35                	jne    8004213ee3 <_dwarf_frame_set_cie+0x58>
  8004213eae:	48 b9 5d b1 21 04 80 	movabs $0x800421b15d,%rcx
  8004213eb5:	00 00 00 
  8004213eb8:	48 ba a7 af 21 04 80 	movabs $0x800421afa7,%rdx
  8004213ebf:	00 00 00 
  8004213ec2:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004213ec7:	48 bf bc af 21 04 80 	movabs $0x800421afbc,%rdi
  8004213ece:	00 00 00 
  8004213ed1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213ed6:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004213edd:	00 00 00 
  8004213ee0:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  8004213ee3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213ee7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004213eeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213eef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213ef3:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004213ef6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213efa:	48 8b 10             	mov    (%rax),%rdx
  8004213efd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f01:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004213f05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f09:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f0d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213f11:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213f15:	48 89 d7             	mov    %rdx,%rdi
  8004213f18:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  8004213f1c:	ba 04 00 00 00       	mov    $0x4,%edx
  8004213f21:	48 89 ce             	mov    %rcx,%rsi
  8004213f24:	ff d0                	callq  *%rax
  8004213f26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004213f2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004213f2f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004213f33:	75 2e                	jne    8004213f63 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004213f35:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004213f3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f40:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f44:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213f48:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213f4c:	48 89 d7             	mov    %rdx,%rdi
  8004213f4f:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  8004213f53:	ba 08 00 00 00       	mov    $0x8,%edx
  8004213f58:	48 89 ce             	mov    %rcx,%rsi
  8004213f5b:	ff d0                	callq  *%rax
  8004213f5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004213f61:	eb 07                	jmp    8004213f6a <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004213f63:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004213f6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f6e:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004213f72:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004213f76:	48 8b 00             	mov    (%rax),%rax
  8004213f79:	48 29 c2             	sub    %rax,%rdx
  8004213f7c:	48 89 d0             	mov    %rdx,%rax
  8004213f7f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004213f83:	73 0a                	jae    8004213f8f <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004213f85:	b8 12 00 00 00       	mov    $0x12,%eax
  8004213f8a:	e9 7e 03 00 00       	jmpq   800421430d <_dwarf_frame_set_cie+0x482>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004213f8f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f93:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213f97:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213f9b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213f9f:	48 89 d7             	mov    %rdx,%rdi
  8004213fa2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004213fa5:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  8004213fa9:	48 89 ce             	mov    %rcx,%rsi
  8004213fac:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004213fae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fb2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004213fb6:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004213fba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213fbe:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004213fc2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213fc6:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004213fca:	48 89 d7             	mov    %rdx,%rdi
  8004213fcd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  8004213fd1:	ba 01 00 00 00       	mov    $0x1,%edx
  8004213fd6:	48 89 ce             	mov    %rcx,%rsi
  8004213fd9:	ff d0                	callq  *%rax
  8004213fdb:	89 c2                	mov    %eax,%edx
  8004213fdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fe1:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004213fe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fe9:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213fed:	66 83 f8 01          	cmp    $0x1,%ax
  8004213ff1:	74 26                	je     8004214019 <_dwarf_frame_set_cie+0x18e>
  8004213ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213ff7:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004213ffb:	66 83 f8 03          	cmp    $0x3,%ax
  8004213fff:	74 18                	je     8004214019 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214005:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214009:	66 83 f8 04          	cmp    $0x4,%ax
  800421400d:	74 0a                	je     8004214019 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  800421400f:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214014:	e9 f4 02 00 00       	jmpq   800421430d <_dwarf_frame_set_cie+0x482>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421401d:	48 8b 10             	mov    (%rax),%rdx
  8004214020:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214024:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214028:	48 01 d0             	add    %rdx,%rax
  800421402b:	48 89 c2             	mov    %rax,%rdx
  800421402e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214032:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214036:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421403a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421403e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214042:	90                   	nop
  8004214043:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214047:	48 8b 00             	mov    (%rax),%rax
  800421404a:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800421404e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214052:	48 89 0a             	mov    %rcx,(%rdx)
  8004214055:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214059:	48 01 d0             	add    %rdx,%rax
  800421405c:	0f b6 00             	movzbl (%rax),%eax
  800421405f:	84 c0                	test   %al,%al
  8004214061:	75 e0                	jne    8004214043 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214067:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421406b:	0f b6 00             	movzbl (%rax),%eax
  800421406e:	84 c0                	test   %al,%al
  8004214070:	74 48                	je     80042140ba <_dwarf_frame_set_cie+0x22f>
  8004214072:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214076:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421407a:	0f b6 00             	movzbl (%rax),%eax
  800421407d:	3c 7a                	cmp    $0x7a,%al
  800421407f:	74 39                	je     80042140ba <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214081:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214085:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004214089:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421408d:	75 07                	jne    8004214096 <_dwarf_frame_set_cie+0x20b>
  800421408f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214094:	eb 05                	jmp    800421409b <_dwarf_frame_set_cie+0x210>
  8004214096:	ba 0c 00 00 00       	mov    $0xc,%edx
  800421409b:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  800421409e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140a2:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  80042140a6:	48 01 c2             	add    %rax,%rdx
  80042140a9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042140ad:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  80042140b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042140b5:	e9 53 02 00 00       	jmpq   800421430d <_dwarf_frame_set_cie+0x482>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  80042140ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042140be:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042140c2:	48 be 65 b1 21 04 80 	movabs $0x800421b165,%rsi
  80042140c9:	00 00 00 
  80042140cc:	48 89 c7             	mov    %rax,%rdi
  80042140cf:	48 b8 86 05 21 04 80 	movabs $0x8004210586,%rax
  80042140d6:	00 00 00 
  80042140d9:	ff d0                	callq  *%rax
  80042140db:	48 85 c0             	test   %rax,%rax
  80042140de:	74 2e                	je     800421410e <_dwarf_frame_set_cie+0x283>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042140e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140e4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042140e8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042140ec:	8b 52 28             	mov    0x28(%rdx),%edx
  80042140ef:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042140f3:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042140f7:	48 89 cf             	mov    %rcx,%rdi
  80042140fa:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  80042140fe:	48 89 ce             	mov    %rcx,%rsi
  8004214101:	ff d0                	callq  *%rax
  8004214103:	48 89 c2             	mov    %rax,%rdx
  8004214106:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421410a:	48 89 50 30          	mov    %rdx,0x30(%rax)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421410e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214112:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214116:	48 89 c2             	mov    %rax,%rdx
  8004214119:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421411d:	48 89 c6             	mov    %rax,%rsi
  8004214120:	48 89 d7             	mov    %rdx,%rdi
  8004214123:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  800421412a:	00 00 00 
  800421412d:	ff d0                	callq  *%rax
  800421412f:	48 89 c2             	mov    %rax,%rdx
  8004214132:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214136:	48 89 50 38          	mov    %rdx,0x38(%rax)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  800421413a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421413e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214142:	48 89 c2             	mov    %rax,%rdx
  8004214145:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214149:	48 89 c6             	mov    %rax,%rsi
  800421414c:	48 89 d7             	mov    %rdx,%rdi
  800421414f:	48 b8 cf 0b 21 04 80 	movabs $0x8004210bcf,%rax
  8004214156:	00 00 00 
  8004214159:	ff d0                	callq  *%rax
  800421415b:	48 89 c2             	mov    %rax,%rdx
  800421415e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214162:	48 89 50 40          	mov    %rdx,0x40(%rax)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421416a:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  800421416e:	66 83 f8 01          	cmp    $0x1,%ax
  8004214172:	75 2e                	jne    80042141a2 <_dwarf_frame_set_cie+0x317>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214174:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214178:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421417c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214180:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214184:	48 89 d7             	mov    %rdx,%rdi
  8004214187:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421418b:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214190:	48 89 ce             	mov    %rcx,%rsi
  8004214193:	ff d0                	callq  *%rax
  8004214195:	48 89 c2             	mov    %rax,%rdx
  8004214198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421419c:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042141a0:	eb 2c                	jmp    80042141ce <_dwarf_frame_set_cie+0x343>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042141a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141a6:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042141aa:	48 89 c2             	mov    %rax,%rdx
  80042141ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141b1:	48 89 c6             	mov    %rax,%rsi
  80042141b4:	48 89 d7             	mov    %rdx,%rdi
  80042141b7:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  80042141be:	00 00 00 
  80042141c1:	ff d0                	callq  *%rax
  80042141c3:	48 89 c2             	mov    %rax,%rdx
  80042141c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141ca:	48 89 50 48          	mov    %rdx,0x48(%rax)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  80042141ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141d2:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042141d6:	0f b6 00             	movzbl (%rax),%eax
  80042141d9:	3c 7a                	cmp    $0x7a,%al
  80042141db:	0f 85 99 00 00 00    	jne    800421427a <_dwarf_frame_set_cie+0x3ef>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042141e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141e5:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042141e9:	48 89 c2             	mov    %rax,%rdx
  80042141ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042141f0:	48 89 c6             	mov    %rax,%rsi
  80042141f3:	48 89 d7             	mov    %rdx,%rdi
  80042141f6:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  80042141fd:	00 00 00 
  8004214200:	ff d0                	callq  *%rax
  8004214202:	48 89 c2             	mov    %rax,%rdx
  8004214205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214209:	48 89 50 50          	mov    %rdx,0x50(%rax)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421420d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214211:	48 8b 10             	mov    (%rax),%rdx
  8004214214:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214218:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421421c:	48 01 d0             	add    %rdx,%rax
  800421421f:	48 89 c2             	mov    %rax,%rdx
  8004214222:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214226:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  800421422a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421422e:	48 8b 10             	mov    (%rax),%rdx
  8004214231:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214235:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214239:	48 01 c2             	add    %rax,%rdx
  800421423c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214240:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214243:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214247:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  800421424b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421424f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214253:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214257:	48 89 ce             	mov    %rcx,%rsi
  800421425a:	48 89 c7             	mov    %rax,%rdi
  800421425d:	48 b8 3b 3d 21 04 80 	movabs $0x8004213d3b,%rax
  8004214264:	00 00 00 
  8004214267:	ff d0                	callq  *%rax
  8004214269:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  800421426c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214270:	74 08                	je     800421427a <_dwarf_frame_set_cie+0x3ef>
			return (ret);
  8004214272:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214275:	e9 93 00 00 00       	jmpq   800421430d <_dwarf_frame_set_cie+0x482>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421427a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421427e:	48 8b 10             	mov    (%rax),%rdx
  8004214281:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214285:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214289:	48 01 d0             	add    %rdx,%rax
  800421428c:	48 89 c2             	mov    %rax,%rdx
  800421428f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214293:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214297:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421429b:	75 2a                	jne    80042142c7 <_dwarf_frame_set_cie+0x43c>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  800421429d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142a1:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042142a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042142a9:	48 01 c2             	add    %rax,%rdx
  80042142ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042142b0:	48 8b 00             	mov    (%rax),%rax
  80042142b3:	48 f7 d8             	neg    %rax
  80042142b6:	48 01 d0             	add    %rdx,%rax
  80042142b9:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042142bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142c1:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042142c5:	eb 28                	jmp    80042142ef <_dwarf_frame_set_cie+0x464>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  80042142c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142cb:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042142cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042142d3:	48 01 c2             	add    %rax,%rdx
  80042142d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042142da:	48 8b 00             	mov    (%rax),%rax
  80042142dd:	48 f7 d8             	neg    %rax
  80042142e0:	48 01 d0             	add    %rdx,%rax
  80042142e3:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042142e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142eb:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  80042142ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042142f3:	48 8b 10             	mov    (%rax),%rdx
  80042142f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142fa:	48 8b 40 70          	mov    0x70(%rax),%rax
  80042142fe:	48 01 c2             	add    %rax,%rdx
  8004214301:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214305:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214308:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421430d:	c9                   	leaveq 
  800421430e:	c3                   	retq   

000000800421430f <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  800421430f:	55                   	push   %rbp
  8004214310:	48 89 e5             	mov    %rsp,%rbp
  8004214313:	48 83 ec 60          	sub    $0x60,%rsp
  8004214317:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421431b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421431f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214323:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214327:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  800421432b:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  800421432f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214333:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004214337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421433b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421433f:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214342:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214346:	48 8b 10             	mov    (%rax),%rdx
  8004214349:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421434d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214351:	48 01 d0             	add    %rdx,%rax
  8004214354:	48 89 c2             	mov    %rax,%rdx
  8004214357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421435b:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  800421435f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214363:	48 8b 10             	mov    (%rax),%rdx
  8004214366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421436a:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800421436e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214372:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214376:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421437a:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421437e:	48 89 d7             	mov    %rdx,%rdi
  8004214381:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214385:	ba 04 00 00 00       	mov    $0x4,%edx
  800421438a:	48 89 ce             	mov    %rcx,%rsi
  800421438d:	ff d0                	callq  *%rax
  800421438f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214393:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214398:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421439c:	75 2e                	jne    80042143cc <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  800421439e:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042143a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042143ad:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042143b1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042143b5:	48 89 d7             	mov    %rdx,%rdi
  80042143b8:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042143bc:	ba 08 00 00 00       	mov    $0x8,%edx
  80042143c1:	48 89 ce             	mov    %rcx,%rsi
  80042143c4:	ff d0                	callq  *%rax
  80042143c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042143ca:	eb 07                	jmp    80042143d3 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  80042143cc:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  80042143d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042143d7:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042143db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042143df:	48 8b 00             	mov    (%rax),%rax
  80042143e2:	48 29 c2             	sub    %rax,%rdx
  80042143e5:	48 89 d0             	mov    %rdx,%rax
  80042143e8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042143ec:	73 0a                	jae    80042143f8 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042143ee:	b8 12 00 00 00       	mov    $0x12,%eax
  80042143f3:	e9 fb 02 00 00       	jmpq   80042146f3 <_dwarf_frame_set_fde+0x3e4>
	}

	fde->fde_length = length;
  80042143f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143fc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214400:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004214404:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214408:	74 61                	je     800421446b <_dwarf_frame_set_fde+0x15c>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  800421440a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421440e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214412:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214416:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421441a:	48 89 d7             	mov    %rdx,%rdi
  800421441d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214421:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214426:	48 89 ce             	mov    %rcx,%rsi
  8004214429:	ff d0                	callq  *%rax
  800421442b:	48 89 c2             	mov    %rax,%rdx
  800421442e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214432:	48 89 50 28          	mov    %rdx,0x28(%rax)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004214436:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421443a:	48 8b 10             	mov    (%rax),%rdx
  800421443d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214441:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214445:	48 29 c2             	sub    %rax,%rdx
  8004214448:	48 89 d0             	mov    %rdx,%rax
  800421444b:	48 83 e8 04          	sub    $0x4,%rax
  800421444f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214453:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214457:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421445b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421445f:	75 40                	jne    80042144a1 <_dwarf_frame_set_fde+0x192>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214461:	b8 13 00 00 00       	mov    $0x13,%eax
  8004214466:	e9 88 02 00 00       	jmpq   80042146f3 <_dwarf_frame_set_fde+0x3e4>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  800421446b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421446f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214473:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214477:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421447b:	48 89 d7             	mov    %rdx,%rdi
  800421447e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214481:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214485:	48 89 ce             	mov    %rcx,%rsi
  8004214488:	ff d0                	callq  *%rax
  800421448a:	48 89 c2             	mov    %rax,%rdx
  800421448d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214491:	48 89 50 28          	mov    %rdx,0x28(%rax)
		cieoff = fde->fde_cieoff;
  8004214495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214499:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421449d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  80042144a1:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042144a5:	0f 84 e2 00 00 00    	je     800421458d <_dwarf_frame_set_fde+0x27e>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042144ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042144af:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042144b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042144b7:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042144ba:	48 8d 3c 02          	lea    (%rdx,%rax,1),%rdi
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  80042144be:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042144c2:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042144c6:	0f b6 c8             	movzbl %al,%ecx
						    (uint8_t *)dbg->dbg_eh_offset,
  80042144c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144cd:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042144d1:	49 89 c2             	mov    %rax,%r10
  80042144d4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042144d8:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  80042144dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042144e0:	48 83 ec 08          	sub    $0x8,%rsp
  80042144e4:	ff 75 10             	pushq  0x10(%rbp)
  80042144e7:	49 89 f9             	mov    %rdi,%r9
  80042144ea:	41 89 c8             	mov    %ecx,%r8d
  80042144ed:	48 89 d1             	mov    %rdx,%rcx
  80042144f0:	4c 89 d2             	mov    %r10,%rdx
  80042144f3:	48 89 c7             	mov    %rax,%rdi
  80042144f6:	48 b8 0f 3b 21 04 80 	movabs $0x8004213b0f,%rax
  80042144fd:	00 00 00 
  8004214500:	ff d0                	callq  *%rax
  8004214502:	48 83 c4 10          	add    $0x10,%rsp
  8004214506:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004214509:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421450d:	74 08                	je     8004214517 <_dwarf_frame_set_fde+0x208>
			return (ret);
  800421450f:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214512:	e9 dc 01 00 00       	jmpq   80042146f3 <_dwarf_frame_set_fde+0x3e4>
		fde->fde_initloc = val;
  8004214517:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421451b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421451f:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214523:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214527:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421452b:	0f b6 c8             	movzbl %al,%ecx
						    (uint8_t *)dbg->dbg_eh_offset,
  800421452e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214532:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214536:	48 89 c7             	mov    %rax,%rdi
  8004214539:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421453d:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214541:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214545:	48 83 ec 08          	sub    $0x8,%rsp
  8004214549:	ff 75 10             	pushq  0x10(%rbp)
  800421454c:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214552:	41 89 c8             	mov    %ecx,%r8d
  8004214555:	48 89 d1             	mov    %rdx,%rcx
  8004214558:	48 89 fa             	mov    %rdi,%rdx
  800421455b:	48 89 c7             	mov    %rax,%rdi
  800421455e:	48 b8 0f 3b 21 04 80 	movabs $0x8004213b0f,%rax
  8004214565:	00 00 00 
  8004214568:	ff d0                	callq  *%rax
  800421456a:	48 83 c4 10          	add    $0x10,%rsp
  800421456e:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004214571:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214575:	74 08                	je     800421457f <_dwarf_frame_set_fde+0x270>
			return (ret);
  8004214577:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421457a:	e9 74 01 00 00       	jmpq   80042146f3 <_dwarf_frame_set_fde+0x3e4>
		fde->fde_adrange = val;
  800421457f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214583:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214587:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421458b:	eb 5c                	jmp    80042145e9 <_dwarf_frame_set_fde+0x2da>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421458d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214591:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214595:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214599:	8b 52 28             	mov    0x28(%rdx),%edx
  800421459c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042145a0:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042145a4:	48 89 cf             	mov    %rcx,%rdi
  80042145a7:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042145ab:	48 89 ce             	mov    %rcx,%rsi
  80042145ae:	ff d0                	callq  *%rax
  80042145b0:	48 89 c2             	mov    %rax,%rdx
  80042145b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145b7:	48 89 50 30          	mov    %rdx,0x30(%rax)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  80042145bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042145bf:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042145c3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042145c7:	8b 52 28             	mov    0x28(%rdx),%edx
  80042145ca:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042145ce:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  80042145d2:	48 89 cf             	mov    %rcx,%rdi
  80042145d5:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  80042145d9:	48 89 ce             	mov    %rcx,%rsi
  80042145dc:	ff d0                	callq  *%rax
  80042145de:	48 89 c2             	mov    %rax,%rdx
  80042145e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145e5:	48 89 50 38          	mov    %rdx,0x38(%rax)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  80042145e9:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042145ed:	74 71                	je     8004214660 <_dwarf_frame_set_fde+0x351>
  80042145ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042145f3:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042145f7:	0f b6 00             	movzbl (%rax),%eax
  80042145fa:	3c 7a                	cmp    $0x7a,%al
  80042145fc:	75 62                	jne    8004214660 <_dwarf_frame_set_fde+0x351>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042145fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214602:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214606:	48 89 c2             	mov    %rax,%rdx
  8004214609:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421460d:	48 89 c6             	mov    %rax,%rsi
  8004214610:	48 89 d7             	mov    %rdx,%rdi
  8004214613:	48 b8 73 0c 21 04 80 	movabs $0x8004210c73,%rax
  800421461a:	00 00 00 
  800421461d:	ff d0                	callq  *%rax
  800421461f:	48 89 c2             	mov    %rax,%rdx
  8004214622:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214626:	48 89 50 40          	mov    %rdx,0x40(%rax)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421462a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421462e:	48 8b 10             	mov    (%rax),%rdx
  8004214631:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214635:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214639:	48 01 d0             	add    %rdx,%rax
  800421463c:	48 89 c2             	mov    %rax,%rdx
  800421463f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214643:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004214647:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421464b:	48 8b 10             	mov    (%rax),%rdx
  800421464e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214652:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004214656:	48 01 c2             	add    %rax,%rdx
  8004214659:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421465d:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214660:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214664:	48 8b 10             	mov    (%rax),%rdx
  8004214667:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421466b:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421466f:	48 01 d0             	add    %rdx,%rax
  8004214672:	48 89 c2             	mov    %rax,%rdx
  8004214675:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214679:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  800421467d:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214681:	75 2a                	jne    80042146ad <_dwarf_frame_set_fde+0x39e>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004214683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214687:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421468b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421468f:	48 01 c2             	add    %rax,%rdx
  8004214692:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214696:	48 8b 00             	mov    (%rax),%rax
  8004214699:	48 f7 d8             	neg    %rax
  800421469c:	48 01 d0             	add    %rdx,%rax
  800421469f:	48 8d 50 04          	lea    0x4(%rax),%rdx
  80042146a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146a7:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042146ab:	eb 28                	jmp    80042146d5 <_dwarf_frame_set_fde+0x3c6>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  80042146ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146b1:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042146b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042146b9:	48 01 c2             	add    %rax,%rdx
  80042146bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042146c0:	48 8b 00             	mov    (%rax),%rax
  80042146c3:	48 f7 d8             	neg    %rax
  80042146c6:	48 01 d0             	add    %rdx,%rax
  80042146c9:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  80042146cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146d1:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  80042146d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042146d9:	48 8b 10             	mov    (%rax),%rdx
  80042146dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146e0:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042146e4:	48 01 c2             	add    %rax,%rdx
  80042146e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042146eb:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  80042146ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042146f3:	c9                   	leaveq 
  80042146f4:	c3                   	retq   

00000080042146f5 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042146f5:	55                   	push   %rbp
  80042146f6:	48 89 e5             	mov    %rsp,%rbp
  80042146f9:	48 83 ec 20          	sub    $0x20,%rsp
  80042146fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214701:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004214705:	48 b8 a0 f6 49 04 80 	movabs $0x800449f6a0,%rax
  800421470c:	00 00 00 
  800421470f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004214713:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214717:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421471b:	48 85 c0             	test   %rax,%rax
  800421471e:	74 07                	je     8004214727 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004214720:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214725:	eb 33                	jmp    800421475a <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004214727:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421472b:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  800421472f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214733:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004214737:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421473b:	48 b9 20 de 69 04 80 	movabs $0x800469de20,%rcx
  8004214742:	00 00 00 
  8004214745:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004214749:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421474d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214751:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004214755:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421475a:	c9                   	leaveq 
  800421475b:	c3                   	retq   

000000800421475c <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  800421475c:	55                   	push   %rbp
  800421475d:	48 89 e5             	mov    %rsp,%rbp
  8004214760:	48 83 ec 50          	sub    $0x50,%rsp
  8004214764:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214768:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421476b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421476f:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004214773:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  800421477a:	00 00 00 
  800421477d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004214781:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004214788:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421478c:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214790:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004214794:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214798:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421479c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042147a0:	48 39 c2             	cmp    %rax,%rdx
  80042147a3:	0f 86 04 02 00 00    	jbe    80042149ad <_dwarf_get_next_fde+0x251>
		entry_off = offset;
  80042147a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042147ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  80042147b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147b5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147b9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147bd:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042147c1:	48 89 d7             	mov    %rdx,%rdi
  80042147c4:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  80042147c8:	ba 04 00 00 00       	mov    $0x4,%edx
  80042147cd:	48 89 ce             	mov    %rcx,%rsi
  80042147d0:	ff d0                	callq  *%rax
  80042147d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  80042147d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042147db:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042147df:	75 2e                	jne    800421480f <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  80042147e1:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  80042147e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147ec:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147f0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147f4:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042147f8:	48 89 d7             	mov    %rdx,%rdi
  80042147fb:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  80042147ff:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214804:	48 89 ce             	mov    %rcx,%rsi
  8004214807:	ff d0                	callq  *%rax
  8004214809:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421480d:	eb 07                	jmp    8004214816 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  800421480f:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  8004214816:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421481a:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421481e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214822:	48 29 c2             	sub    %rax,%rdx
  8004214825:	48 89 d0             	mov    %rdx,%rax
  8004214828:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421482c:	72 0d                	jb     800421483b <_dwarf_get_next_fde+0xdf>
  800421482e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214833:	75 10                	jne    8004214845 <_dwarf_get_next_fde+0xe9>
  8004214835:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214839:	75 0a                	jne    8004214845 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  800421483b:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214840:	e9 6d 01 00 00       	jmpq   80042149b2 <_dwarf_get_next_fde+0x256>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  8004214845:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214849:	74 11                	je     800421485c <_dwarf_get_next_fde+0x100>
  800421484b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004214850:	75 0a                	jne    800421485c <_dwarf_get_next_fde+0x100>
			return(-1);
  8004214852:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214857:	e9 56 01 00 00       	jmpq   80042149b2 <_dwarf_get_next_fde+0x256>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  800421485c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214860:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214864:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214868:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421486c:	48 89 d7             	mov    %rdx,%rdi
  800421486f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214872:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214876:	48 89 ce             	mov    %rcx,%rsi
  8004214879:	ff d0                	callq  *%rax
  800421487b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  800421487f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004214883:	74 7c                	je     8004214901 <_dwarf_get_next_fde+0x1a5>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  8004214885:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421488a:	75 32                	jne    80042148be <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421488c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214890:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004214894:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214898:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421489c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042148a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148a4:	49 89 f8             	mov    %rdi,%r8
  80042148a7:	48 89 c7             	mov    %rax,%rdi
  80042148aa:	48 b8 8b 3e 21 04 80 	movabs $0x8004213e8b,%rax
  80042148b1:	00 00 00 
  80042148b4:	ff d0                	callq  *%rax
  80042148b6:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042148b9:	e9 ce 00 00 00       	jmpq   800421498c <_dwarf_get_next_fde+0x230>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  80042148be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042148c2:	48 8b 78 08          	mov    0x8(%rax),%rdi
  80042148c6:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042148ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042148ce:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042148d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148d6:	48 83 ec 08          	sub    $0x8,%rsp
  80042148da:	ff 75 b8             	pushq  -0x48(%rbp)
  80042148dd:	49 89 f9             	mov    %rdi,%r9
  80042148e0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  80042148e6:	48 89 c7             	mov    %rax,%rdi
  80042148e9:	48 b8 0f 43 21 04 80 	movabs $0x800421430f,%rax
  80042148f0:	00 00 00 
  80042148f3:	ff d0                	callq  *%rax
  80042148f5:	48 83 c4 10          	add    $0x10,%rsp
  80042148f9:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042148fc:	e9 8b 00 00 00       	jmpq   800421498c <_dwarf_get_next_fde+0x230>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004214901:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214905:	75 0b                	jne    8004214912 <_dwarf_get_next_fde+0x1b6>
  8004214907:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421490c:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004214910:	74 0d                	je     800421491f <_dwarf_get_next_fde+0x1c3>
  8004214912:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004214916:	75 36                	jne    800421494e <_dwarf_get_next_fde+0x1f2>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  8004214918:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  800421491d:	75 2f                	jne    800421494e <_dwarf_get_next_fde+0x1f2>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421491f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214923:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004214927:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421492b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421492f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004214933:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214937:	49 89 f8             	mov    %rdi,%r8
  800421493a:	48 89 c7             	mov    %rax,%rdi
  800421493d:	48 b8 8b 3e 21 04 80 	movabs $0x8004213e8b,%rax
  8004214944:	00 00 00 
  8004214947:	ff d0                	callq  *%rax
  8004214949:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421494c:	eb 3e                	jmp    800421498c <_dwarf_get_next_fde+0x230>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  800421494e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214952:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004214956:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800421495a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421495e:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214962:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214966:	48 83 ec 08          	sub    $0x8,%rsp
  800421496a:	ff 75 b8             	pushq  -0x48(%rbp)
  800421496d:	49 89 f9             	mov    %rdi,%r9
  8004214970:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004214976:	48 89 c7             	mov    %rax,%rdi
  8004214979:	48 b8 0f 43 21 04 80 	movabs $0x800421430f,%rax
  8004214980:	00 00 00 
  8004214983:	ff d0                	callq  *%rax
  8004214985:	48 83 c4 10          	add    $0x10,%rsp
  8004214989:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  800421498c:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004214990:	74 07                	je     8004214999 <_dwarf_get_next_fde+0x23d>
			return(-1);
  8004214992:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214997:	eb 19                	jmp    80042149b2 <_dwarf_get_next_fde+0x256>

		offset = entry_off;
  8004214999:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421499d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  80042149a1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042149a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149a9:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  80042149ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042149b2:	c9                   	leaveq 
  80042149b3:	c3                   	retq   

00000080042149b4 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  80042149b4:	55                   	push   %rbp
  80042149b5:	48 89 e5             	mov    %rsp,%rbp
  80042149b8:	48 83 ec 20          	sub    $0x20,%rsp
  80042149bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042149c0:	89 f0                	mov    %esi,%eax
  80042149c2:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  80042149c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149ca:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042149ce:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  80042149d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149d6:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  80042149da:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  80042149de:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  80042149e2:	c9                   	leaveq 
  80042149e3:	c3                   	retq   

00000080042149e4 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042149e4:	55                   	push   %rbp
  80042149e5:	48 89 e5             	mov    %rsp,%rbp
  80042149e8:	48 83 ec 10          	sub    $0x10,%rsp
  80042149ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042149f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  80042149f4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042149f9:	75 0a                	jne    8004214a05 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042149fb:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214a00:	e9 85 00 00 00       	jmpq   8004214a8a <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004214a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214a09:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214a0d:	48 85 c0             	test   %rax,%rax
  8004214a10:	75 25                	jne    8004214a37 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004214a12:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214a1a:	48 89 d6             	mov    %rdx,%rsi
  8004214a1d:	48 89 c7             	mov    %rax,%rdi
  8004214a20:	48 b8 f5 46 21 04 80 	movabs $0x80042146f5,%rax
  8004214a27:	00 00 00 
  8004214a2a:	ff d0                	callq  *%rax
  8004214a2c:	85 c0                	test   %eax,%eax
  8004214a2e:	74 07                	je     8004214a37 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004214a30:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214a35:	eb 53                	jmp    8004214a8a <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  8004214a37:	48 bf a0 c6 22 04 80 	movabs $0x800422c6a0,%rdi
  8004214a3e:	00 00 00 
  8004214a41:	48 b8 4e 24 21 04 80 	movabs $0x800421244e,%rax
  8004214a48:	00 00 00 
  8004214a4b:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004214a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214a51:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004214a58:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004214a59:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214a60:	00 00 00 
  8004214a63:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214a6b:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  8004214a6f:	48 b8 a0 c6 22 04 80 	movabs $0x800422c6a0,%rax
  8004214a76:	00 00 00 
  8004214a79:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214a7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214a81:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004214a85:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214a8a:	c9                   	leaveq 
  8004214a8b:	c3                   	retq   

0000008004214a8c <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214a8c:	55                   	push   %rbp
  8004214a8d:	48 89 e5             	mov    %rsp,%rbp
  8004214a90:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004214a97:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004214a9b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004214a9f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004214aa3:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  8004214aa7:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  8004214aae:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004214ab5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ab9:	48 83 c0 48          	add    $0x48,%rax
  8004214abd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004214ac1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004214ac8:	00 
  8004214ac9:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
  8004214ad0:	00 
  8004214ad1:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
  8004214ad8:	00 
  8004214ad9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004214ae0:	00 
  8004214ae1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ae5:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214ae9:	0f b6 c0             	movzbl %al,%eax
  8004214aec:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004214aef:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  8004214af6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  8004214afd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214b04:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214b0b:	e9 b4 04 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>
		if (*p == 0) {
  8004214b10:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214b14:	0f b6 00             	movzbl (%rax),%eax
  8004214b17:	84 c0                	test   %al,%al
  8004214b19:	0f 85 4c 01 00 00    	jne    8004214c6b <_dwarf_lineno_run_program+0x1df>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004214b1f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214b23:	48 83 c0 01          	add    $0x1,%rax
  8004214b27:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  8004214b2b:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214b2f:	48 89 c7             	mov    %rax,%rdi
  8004214b32:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004214b39:	00 00 00 
  8004214b3c:	ff d0                	callq  *%rax
  8004214b3e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			switch (*p) {
  8004214b42:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214b46:	0f b6 00             	movzbl (%rax),%eax
  8004214b49:	0f b6 c0             	movzbl %al,%eax
  8004214b4c:	83 f8 02             	cmp    $0x2,%eax
  8004214b4f:	74 74                	je     8004214bc5 <_dwarf_lineno_run_program+0x139>
  8004214b51:	83 f8 03             	cmp    $0x3,%eax
  8004214b54:	0f 84 a7 00 00 00    	je     8004214c01 <_dwarf_lineno_run_program+0x175>
  8004214b5a:	83 f8 01             	cmp    $0x1,%eax
  8004214b5d:	0f 85 ee 00 00 00    	jne    8004214c51 <_dwarf_lineno_run_program+0x1c5>
			case DW_LNE_end_sequence:
				p++;
  8004214b63:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214b67:	48 83 c0 01          	add    $0x1,%rax
  8004214b6b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
				end_sequence = 1;
  8004214b6f:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
				RESET_REGISTERS;
  8004214b76:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004214b7d:	00 
  8004214b7e:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
  8004214b85:	00 
  8004214b86:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
  8004214b8d:	00 
  8004214b8e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004214b95:	00 
  8004214b96:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214b9a:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004214b9e:	0f b6 c0             	movzbl %al,%eax
  8004214ba1:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004214ba4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  8004214bab:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  8004214bb2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004214bb9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
				break;
  8004214bc0:	e9 ff 03 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>
			case DW_LNE_set_address:
				p++;
  8004214bc5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214bc9:	48 83 c0 01          	add    $0x1,%rax
  8004214bcd:	48 89 45 88          	mov    %rax,-0x78(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004214bd1:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214bd8:	00 00 00 
  8004214bdb:	48 8b 00             	mov    (%rax),%rax
  8004214bde:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214be2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004214be6:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004214bea:	0f b6 ca             	movzbl %dl,%ecx
  8004214bed:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
  8004214bf1:	89 ce                	mov    %ecx,%esi
  8004214bf3:	48 89 d7             	mov    %rdx,%rdi
  8004214bf6:	ff d0                	callq  *%rax
  8004214bf8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
				break;
  8004214bfc:	e9 c3 03 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>
			case DW_LNE_define_file:
				p++;
  8004214c01:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214c05:	48 83 c0 01          	add    $0x1,%rax
  8004214c09:	48 89 45 88          	mov    %rax,-0x78(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004214c0d:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214c14:	00 00 00 
  8004214c17:	48 8b 08             	mov    (%rax),%rcx
  8004214c1a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004214c21:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
  8004214c25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214c29:	49 89 c8             	mov    %rcx,%r8
  8004214c2c:	48 89 d1             	mov    %rdx,%rcx
  8004214c2f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004214c34:	48 89 c7             	mov    %rax,%rdi
  8004214c37:	48 b8 de 4f 21 04 80 	movabs $0x8004214fde,%rax
  8004214c3e:	00 00 00 
  8004214c41:	ff d0                	callq  *%rax
  8004214c43:	89 45 b4             	mov    %eax,-0x4c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  8004214c46:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
  8004214c4a:	74 19                	je     8004214c65 <_dwarf_lineno_run_program+0x1d9>
					goto prog_fail;
  8004214c4c:	e9 88 03 00 00       	jmpq   8004214fd9 <_dwarf_lineno_run_program+0x54d>
				break;
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  8004214c51:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004214c55:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214c59:	48 01 d0             	add    %rdx,%rax
  8004214c5c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004214c60:	e9 5f 03 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  8004214c65:	90                   	nop
  8004214c66:	e9 59 03 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  8004214c6b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214c6f:	0f b6 00             	movzbl (%rax),%eax
  8004214c72:	84 c0                	test   %al,%al
  8004214c74:	0f 84 24 02 00 00    	je     8004214e9e <_dwarf_lineno_run_program+0x412>
  8004214c7a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214c7e:	0f b6 10             	movzbl (%rax),%edx
  8004214c81:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214c85:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214c89:	38 c2                	cmp    %al,%dl
  8004214c8b:	0f 83 0d 02 00 00    	jae    8004214e9e <_dwarf_lineno_run_program+0x412>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004214c91:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214c95:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214c99:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004214c9d:	0f b6 00             	movzbl (%rax),%eax
  8004214ca0:	0f b6 c0             	movzbl %al,%eax
  8004214ca3:	83 f8 0c             	cmp    $0xc,%eax
  8004214ca6:	0f 87 ec 01 00 00    	ja     8004214e98 <_dwarf_lineno_run_program+0x40c>
  8004214cac:	89 c0                	mov    %eax,%eax
  8004214cae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214cb5:	00 
  8004214cb6:	48 b8 68 b1 21 04 80 	movabs $0x800421b168,%rax
  8004214cbd:	00 00 00 
  8004214cc0:	48 01 d0             	add    %rdx,%rax
  8004214cc3:	48 8b 00             	mov    (%rax),%rax
  8004214cc6:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004214cc8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214ccf:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214cd3:	73 0a                	jae    8004214cdf <_dwarf_lineno_run_program+0x253>
  8004214cd5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214cda:	e9 fd 02 00 00       	jmpq   8004214fdc <_dwarf_lineno_run_program+0x550>
  8004214cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ce3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214ce7:	48 89 10             	mov    %rdx,(%rax)
  8004214cea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cee:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214cf5:	00 
  8004214cf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cfa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214cfe:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214d02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d06:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214d0a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214d0e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214d12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d16:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214d1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d1e:	8b 55 d8             	mov    -0x28(%rbp),%edx
  8004214d21:	89 50 28             	mov    %edx,0x28(%rax)
  8004214d24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d28:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004214d2b:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214d2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d32:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004214d35:	89 50 30             	mov    %edx,0x30(%rax)
  8004214d38:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214d3c:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214d43:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214d47:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214d4b:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  8004214d52:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
				prologue_end = 0;
  8004214d59:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
				epilogue_begin = 0;
  8004214d60:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
				break;
  8004214d67:	e9 2d 01 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214d6c:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214d70:	48 89 c7             	mov    %rax,%rdi
  8004214d73:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004214d7a:	00 00 00 
  8004214d7d:	ff d0                	callq  *%rax
  8004214d7f:	48 89 c2             	mov    %rax,%rdx
					li->li_minlen;
  8004214d82:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214d86:	0f b6 40 18          	movzbl 0x18(%rax),%eax
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004214d8a:	0f b6 c0             	movzbl %al,%eax
  8004214d8d:	48 0f af c2          	imul   %rdx,%rax
  8004214d91:	48 01 45 f8          	add    %rax,-0x8(%rbp)
					li->li_minlen;
				break;
  8004214d95:	e9 ff 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004214d9a:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214d9e:	48 89 c7             	mov    %rax,%rdi
  8004214da1:	48 b8 f2 0c 21 04 80 	movabs $0x8004210cf2,%rax
  8004214da8:	00 00 00 
  8004214dab:	ff d0                	callq  *%rax
  8004214dad:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004214db1:	e9 e3 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004214db6:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214dba:	48 89 c7             	mov    %rax,%rdi
  8004214dbd:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004214dc4:	00 00 00 
  8004214dc7:	ff d0                	callq  *%rax
  8004214dc9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				break;
  8004214dcd:	e9 c7 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004214dd2:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214dd6:	48 89 c7             	mov    %rax,%rdi
  8004214dd9:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004214de0:	00 00 00 
  8004214de3:	ff d0                	callq  *%rax
  8004214de5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004214de9:	e9 ab 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  8004214dee:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214df2:	0f 94 c0             	sete   %al
  8004214df5:	0f b6 c0             	movzbl %al,%eax
  8004214df8:	89 45 dc             	mov    %eax,-0x24(%rbp)
				break;
  8004214dfb:	e9 99 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  8004214e00:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%rbp)
				break;
  8004214e07:	e9 8d 00 00 00       	jmpq   8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004214e0c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214e10:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214e14:	0f b6 c0             	movzbl %al,%eax
  8004214e17:	ba ff 00 00 00       	mov    $0xff,%edx
  8004214e1c:	89 d1                	mov    %edx,%ecx
  8004214e1e:	29 c1                	sub    %eax,%ecx
  8004214e20:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214e24:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214e28:	0f b6 f0             	movzbl %al,%esi
  8004214e2b:	89 c8                	mov    %ecx,%eax
  8004214e2d:	99                   	cltd   
  8004214e2e:	f7 fe                	idiv   %esi
  8004214e30:	89 c2                	mov    %eax,%edx
  8004214e32:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214e36:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214e3a:	0f b6 c0             	movzbl %al,%eax
  8004214e3d:	0f af c2             	imul   %edx,%eax
  8004214e40:	48 98                	cltq   
  8004214e42:	48 01 45 f8          	add    %rax,-0x8(%rbp)
				break;
  8004214e46:	eb 51                	jmp    8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  8004214e48:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004214e4f:	00 00 00 
  8004214e52:	48 8b 00             	mov    (%rax),%rax
  8004214e55:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004214e59:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
  8004214e5d:	be 02 00 00 00       	mov    $0x2,%esi
  8004214e62:	48 89 d7             	mov    %rdx,%rdi
  8004214e65:	ff d0                	callq  *%rax
  8004214e67:	48 01 45 f8          	add    %rax,-0x8(%rbp)
				break;
  8004214e6b:	eb 2c                	jmp    8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004214e6d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				break;
  8004214e74:	eb 23                	jmp    8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  8004214e76:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
				break;
  8004214e7d:	eb 1a                	jmp    8004214e99 <_dwarf_lineno_run_program+0x40d>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004214e7f:	48 8d 45 88          	lea    -0x78(%rbp),%rax
  8004214e83:	48 89 c7             	mov    %rax,%rdi
  8004214e86:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004214e8d:	00 00 00 
  8004214e90:	ff d0                	callq  *%rax
  8004214e92:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				break;
  8004214e96:	eb 01                	jmp    8004214e99 <_dwarf_lineno_run_program+0x40d>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004214e98:	90                   	nop
			}

		} else {
  8004214e99:	e9 26 01 00 00       	jmpq   8004214fc4 <_dwarf_lineno_run_program+0x538>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004214e9e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ea2:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004214ea6:	0f be c8             	movsbl %al,%ecx
  8004214ea9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214ead:	0f b6 00             	movzbl (%rax),%eax
  8004214eb0:	0f b6 d0             	movzbl %al,%edx
  8004214eb3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214eb7:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214ebb:	0f b6 c0             	movzbl %al,%eax
  8004214ebe:	29 c2                	sub    %eax,%edx
  8004214ec0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ec4:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214ec8:	0f b6 f0             	movzbl %al,%esi
  8004214ecb:	89 d0                	mov    %edx,%eax
  8004214ecd:	99                   	cltd   
  8004214ece:	f7 fe                	idiv   %esi
  8004214ed0:	89 d0                	mov    %edx,%eax
  8004214ed2:	01 c8                	add    %ecx,%eax
  8004214ed4:	48 98                	cltq   
  8004214ed6:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			address += ADDRESS(*p);
  8004214eda:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214ede:	0f b6 00             	movzbl (%rax),%eax
  8004214ee1:	0f b6 d0             	movzbl %al,%edx
  8004214ee4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ee8:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004214eec:	0f b6 c0             	movzbl %al,%eax
  8004214eef:	89 d1                	mov    %edx,%ecx
  8004214ef1:	29 c1                	sub    %eax,%ecx
  8004214ef3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214ef7:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004214efb:	0f b6 f0             	movzbl %al,%esi
  8004214efe:	89 c8                	mov    %ecx,%eax
  8004214f00:	99                   	cltd   
  8004214f01:	f7 fe                	idiv   %esi
  8004214f03:	89 c2                	mov    %eax,%edx
  8004214f05:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214f09:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004214f0d:	0f b6 c0             	movzbl %al,%eax
  8004214f10:	0f af c2             	imul   %edx,%eax
  8004214f13:	48 98                	cltq   
  8004214f15:	48 01 45 f8          	add    %rax,-0x8(%rbp)
			APPEND_ROW;
  8004214f19:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004214f20:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214f24:	73 0a                	jae    8004214f30 <_dwarf_lineno_run_program+0x4a4>
  8004214f26:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214f2b:	e9 ac 00 00 00       	jmpq   8004214fdc <_dwarf_lineno_run_program+0x550>
  8004214f30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214f38:	48 89 10             	mov    %rdx,(%rax)
  8004214f3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f3f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004214f46:	00 
  8004214f47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214f4f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004214f53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f57:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f5b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004214f5f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214f63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f67:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004214f6b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f6f:	8b 55 d8             	mov    -0x28(%rbp),%edx
  8004214f72:	89 50 28             	mov    %edx,0x28(%rax)
  8004214f75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f79:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004214f7c:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004214f7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f83:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004214f86:	89 50 30             	mov    %edx,0x30(%rax)
  8004214f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214f8d:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004214f94:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214f98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214f9c:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004214fa3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
			prologue_end = 0;
  8004214faa:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
			epilogue_begin = 0;
  8004214fb1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
			p++;
  8004214fb8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214fbc:	48 83 c0 01          	add    $0x1,%rax
  8004214fc0:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004214fc4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004214fc8:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
  8004214fcc:	0f 82 3e fb ff ff    	jb     8004214b10 <_dwarf_lineno_run_program+0x84>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004214fd2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214fd7:	eb 03                	jmp    8004214fdc <_dwarf_lineno_run_program+0x550>

prog_fail:

	return (ret);
  8004214fd9:	8b 45 b4             	mov    -0x4c(%rbp),%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004214fdc:	c9                   	leaveq 
  8004214fdd:	c3                   	retq   

0000008004214fde <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004214fde:	55                   	push   %rbp
  8004214fdf:	48 89 e5             	mov    %rsp,%rbp
  8004214fe2:	48 83 ec 40          	sub    $0x40,%rsp
  8004214fe6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214fea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214fee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004214ff2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214ff6:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004214ffa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214ffe:	48 8b 00             	mov    (%rax),%rax
  8004215001:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215009:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	src += strlen(fname) + 1;
  800421500d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215011:	48 89 c7             	mov    %rax,%rdi
  8004215014:	48 b8 5b fe 20 04 80 	movabs $0x800420fe5b,%rax
  800421501b:	00 00 00 
  800421501e:	ff d0                	callq  *%rax
  8004215020:	83 c0 01             	add    $0x1,%eax
  8004215023:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004215027:	48 98                	cltq   
  8004215029:	48 01 d0             	add    %rdx,%rax
  800421502c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215030:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004215034:	48 89 c7             	mov    %rax,%rdi
  8004215037:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  800421503e:	00 00 00 
  8004215041:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215043:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004215047:	48 89 c7             	mov    %rax,%rdi
  800421504a:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004215051:	00 00 00 
  8004215054:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215056:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800421505a:	48 89 c7             	mov    %rax,%rdi
  800421505d:	48 b8 84 0d 21 04 80 	movabs $0x8004210d84,%rax
  8004215064:	00 00 00 
  8004215067:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215069:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421506d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215071:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215074:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215079:	c9                   	leaveq 
  800421507a:	c3                   	retq   

000000800421507b <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  800421507b:	55                   	push   %rbp
  800421507c:	48 89 e5             	mov    %rsp,%rbp
  800421507f:	53                   	push   %rbx
  8004215080:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215087:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  800421508e:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215095:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  800421509c:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  80042150a3:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  80042150aa:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  80042150b1:	00 
  80042150b2:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  80042150b9:	00 
  80042150ba:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  80042150c1:	00 
  80042150c2:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042150c9:	00 
  80042150ca:	48 b8 d0 b1 21 04 80 	movabs $0x800421b1d0,%rax
  80042150d1:	00 00 00 
  80042150d4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  80042150d8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  80042150dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  80042150e0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042150e7:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  80042150ee:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  80042150f2:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042150f7:	75 35                	jne    800421512e <_dwarf_lineno_init+0xb3>
  80042150f9:	48 b9 dc b1 21 04 80 	movabs $0x800421b1dc,%rcx
  8004215100:	00 00 00 
  8004215103:	48 ba e7 b1 21 04 80 	movabs $0x800421b1e7,%rdx
  800421510a:	00 00 00 
  800421510d:	be 13 01 00 00       	mov    $0x113,%esi
  8004215112:	48 bf fc b1 21 04 80 	movabs $0x800421b1fc,%rdi
  8004215119:	00 00 00 
  800421511c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215121:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004215128:	00 00 00 
  800421512b:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  800421512e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215135:	00 00 00 
  8004215138:	48 8b 00             	mov    (%rax),%rax
  800421513b:	48 85 c0             	test   %rax,%rax
  800421513e:	75 35                	jne    8004215175 <_dwarf_lineno_init+0xfa>
  8004215140:	48 b9 13 b2 21 04 80 	movabs $0x800421b213,%rcx
  8004215147:	00 00 00 
  800421514a:	48 ba e7 b1 21 04 80 	movabs $0x800421b1e7,%rdx
  8004215151:	00 00 00 
  8004215154:	be 14 01 00 00       	mov    $0x114,%esi
  8004215159:	48 bf fc b1 21 04 80 	movabs $0x800421b1fc,%rdi
  8004215160:	00 00 00 
  8004215163:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215168:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421516f:	00 00 00 
  8004215172:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215175:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215179:	48 89 c7             	mov    %rax,%rdi
  800421517c:	48 b8 4e 24 21 04 80 	movabs $0x800421244e,%rax
  8004215183:	00 00 00 
  8004215186:	ff d0                	callq  *%rax
  8004215188:	85 c0                	test   %eax,%eax
  800421518a:	74 0a                	je     8004215196 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  800421518c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215191:	e9 51 04 00 00       	jmpq   80042155e7 <_dwarf_lineno_init+0x56c>

	li = linfo;
  8004215196:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421519d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  80042151a1:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151a8:	00 00 00 
  80042151ab:	48 8b 00             	mov    (%rax),%rax
  80042151ae:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151b2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151b6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151ba:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042151c1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042151c6:	48 89 cf             	mov    %rcx,%rdi
  80042151c9:	ff d0                	callq  *%rax
  80042151cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  80042151cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042151d4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042151d8:	75 37                	jne    8004215211 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  80042151da:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  80042151e1:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042151e8:	00 00 00 
  80042151eb:	48 8b 00             	mov    (%rax),%rax
  80042151ee:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042151f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042151f6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042151fa:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215201:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215206:	48 89 cf             	mov    %rcx,%rdi
  8004215209:	ff d0                	callq  *%rax
  800421520b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421520f:	eb 07                	jmp    8004215218 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215211:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215218:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421521c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215220:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215227:	48 29 c2             	sub    %rax,%rdx
  800421522a:	48 89 d0             	mov    %rdx,%rax
  800421522d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215231:	73 0a                	jae    800421523d <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215233:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215238:	e9 aa 03 00 00       	jmpq   80042155e7 <_dwarf_lineno_init+0x56c>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  800421523d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215241:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215245:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215248:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421524f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215253:	48 01 d0             	add    %rdx,%rax
  8004215256:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  800421525a:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215261:	00 00 00 
  8004215264:	48 8b 00             	mov    (%rax),%rax
  8004215267:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421526b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421526f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215273:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421527a:	ba 02 00 00 00       	mov    $0x2,%edx
  800421527f:	48 89 cf             	mov    %rcx,%rdi
  8004215282:	ff d0                	callq  *%rax
  8004215284:	89 c2                	mov    %eax,%edx
  8004215286:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421528a:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  800421528e:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215295:	00 00 00 
  8004215298:	48 8b 00             	mov    (%rax),%rax
  800421529b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421529f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152a3:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152a7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042152aa:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152b1:	48 89 cf             	mov    %rcx,%rdi
  80042152b4:	ff d0                	callq  *%rax
  80042152b6:	48 89 c2             	mov    %rax,%rdx
  80042152b9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152bd:	48 89 50 10          	mov    %rdx,0x10(%rax)
	hdroff = offset;
  80042152c1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042152c8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  80042152cc:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  80042152d3:	00 00 00 
  80042152d6:	48 8b 00             	mov    (%rax),%rax
  80042152d9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152dd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042152e1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042152e5:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042152ec:	ba 01 00 00 00       	mov    $0x1,%edx
  80042152f1:	48 89 cf             	mov    %rcx,%rdi
  80042152f4:	ff d0                	callq  *%rax
  80042152f6:	89 c2                	mov    %eax,%edx
  80042152f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042152fc:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  80042152ff:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215306:	00 00 00 
  8004215309:	48 8b 00             	mov    (%rax),%rax
  800421530c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215310:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215314:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215318:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  800421531f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215324:	48 89 cf             	mov    %rcx,%rdi
  8004215327:	ff d0                	callq  *%rax
  8004215329:	89 c2                	mov    %eax,%edx
  800421532b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421532f:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215332:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215339:	00 00 00 
  800421533c:	48 8b 00             	mov    (%rax),%rax
  800421533f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215343:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215347:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421534b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215352:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215357:	48 89 cf             	mov    %rcx,%rdi
  800421535a:	ff d0                	callq  *%rax
  800421535c:	89 c2                	mov    %eax,%edx
  800421535e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215362:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215365:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421536c:	00 00 00 
  800421536f:	48 8b 00             	mov    (%rax),%rax
  8004215372:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215376:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421537a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421537e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215385:	ba 01 00 00 00       	mov    $0x1,%edx
  800421538a:	48 89 cf             	mov    %rcx,%rdi
  800421538d:	ff d0                	callq  *%rax
  800421538f:	89 c2                	mov    %eax,%edx
  8004215391:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215395:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215398:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  800421539f:	00 00 00 
  80042153a2:	48 8b 00             	mov    (%rax),%rax
  80042153a5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042153a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042153ad:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042153b1:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  80042153b8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042153bd:	48 89 cf             	mov    %rcx,%rdi
  80042153c0:	ff d0                	callq  *%rax
  80042153c2:	89 c2                	mov    %eax,%edx
  80042153c4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153c8:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  80042153cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153cf:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042153d3:	8d 50 fb             	lea    -0x5(%rax),%edx
  80042153d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153da:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042153de:	0f b6 c0             	movzbl %al,%eax
  80042153e1:	83 e8 01             	sub    $0x1,%eax
  80042153e4:	39 c2                	cmp    %eax,%edx
  80042153e6:	7d 0c                	jge    80042153f4 <_dwarf_lineno_init+0x379>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042153e8:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042153ef:	e9 f0 01 00 00       	jmpq   80042155e4 <_dwarf_lineno_init+0x569>
	}

	li->li_oplen = global_std_op;
  80042153f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042153f8:	48 bb 60 e4 69 04 80 	movabs $0x800469e460,%rbx
  80042153ff:	00 00 00 
  8004215402:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215406:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  800421540d:	eb 41                	jmp    8004215450 <_dwarf_lineno_init+0x3d5>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  800421540f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215413:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215417:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421541a:	48 98                	cltq   
  800421541c:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004215420:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215427:	00 00 00 
  800421542a:	48 8b 00             	mov    (%rax),%rax
  800421542d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215431:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215435:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215439:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215440:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215445:	48 89 cf             	mov    %rcx,%rdi
  8004215448:	ff d0                	callq  *%rax
  800421544a:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  800421544c:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004215450:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215454:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215458:	0f b6 c0             	movzbl %al,%eax
  800421545b:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  800421545e:	7f af                	jg     800421540f <_dwarf_lineno_init+0x394>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004215460:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215467:	00 
	p = ds->ds_data + offset;
  8004215468:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421546c:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215470:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215477:	48 01 d0             	add    %rdx,%rax
  800421547a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004215481:	eb 1f                	jmp    80042154a2 <_dwarf_lineno_init+0x427>
		while (*p++ != '\0')
  8004215483:	90                   	nop
  8004215484:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800421548b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421548f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215496:	0f b6 00             	movzbl (%rax),%eax
  8004215499:	84 c0                	test   %al,%al
  800421549b:	75 e7                	jne    8004215484 <_dwarf_lineno_init+0x409>
			;
		length++;
  800421549d:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  80042154a2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154a9:	0f b6 00             	movzbl (%rax),%eax
  80042154ac:	84 c0                	test   %al,%al
  80042154ae:	75 d3                	jne    8004215483 <_dwarf_lineno_init+0x408>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  80042154b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042154b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042154b8:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  80042154bc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154c3:	48 89 c2             	mov    %rax,%rdx
  80042154c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042154ca:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042154ce:	48 29 c2             	sub    %rax,%rdx
  80042154d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042154d5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042154d9:	48 98                	cltq   
  80042154db:	48 39 c2             	cmp    %rax,%rdx
  80042154de:	7e 0c                	jle    80042154ec <_dwarf_lineno_init+0x471>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  80042154e0:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042154e7:	e9 f8 00 00 00       	jmpq   80042155e4 <_dwarf_lineno_init+0x569>
	}
	p++;
  80042154ec:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042154f3:	48 83 c0 01          	add    $0x1,%rax
  80042154f7:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  80042154fe:	eb 3c                	jmp    800421553c <_dwarf_lineno_init+0x4c1>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004215500:	48 b8 88 c6 22 04 80 	movabs $0x800422c688,%rax
  8004215507:	00 00 00 
  800421550a:	48 8b 08             	mov    (%rax),%rcx
  800421550d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004215514:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  800421551b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421551f:	49 89 c8             	mov    %rcx,%r8
  8004215522:	48 89 d1             	mov    %rdx,%rcx
  8004215525:	ba 00 00 00 00       	mov    $0x0,%edx
  800421552a:	48 89 c7             	mov    %rax,%rdi
  800421552d:	48 b8 de 4f 21 04 80 	movabs $0x8004214fde,%rax
  8004215534:	00 00 00 
  8004215537:	ff d0                	callq  *%rax
  8004215539:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  800421553c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215543:	0f b6 00             	movzbl (%rax),%eax
  8004215546:	84 c0                	test   %al,%al
  8004215548:	75 b6                	jne    8004215500 <_dwarf_lineno_init+0x485>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  800421554a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215551:	48 83 c0 01          	add    $0x1,%rax
  8004215555:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  800421555c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215563:	48 89 c2             	mov    %rax,%rdx
  8004215566:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421556a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421556e:	48 29 c2             	sub    %rax,%rdx
  8004215571:	48 89 d0             	mov    %rdx,%rax
  8004215574:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215578:	48 89 c2             	mov    %rax,%rdx
  800421557b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421557f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215583:	48 39 c2             	cmp    %rax,%rdx
  8004215586:	74 09                	je     8004215591 <_dwarf_lineno_init+0x516>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215588:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  800421558f:	eb 53                	jmp    80042155e4 <_dwarf_lineno_init+0x569>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004215591:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215595:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215599:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421559d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042155a1:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042155a8:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042155af:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042155b6:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042155ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042155be:	4d 89 c1             	mov    %r8,%r9
  80042155c1:	49 89 f8             	mov    %rdi,%r8
  80042155c4:	48 89 c7             	mov    %rax,%rdi
  80042155c7:	48 b8 8c 4a 21 04 80 	movabs $0x8004214a8c,%rax
  80042155ce:	00 00 00 
  80042155d1:	ff d0                	callq  *%rax
  80042155d3:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042155d6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042155da:	75 07                	jne    80042155e3 <_dwarf_lineno_init+0x568>
		goto fail_cleanup;

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042155dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042155e1:	eb 04                	jmp    80042155e7 <_dwarf_lineno_init+0x56c>
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
					error);
	if (ret != DW_DLE_NONE)
		goto fail_cleanup;
  80042155e3:	90                   	nop
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042155e4:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042155e7:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  80042155ee:	5b                   	pop    %rbx
  80042155ef:	5d                   	pop    %rbp
  80042155f0:	c3                   	retq   

00000080042155f1 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042155f1:	55                   	push   %rbp
  80042155f2:	48 89 e5             	mov    %rsp,%rbp
  80042155f5:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  80042155fc:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004215603:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800421560a:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004215611:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004215618:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  800421561f:	00 
  8004215620:	75 35                	jne    8004215657 <dwarf_srclines+0x66>
  8004215622:	48 b9 1f b2 21 04 80 	movabs $0x800421b21f,%rcx
  8004215629:	00 00 00 
  800421562c:	48 ba e7 b1 21 04 80 	movabs $0x800421b1e7,%rdx
  8004215633:	00 00 00 
  8004215636:	be 9a 01 00 00       	mov    $0x19a,%esi
  800421563b:	48 bf fc b1 21 04 80 	movabs $0x800421b1fc,%rdi
  8004215642:	00 00 00 
  8004215645:	b8 00 00 00 00       	mov    $0x0,%eax
  800421564a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004215651:	00 00 00 
  8004215654:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215657:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  800421565e:	00 
  800421565f:	75 35                	jne    8004215696 <dwarf_srclines+0xa5>
  8004215661:	48 b9 23 b2 21 04 80 	movabs $0x800421b223,%rcx
  8004215668:	00 00 00 
  800421566b:	48 ba e7 b1 21 04 80 	movabs $0x800421b1e7,%rdx
  8004215672:	00 00 00 
  8004215675:	be 9b 01 00 00       	mov    $0x19b,%esi
  800421567a:	48 bf fc b1 21 04 80 	movabs $0x800421b1fc,%rdi
  8004215681:	00 00 00 
  8004215684:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215689:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004215690:	00 00 00 
  8004215693:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215696:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421569d:	ba 88 00 00 00       	mov    $0x88,%edx
  80042156a2:	be 00 00 00 00       	mov    $0x0,%esi
  80042156a7:	48 89 c7             	mov    %rax,%rdi
  80042156aa:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042156b1:	00 00 00 
  80042156b4:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042156b6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042156bd:	be 10 00 00 00       	mov    $0x10,%esi
  80042156c2:	48 89 c7             	mov    %rax,%rdi
  80042156c5:	48 b8 39 20 21 04 80 	movabs $0x8004212039,%rax
  80042156cc:	00 00 00 
  80042156cf:	ff d0                	callq  *%rax
  80042156d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042156d5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042156da:	75 0a                	jne    80042156e6 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042156dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042156e1:	e9 84 00 00 00       	jmpq   800421576a <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042156e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042156ea:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042156ee:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  80042156f5:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  80042156fc:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004215703:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421570a:	49 89 f8             	mov    %rdi,%r8
  800421570d:	48 89 c7             	mov    %rax,%rdi
  8004215710:	48 b8 7b 50 21 04 80 	movabs $0x800421507b,%rax
  8004215717:	00 00 00 
  800421571a:	ff d0                	callq  *%rax
  800421571c:	85 c0                	test   %eax,%eax
  800421571e:	74 07                	je     8004215727 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004215720:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215725:	eb 43                	jmp    800421576a <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004215727:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421572e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215732:	48 89 10             	mov    %rdx,(%rax)
  8004215735:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215739:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421573d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215741:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215745:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215749:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421574d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215751:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215755:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215759:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421575d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215761:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004215765:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421576a:	c9                   	leaveq 
  800421576b:	c3                   	retq   

000000800421576c <_dwarf_find_section>:
  800421576c:	55                   	push   %rbp
  800421576d:	48 89 e5             	mov    %rsp,%rbp
  8004215770:	48 83 ec 20          	sub    $0x20,%rsp
  8004215774:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215778:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421577f:	00 
  8004215780:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215787:	eb 57                	jmp    80042157e0 <_dwarf_find_section+0x74>
  8004215789:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215790:	00 00 00 
  8004215793:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215796:	48 63 d2             	movslq %edx,%rdx
  8004215799:	48 c1 e2 05          	shl    $0x5,%rdx
  800421579d:	48 01 d0             	add    %rdx,%rax
  80042157a0:	48 8b 00             	mov    (%rax),%rax
  80042157a3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042157a7:	48 89 d6             	mov    %rdx,%rsi
  80042157aa:	48 89 c7             	mov    %rax,%rdi
  80042157ad:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  80042157b4:	00 00 00 
  80042157b7:	ff d0                	callq  *%rax
  80042157b9:	85 c0                	test   %eax,%eax
  80042157bb:	75 1f                	jne    80042157dc <_dwarf_find_section+0x70>
  80042157bd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042157c0:	48 98                	cltq   
  80042157c2:	48 c1 e0 05          	shl    $0x5,%rax
  80042157c6:	48 89 c2             	mov    %rax,%rdx
  80042157c9:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042157d0:	00 00 00 
  80042157d3:	48 01 d0             	add    %rdx,%rax
  80042157d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042157da:	eb 0a                	jmp    80042157e6 <_dwarf_find_section+0x7a>
  80042157dc:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042157e0:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042157e4:	7e a3                	jle    8004215789 <_dwarf_find_section+0x1d>
  80042157e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042157ea:	c9                   	leaveq 
  80042157eb:	c3                   	retq   

00000080042157ec <find_debug_sections>:
  80042157ec:	55                   	push   %rbp
  80042157ed:	48 89 e5             	mov    %rsp,%rbp
  80042157f0:	48 83 ec 40          	sub    $0x40,%rsp
  80042157f4:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042157f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042157fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215800:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  8004215807:	00 
  8004215808:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421580c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215814:	48 01 d0             	add    %rdx,%rax
  8004215817:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421581b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421581f:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215823:	0f b7 c0             	movzwl %ax,%eax
  8004215826:	48 c1 e0 06          	shl    $0x6,%rax
  800421582a:	48 89 c2             	mov    %rax,%rdx
  800421582d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215831:	48 01 d0             	add    %rdx,%rax
  8004215834:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215838:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421583c:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215840:	0f b7 c0             	movzwl %ax,%eax
  8004215843:	48 c1 e0 06          	shl    $0x6,%rax
  8004215847:	48 89 c2             	mov    %rax,%rdx
  800421584a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421584e:	48 01 d0             	add    %rdx,%rax
  8004215851:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215855:	e9 4b 02 00 00       	jmpq   8004215aa5 <find_debug_sections+0x2b9>
  800421585a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421585e:	8b 00                	mov    (%rax),%eax
  8004215860:	89 c1                	mov    %eax,%ecx
  8004215862:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215866:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421586a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421586e:	48 01 d0             	add    %rdx,%rax
  8004215871:	48 01 c8             	add    %rcx,%rax
  8004215874:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215878:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421587c:	48 be 2b b2 21 04 80 	movabs $0x800421b22b,%rsi
  8004215883:	00 00 00 
  8004215886:	48 89 c7             	mov    %rax,%rdi
  8004215889:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215890:	00 00 00 
  8004215893:	ff d0                	callq  *%rax
  8004215895:	85 c0                	test   %eax,%eax
  8004215897:	75 4b                	jne    80042158e4 <find_debug_sections+0xf8>
  8004215899:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421589d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158a4:	00 00 00 
  80042158a7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042158ab:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158b2:	00 00 00 
  80042158b5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042158b9:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042158bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158c1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042158c5:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042158cc:	00 00 00 
  80042158cf:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042158d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042158d7:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042158db:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042158df:	e9 bc 01 00 00       	jmpq   8004215aa0 <find_debug_sections+0x2b4>
  80042158e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042158e8:	48 be 37 b2 21 04 80 	movabs $0x800421b237,%rsi
  80042158ef:	00 00 00 
  80042158f2:	48 89 c7             	mov    %rax,%rdi
  80042158f5:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  80042158fc:	00 00 00 
  80042158ff:	ff d0                	callq  *%rax
  8004215901:	85 c0                	test   %eax,%eax
  8004215903:	75 4b                	jne    8004215950 <find_debug_sections+0x164>
  8004215905:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215909:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215910:	00 00 00 
  8004215913:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215917:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421591e:	00 00 00 
  8004215921:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215925:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421592d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215931:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215938:	00 00 00 
  800421593b:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421593f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215943:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215947:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421594b:	e9 50 01 00 00       	jmpq   8004215aa0 <find_debug_sections+0x2b4>
  8004215950:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215954:	48 be 4f b2 21 04 80 	movabs $0x800421b24f,%rsi
  800421595b:	00 00 00 
  800421595e:	48 89 c7             	mov    %rax,%rdi
  8004215961:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215968:	00 00 00 
  800421596b:	ff d0                	callq  *%rax
  800421596d:	85 c0                	test   %eax,%eax
  800421596f:	75 4b                	jne    80042159bc <find_debug_sections+0x1d0>
  8004215971:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215975:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421597c:	00 00 00 
  800421597f:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004215983:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421598a:	00 00 00 
  800421598d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215991:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004215995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215999:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421599d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159a4:	00 00 00 
  80042159a7:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042159ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159af:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042159b3:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042159b7:	e9 e4 00 00 00       	jmpq   8004215aa0 <find_debug_sections+0x2b4>
  80042159bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042159c0:	48 be 45 b2 21 04 80 	movabs $0x800421b245,%rsi
  80042159c7:	00 00 00 
  80042159ca:	48 89 c7             	mov    %rax,%rdi
  80042159cd:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  80042159d4:	00 00 00 
  80042159d7:	ff d0                	callq  *%rax
  80042159d9:	85 c0                	test   %eax,%eax
  80042159db:	75 53                	jne    8004215a30 <find_debug_sections+0x244>
  80042159dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159e1:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042159e5:	48 89 c2             	mov    %rax,%rdx
  80042159e8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042159ef:	00 00 00 
  80042159f2:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042159f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042159fa:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042159fe:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a05:	00 00 00 
  8004215a08:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004215a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215a14:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a1b:	00 00 00 
  8004215a1e:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004215a22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a26:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215a2a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215a2e:	eb 70                	jmp    8004215aa0 <find_debug_sections+0x2b4>
  8004215a30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215a34:	48 be 5b b2 21 04 80 	movabs $0x800421b25b,%rsi
  8004215a3b:	00 00 00 
  8004215a3e:	48 89 c7             	mov    %rax,%rdi
  8004215a41:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215a48:	00 00 00 
  8004215a4b:	ff d0                	callq  *%rax
  8004215a4d:	85 c0                	test   %eax,%eax
  8004215a4f:	75 4f                	jne    8004215aa0 <find_debug_sections+0x2b4>
  8004215a51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215a55:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a5c:	00 00 00 
  8004215a5f:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004215a66:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a6d:	00 00 00 
  8004215a70:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215a74:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004215a7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a7f:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215a83:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215a8a:	00 00 00 
  8004215a8d:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004215a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215a98:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215a9c:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004215aa0:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004215aa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004215aa9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004215aad:	0f 82 a7 fd ff ff    	jb     800421585a <find_debug_sections+0x6e>
  8004215ab3:	90                   	nop
  8004215ab4:	c9                   	leaveq 
  8004215ab5:	c3                   	retq   

0000008004215ab6 <read_section_headers>:
  8004215ab6:	55                   	push   %rbp
  8004215ab7:	48 89 e5             	mov    %rsp,%rbp
  8004215aba:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004215ac1:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004215ac8:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  8004215acf:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  8004215ad6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215adb:	b9 14 00 00 00       	mov    $0x14,%ecx
  8004215ae0:	48 89 d7             	mov    %rdx,%rdi
  8004215ae3:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004215ae6:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004215aed:	00 
  8004215aee:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004215af5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215af9:	48 01 d0             	add    %rdx,%rax
  8004215afc:	48 83 e8 01          	sub    $0x1,%rax
  8004215b00:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004215b04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215b08:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215b0d:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004215b11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215b15:	48 29 d0             	sub    %rdx,%rax
  8004215b18:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004215b1c:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004215b23:	00 00 00 00 
  8004215b27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215b2b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004215b2f:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004215b36:	00 
  8004215b37:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  8004215b3e:	00 00 00 
  8004215b41:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004215b48:	75 11                	jne    8004215b5b <read_section_headers+0xa5>
  8004215b4a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b51:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215b55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215b59:	eb 26                	jmp    8004215b81 <read_section_headers+0xcb>
  8004215b5b:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b62:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004215b66:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b6d:	48 01 c2             	add    %rax,%rdx
  8004215b70:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004215b77:	ff ff ff 
  8004215b7a:	48 01 d0             	add    %rdx,%rax
  8004215b7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215b81:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b88:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004215b8c:	0f b7 c0             	movzwl %ax,%eax
  8004215b8f:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004215b92:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215b99:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004215b9d:	0f b7 c0             	movzwl %ax,%eax
  8004215ba0:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004215ba3:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004215baa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004215bae:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004215bb1:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004215bb5:	48 63 f0             	movslq %eax,%rsi
  8004215bb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215bbc:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215bc3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215bc7:	48 89 c7             	mov    %rax,%rdi
  8004215bca:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004215bd1:	00 00 00 
  8004215bd4:	ff d0                	callq  *%rax
  8004215bd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215bda:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004215bde:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215be2:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215be8:	48 89 c2             	mov    %rax,%rdx
  8004215beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215bef:	48 29 d0             	sub    %rdx,%rax
  8004215bf2:	48 89 c2             	mov    %rax,%rdx
  8004215bf5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215bf9:	48 01 d0             	add    %rdx,%rax
  8004215bfc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004215c00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215c07:	eb 24                	jmp    8004215c2d <read_section_headers+0x177>
  8004215c09:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c0c:	48 98                	cltq   
  8004215c0e:	48 c1 e0 06          	shl    $0x6,%rax
  8004215c12:	48 89 c2             	mov    %rax,%rdx
  8004215c15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215c19:	48 01 c2             	add    %rax,%rdx
  8004215c1c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c1f:	48 98                	cltq   
  8004215c21:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004215c28:	ff 
  8004215c29:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004215c2d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215c30:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004215c33:	7c d4                	jl     8004215c09 <read_section_headers+0x153>
  8004215c35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215c39:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004215c3d:	0f b7 c0             	movzwl %ax,%eax
  8004215c40:	48 98                	cltq   
  8004215c42:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215c49:	ff 
  8004215c4a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004215c4e:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215c55:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215c59:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c5d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215c61:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c65:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215c69:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  8004215c70:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004215c74:	48 01 f1             	add    %rsi,%rcx
  8004215c77:	48 89 cf             	mov    %rcx,%rdi
  8004215c7a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215c81:	48 89 c6             	mov    %rax,%rsi
  8004215c84:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004215c8b:	00 00 00 
  8004215c8e:	ff d0                	callq  *%rax
  8004215c90:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c94:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215c98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215c9c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ca0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004215ca4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004215ca8:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215cae:	48 29 c2             	sub    %rax,%rdx
  8004215cb1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215cb5:	48 01 c2             	add    %rax,%rdx
  8004215cb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215cbc:	48 01 d0             	add    %rdx,%rax
  8004215cbf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004215cc3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004215cca:	e9 10 05 00 00       	jmpq   80042161df <read_section_headers+0x729>
  8004215ccf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215cd2:	48 98                	cltq   
  8004215cd4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215cdb:	ff 
  8004215cdc:	8b 00                	mov    (%rax),%eax
  8004215cde:	89 c2                	mov    %eax,%edx
  8004215ce0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004215ce4:	48 01 d0             	add    %rdx,%rax
  8004215ce7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004215ceb:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215cf2:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004215cf7:	48 85 c0             	test   %rax,%rax
  8004215cfa:	74 35                	je     8004215d31 <read_section_headers+0x27b>
  8004215cfc:	48 b9 66 b2 21 04 80 	movabs $0x800421b266,%rcx
  8004215d03:	00 00 00 
  8004215d06:	48 ba 7f b2 21 04 80 	movabs $0x800421b27f,%rdx
  8004215d0d:	00 00 00 
  8004215d10:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004215d15:	48 bf 94 b2 21 04 80 	movabs $0x800421b294,%rdi
  8004215d1c:	00 00 00 
  8004215d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215d24:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004215d2b:	00 00 00 
  8004215d2e:	41 ff d0             	callq  *%r8
  8004215d31:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004215d38:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004215d3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215d40:	48 be 2b b2 21 04 80 	movabs $0x800421b22b,%rsi
  8004215d47:	00 00 00 
  8004215d4a:	48 89 c7             	mov    %rax,%rdi
  8004215d4d:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215d54:	00 00 00 
  8004215d57:	ff d0                	callq  *%rax
  8004215d59:	85 c0                	test   %eax,%eax
  8004215d5b:	0f 85 db 00 00 00    	jne    8004215e3c <read_section_headers+0x386>
  8004215d61:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d64:	48 98                	cltq   
  8004215d66:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d6d:	ff 
  8004215d6e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d72:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215d75:	48 98                	cltq   
  8004215d77:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215d7e:	ff 
  8004215d7f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215d83:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  8004215d8a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004215d8e:	48 01 f1             	add    %rsi,%rcx
  8004215d91:	48 89 cf             	mov    %rcx,%rdi
  8004215d94:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215d9b:	48 89 c6             	mov    %rax,%rsi
  8004215d9e:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004215da5:	00 00 00 
  8004215da8:	ff d0                	callq  *%rax
  8004215daa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215dad:	48 98                	cltq   
  8004215daf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215db6:	ff 
  8004215db7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215dbb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215dbe:	48 98                	cltq   
  8004215dc0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215dc7:	ff 
  8004215dc8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215dcc:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004215dd0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215dd4:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215dda:	48 29 c2             	sub    %rax,%rdx
  8004215ddd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215de1:	48 01 c2             	add    %rax,%rdx
  8004215de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215de8:	48 01 c2             	add    %rax,%rdx
  8004215deb:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215df2:	00 00 00 
  8004215df5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215df9:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e00:	00 00 00 
  8004215e03:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215e07:	48 89 c2             	mov    %rax,%rdx
  8004215e0a:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e11:	00 00 00 
  8004215e14:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215e18:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e1b:	48 98                	cltq   
  8004215e1d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e24:	ff 
  8004215e25:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215e29:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215e30:	00 00 00 
  8004215e33:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215e37:	e9 9f 03 00 00       	jmpq   80042161db <read_section_headers+0x725>
  8004215e3c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215e40:	48 be 37 b2 21 04 80 	movabs $0x800421b237,%rsi
  8004215e47:	00 00 00 
  8004215e4a:	48 89 c7             	mov    %rax,%rdi
  8004215e4d:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215e54:	00 00 00 
  8004215e57:	ff d0                	callq  *%rax
  8004215e59:	85 c0                	test   %eax,%eax
  8004215e5b:	0f 85 e1 00 00 00    	jne    8004215f42 <read_section_headers+0x48c>
  8004215e61:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e64:	48 98                	cltq   
  8004215e66:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e6d:	ff 
  8004215e6e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215e72:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215e75:	48 98                	cltq   
  8004215e77:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215e7e:	ff 
  8004215e7f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215e83:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  8004215e8a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004215e8e:	48 01 f1             	add    %rsi,%rcx
  8004215e91:	48 89 cf             	mov    %rcx,%rdi
  8004215e94:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215e9b:	48 89 c6             	mov    %rax,%rsi
  8004215e9e:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004215ea5:	00 00 00 
  8004215ea8:	ff d0                	callq  *%rax
  8004215eaa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ead:	48 98                	cltq   
  8004215eaf:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215eb6:	ff 
  8004215eb7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215ebb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215ebe:	48 98                	cltq   
  8004215ec0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215ec7:	ff 
  8004215ec8:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ecc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215ed3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215eda:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215ee0:	48 29 c2             	sub    %rax,%rdx
  8004215ee3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215ee7:	48 01 c2             	add    %rax,%rdx
  8004215eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215eee:	48 01 c2             	add    %rax,%rdx
  8004215ef1:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ef8:	00 00 00 
  8004215efb:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215eff:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f06:	00 00 00 
  8004215f09:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004215f0d:	48 89 c2             	mov    %rax,%rdx
  8004215f10:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f17:	00 00 00 
  8004215f1a:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004215f1e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f21:	48 98                	cltq   
  8004215f23:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f2a:	ff 
  8004215f2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215f2f:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215f36:	00 00 00 
  8004215f39:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004215f3d:	e9 99 02 00 00       	jmpq   80042161db <read_section_headers+0x725>
  8004215f42:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004215f46:	48 be 4f b2 21 04 80 	movabs $0x800421b24f,%rsi
  8004215f4d:	00 00 00 
  8004215f50:	48 89 c7             	mov    %rax,%rdi
  8004215f53:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004215f5a:	00 00 00 
  8004215f5d:	ff d0                	callq  *%rax
  8004215f5f:	85 c0                	test   %eax,%eax
  8004215f61:	0f 85 e1 00 00 00    	jne    8004216048 <read_section_headers+0x592>
  8004215f67:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f6a:	48 98                	cltq   
  8004215f6c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f73:	ff 
  8004215f74:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215f78:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215f7b:	48 98                	cltq   
  8004215f7d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215f84:	ff 
  8004215f85:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215f89:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  8004215f90:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004215f94:	48 01 f1             	add    %rsi,%rcx
  8004215f97:	48 89 cf             	mov    %rcx,%rdi
  8004215f9a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004215fa1:	48 89 c6             	mov    %rax,%rsi
  8004215fa4:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004215fab:	00 00 00 
  8004215fae:	ff d0                	callq  *%rax
  8004215fb0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fb3:	48 98                	cltq   
  8004215fb5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fbc:	ff 
  8004215fbd:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215fc1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004215fc4:	48 98                	cltq   
  8004215fc6:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004215fcd:	ff 
  8004215fce:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215fd2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004215fd9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004215fe0:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004215fe6:	48 29 c2             	sub    %rax,%rdx
  8004215fe9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004215fed:	48 01 c2             	add    %rax,%rdx
  8004215ff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215ff4:	48 01 c2             	add    %rax,%rdx
  8004215ff7:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004215ffe:	00 00 00 
  8004216001:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216005:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421600c:	00 00 00 
  800421600f:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216013:	48 89 c2             	mov    %rax,%rdx
  8004216016:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421601d:	00 00 00 
  8004216020:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216024:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216027:	48 98                	cltq   
  8004216029:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216030:	ff 
  8004216031:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216035:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421603c:	00 00 00 
  800421603f:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216043:	e9 93 01 00 00       	jmpq   80042161db <read_section_headers+0x725>
  8004216048:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421604c:	48 be 45 b2 21 04 80 	movabs $0x800421b245,%rsi
  8004216053:	00 00 00 
  8004216056:	48 89 c7             	mov    %rax,%rdi
  8004216059:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  8004216060:	00 00 00 
  8004216063:	ff d0                	callq  *%rax
  8004216065:	85 c0                	test   %eax,%eax
  8004216067:	75 65                	jne    80042160ce <read_section_headers+0x618>
  8004216069:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421606c:	48 98                	cltq   
  800421606e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216075:	ff 
  8004216076:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421607a:	48 89 c2             	mov    %rax,%rdx
  800421607d:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216084:	00 00 00 
  8004216087:	48 89 50 48          	mov    %rdx,0x48(%rax)
  800421608b:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  8004216092:	00 00 00 
  8004216095:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216099:	48 89 c2             	mov    %rax,%rdx
  800421609c:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160a3:	00 00 00 
  80042160a6:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042160aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160ad:	48 98                	cltq   
  80042160af:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160b6:	ff 
  80042160b7:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042160bb:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042160c2:	00 00 00 
  80042160c5:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042160c9:	e9 0d 01 00 00       	jmpq   80042161db <read_section_headers+0x725>
  80042160ce:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042160d2:	48 be 5b b2 21 04 80 	movabs $0x800421b25b,%rsi
  80042160d9:	00 00 00 
  80042160dc:	48 89 c7             	mov    %rax,%rdi
  80042160df:	48 b8 29 00 21 04 80 	movabs $0x8004210029,%rax
  80042160e6:	00 00 00 
  80042160e9:	ff d0                	callq  *%rax
  80042160eb:	85 c0                	test   %eax,%eax
  80042160ed:	0f 85 e8 00 00 00    	jne    80042161db <read_section_headers+0x725>
  80042160f3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042160f6:	48 98                	cltq   
  80042160f8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042160ff:	ff 
  8004216100:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216104:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216107:	48 98                	cltq   
  8004216109:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216110:	ff 
  8004216111:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216115:	48 8b b5 b8 fe ff ff 	mov    -0x148(%rbp),%rsi
  800421611c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004216120:	48 01 f1             	add    %rsi,%rcx
  8004216123:	48 89 cf             	mov    %rcx,%rdi
  8004216126:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421612d:	48 89 c6             	mov    %rax,%rsi
  8004216130:	48 b8 fb 61 21 04 80 	movabs $0x80042161fb,%rax
  8004216137:	00 00 00 
  800421613a:	ff d0                	callq  *%rax
  800421613c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421613f:	48 98                	cltq   
  8004216141:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216148:	ff 
  8004216149:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421614d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216150:	48 98                	cltq   
  8004216152:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216159:	ff 
  800421615a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421615e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216165:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421616c:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216172:	48 29 c2             	sub    %rax,%rdx
  8004216175:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216179:	48 01 c2             	add    %rax,%rdx
  800421617c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216180:	48 01 c2             	add    %rax,%rdx
  8004216183:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421618a:	00 00 00 
  800421618d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216194:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  800421619b:	00 00 00 
  800421619e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  80042161a5:	48 89 c2             	mov    %rax,%rdx
  80042161a8:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042161af:	00 00 00 
  80042161b2:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  80042161b9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042161bc:	48 98                	cltq   
  80042161be:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042161c5:	ff 
  80042161c6:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042161ca:	48 b8 c0 c6 22 04 80 	movabs $0x800422c6c0,%rax
  80042161d1:	00 00 00 
  80042161d4:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042161db:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042161df:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042161e2:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042161e5:	0f 8c e4 fa ff ff    	jl     8004215ccf <read_section_headers+0x219>
  80042161eb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042161ef:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042161f6:	48 01 d0             	add    %rdx,%rax
  80042161f9:	c9                   	leaveq 
  80042161fa:	c3                   	retq   

00000080042161fb <readseg>:
  80042161fb:	55                   	push   %rbp
  80042161fc:	48 89 e5             	mov    %rsp,%rbp
  80042161ff:	48 83 ec 30          	sub    $0x30,%rsp
  8004216203:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216207:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421620b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421620f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216213:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216217:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421621b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421621f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216223:	48 01 d0             	add    %rdx,%rax
  8004216226:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421622a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421622e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216233:	48 85 c0             	test   %rax,%rax
  8004216236:	74 35                	je     800421626d <readseg+0x72>
  8004216238:	48 b9 a5 b2 21 04 80 	movabs $0x800421b2a5,%rcx
  800421623f:	00 00 00 
  8004216242:	48 ba 7f b2 21 04 80 	movabs $0x800421b27f,%rdx
  8004216249:	00 00 00 
  800421624c:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216251:	48 bf 94 b2 21 04 80 	movabs $0x800421b294,%rdi
  8004216258:	00 00 00 
  800421625b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216260:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004216267:	00 00 00 
  800421626a:	41 ff d0             	callq  *%r8
  800421626d:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216274:	ff 
  8004216275:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216279:	48 c1 e8 09          	shr    $0x9,%rax
  800421627d:	48 83 c0 01          	add    $0x1,%rax
  8004216281:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216285:	eb 3c                	jmp    80042162c3 <readseg+0xc8>
  8004216287:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421628b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421628f:	48 89 d6             	mov    %rdx,%rsi
  8004216292:	48 89 c7             	mov    %rax,%rdi
  8004216295:	48 b8 8d 63 21 04 80 	movabs $0x800421638d,%rax
  800421629c:	00 00 00 
  800421629f:	ff d0                	callq  *%rax
  80042162a1:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  80042162a8:	00 
  80042162a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162ad:	48 8b 00             	mov    (%rax),%rax
  80042162b0:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  80042162b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162bb:	48 89 10             	mov    %rdx,(%rax)
  80042162be:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  80042162c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042162c7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042162cb:	72 ba                	jb     8004216287 <readseg+0x8c>
  80042162cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042162d1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042162d6:	48 89 c2             	mov    %rax,%rdx
  80042162d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042162dd:	48 01 d0             	add    %rdx,%rax
  80042162e0:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  80042162e6:	76 2f                	jbe    8004216317 <readseg+0x11c>
  80042162e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042162ec:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042162f0:	48 89 d6             	mov    %rdx,%rsi
  80042162f3:	48 89 c7             	mov    %rax,%rdi
  80042162f6:	48 b8 8d 63 21 04 80 	movabs $0x800421638d,%rax
  80042162fd:	00 00 00 
  8004216300:	ff d0                	callq  *%rax
  8004216302:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216306:	48 8b 00             	mov    (%rax),%rax
  8004216309:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216310:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216314:	48 89 10             	mov    %rdx,(%rax)
  8004216317:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421631b:	48 8b 00             	mov    (%rax),%rax
  800421631e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216323:	48 85 c0             	test   %rax,%rax
  8004216326:	74 35                	je     800421635d <readseg+0x162>
  8004216328:	48 b9 b8 b2 21 04 80 	movabs $0x800421b2b8,%rcx
  800421632f:	00 00 00 
  8004216332:	48 ba 7f b2 21 04 80 	movabs $0x800421b27f,%rdx
  8004216339:	00 00 00 
  800421633c:	be da 00 00 00       	mov    $0xda,%esi
  8004216341:	48 bf 94 b2 21 04 80 	movabs $0x800421b294,%rdi
  8004216348:	00 00 00 
  800421634b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216350:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004216357:	00 00 00 
  800421635a:	41 ff d0             	callq  *%r8
  800421635d:	90                   	nop
  800421635e:	c9                   	leaveq 
  800421635f:	c3                   	retq   

0000008004216360 <waitdisk>:
  8004216360:	55                   	push   %rbp
  8004216361:	48 89 e5             	mov    %rsp,%rbp
  8004216364:	48 83 ec 10          	sub    $0x10,%rsp
  8004216368:	90                   	nop
  8004216369:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216370:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216373:	89 c2                	mov    %eax,%edx
  8004216375:	ec                   	in     (%dx),%al
  8004216376:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216379:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800421637d:	0f b6 c0             	movzbl %al,%eax
  8004216380:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216385:	83 f8 40             	cmp    $0x40,%eax
  8004216388:	75 df                	jne    8004216369 <waitdisk+0x9>
  800421638a:	90                   	nop
  800421638b:	c9                   	leaveq 
  800421638c:	c3                   	retq   

000000800421638d <readsect>:
  800421638d:	55                   	push   %rbp
  800421638e:	48 89 e5             	mov    %rsp,%rbp
  8004216391:	48 83 ec 50          	sub    $0x50,%rsp
  8004216395:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004216399:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421639d:	48 b8 60 63 21 04 80 	movabs $0x8004216360,%rax
  80042163a4:	00 00 00 
  80042163a7:	ff d0                	callq  *%rax
  80042163a9:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  80042163b0:	c6 45 ce 01          	movb   $0x1,-0x32(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042163b4:	0f b6 45 ce          	movzbl -0x32(%rbp),%eax
  80042163b8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042163bb:	ee                   	out    %al,(%dx)
  80042163bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042163c0:	0f b6 c0             	movzbl %al,%eax
  80042163c3:	c7 45 f8 f3 01 00 00 	movl   $0x1f3,-0x8(%rbp)
  80042163ca:	88 45 cf             	mov    %al,-0x31(%rbp)
  80042163cd:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  80042163d1:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042163d4:	ee                   	out    %al,(%dx)
  80042163d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042163d9:	48 c1 e8 08          	shr    $0x8,%rax
  80042163dd:	0f b6 c0             	movzbl %al,%eax
  80042163e0:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%rbp)
  80042163e7:	88 45 d0             	mov    %al,-0x30(%rbp)
  80042163ea:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
  80042163ee:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042163f1:	ee                   	out    %al,(%dx)
  80042163f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042163f6:	48 c1 e8 10          	shr    $0x10,%rax
  80042163fa:	0f b6 c0             	movzbl %al,%eax
  80042163fd:	c7 45 f0 f5 01 00 00 	movl   $0x1f5,-0x10(%rbp)
  8004216404:	88 45 d1             	mov    %al,-0x2f(%rbp)
  8004216407:	0f b6 45 d1          	movzbl -0x2f(%rbp),%eax
  800421640b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421640e:	ee                   	out    %al,(%dx)
  800421640f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216413:	48 c1 e8 18          	shr    $0x18,%rax
  8004216417:	83 c8 e0             	or     $0xffffffe0,%eax
  800421641a:	0f b6 c0             	movzbl %al,%eax
  800421641d:	c7 45 ec f6 01 00 00 	movl   $0x1f6,-0x14(%rbp)
  8004216424:	88 45 d2             	mov    %al,-0x2e(%rbp)
  8004216427:	0f b6 45 d2          	movzbl -0x2e(%rbp),%eax
  800421642b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421642e:	ee                   	out    %al,(%dx)
  800421642f:	c7 45 e8 f7 01 00 00 	movl   $0x1f7,-0x18(%rbp)
  8004216436:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800421643a:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  800421643e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004216441:	ee                   	out    %al,(%dx)
  8004216442:	48 b8 60 63 21 04 80 	movabs $0x8004216360,%rax
  8004216449:	00 00 00 
  800421644c:	ff d0                	callq  *%rax
  800421644e:	c7 45 e4 f0 01 00 00 	movl   $0x1f0,-0x1c(%rbp)
  8004216455:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216459:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421645d:	c7 45 d4 80 00 00 00 	movl   $0x80,-0x2c(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216464:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216467:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421646b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421646e:	48 89 ce             	mov    %rcx,%rsi
  8004216471:	48 89 f7             	mov    %rsi,%rdi
  8004216474:	89 c1                	mov    %eax,%ecx
  8004216476:	fc                   	cld    
  8004216477:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004216479:	89 c8                	mov    %ecx,%eax
  800421647b:	48 89 fe             	mov    %rdi,%rsi
  800421647e:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004216482:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004216485:	90                   	nop
  8004216486:	c9                   	leaveq 
  8004216487:	c3                   	retq   

0000008004216488 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216488:	fa                   	cli    
	xorw    %ax, %ax
  8004216489:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  800421648b:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  800421648d:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  800421648f:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216491:	0f 01 16             	lgdt   (%rsi)
  8004216494:	e0 70                	loopne 8004216506 <start64+0x10>
	movl    %cr0, %eax
  8004216496:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216499:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  800421649d:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  80042164a0:	ea                   	(bad)  
  80042164a1:	1d                   	.byte 0x1d
  80042164a2:	70 08                	jo     80042164ac <start32+0x7>
	...

00000080042164a5 <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  80042164a5:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042164a9:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042164ab:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042164ad:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  80042164af:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  80042164b3:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  80042164b5:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
  80042164b7:	b8 20 20 00 00       	mov    $0x2020,%eax
#endif

	movl %eax,%cr4
  80042164bc:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  80042164bf:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421d586 <bootstack+0x1586>
	movl    %cr0, %eax
  80042164c6:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  80042164c9:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  80042164cc:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  80042164cf:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  80042164d4:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  80042164d7:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  80042164dc:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  80042164de:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  80042164e2:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  80042164e4:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  80042164e7:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  80042164ec:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  80042164ef:	ea                   	(bad)  
  80042164f0:	6e                   	outsb  %ds:(%rsi),(%dx)
  80042164f1:	70 00                	jo     80042164f3 <start32+0x4e>
  80042164f3:	00 08                	add    %cl,(%rax)
	...

00000080042164f6 <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  80042164f6:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  80042164fa:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  80042164fc:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  80042164fe:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216500:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216504:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216506:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216508:	48 a1 d8 d5 69 04 80 	movabs 0x800469d5d8,%rax
  800421650f:	00 00 00 
	movq    %rax,%rsp
  8004216512:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004216515:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  800421651c:	48 b8 26 05 20 04 80 	movabs $0x8004200526,%rax
  8004216523:	00 00 00 
	call    *%rax
  8004216526:	ff d0                	callq  *%rax

0000008004216528 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216528:	eb fe                	jmp    8004216528 <spin>
  800421652a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216530 <gdt>:
	...
  8004216538:	ff                   	(bad)  
  8004216539:	ff 00                	incl   (%rax)
  800421653b:	00 00                	add    %al,(%rax)
  800421653d:	9a                   	(bad)  
  800421653e:	af                   	scas   %es:(%rdi),%eax
  800421653f:	00 ff                	add    %bh,%bh
  8004216541:	ff 00                	incl   (%rax)
  8004216543:	00 00                	add    %al,(%rax)
  8004216545:	92                   	xchg   %eax,%edx
  8004216546:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216548 <gdtdesc>:
  8004216548:	17                   	(bad)  
  8004216549:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  800421654f:	90                   	nop

0000008004216550 <gdt32>:
	...
  8004216558:	ff                   	(bad)  
  8004216559:	ff 00                	incl   (%rax)
  800421655b:	00 00                	add    %al,(%rax)
  800421655d:	9a                   	(bad)  
  800421655e:	cf                   	iret   
  800421655f:	00 ff                	add    %bh,%bh
  8004216561:	ff 00                	incl   (%rax)
  8004216563:	00 00                	add    %al,(%rax)
  8004216565:	92                   	xchg   %eax,%edx
  8004216566:	cf                   	iret   
	...

0000008004216568 <gdt32desc>:
  8004216568:	17                   	(bad)  
  8004216569:	00 c8                	add    %cl,%al
  800421656b:	70 00                	jo     800421656d <gdt32desc+0x5>
	...

000000800421656e <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  800421656e:	90                   	nop

000000800421656f <sum>:
  800421656f:	55                   	push   %rbp
  8004216570:	48 89 e5             	mov    %rsp,%rbp
  8004216573:	48 83 ec 20          	sub    $0x20,%rsp
  8004216577:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421657b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421657e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004216585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421658c:	eb 1a                	jmp    80042165a8 <sum+0x39>
  800421658e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216591:	48 63 d0             	movslq %eax,%rdx
  8004216594:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216598:	48 01 d0             	add    %rdx,%rax
  800421659b:	0f b6 00             	movzbl (%rax),%eax
  800421659e:	0f b6 c0             	movzbl %al,%eax
  80042165a1:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042165a4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042165a8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042165ab:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042165ae:	7c de                	jl     800421658e <sum+0x1f>
  80042165b0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042165b3:	c9                   	leaveq 
  80042165b4:	c3                   	retq   

00000080042165b5 <mpsearch1>:
  80042165b5:	55                   	push   %rbp
  80042165b6:	48 89 e5             	mov    %rsp,%rbp
  80042165b9:	48 83 ec 40          	sub    $0x40,%rsp
  80042165bd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042165c1:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042165c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042165c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042165cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165d0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042165d4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042165d7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042165da:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042165e1:	00 00 00 
  80042165e4:	48 8b 00             	mov    (%rax),%rax
  80042165e7:	48 39 c2             	cmp    %rax,%rdx
  80042165ea:	72 32                	jb     800421661e <mpsearch1+0x69>
  80042165ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165f0:	48 89 c1             	mov    %rax,%rcx
  80042165f3:	48 ba d8 b2 21 04 80 	movabs $0x800421b2d8,%rdx
  80042165fa:	00 00 00 
  80042165fd:	be 74 00 00 00       	mov    $0x74,%esi
  8004216602:	48 bf fb b2 21 04 80 	movabs $0x800421b2fb,%rdi
  8004216609:	00 00 00 
  800421660c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216611:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004216618:	00 00 00 
  800421661b:	41 ff d0             	callq  *%r8
  800421661e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216625:	00 00 00 
  8004216628:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421662c:	48 01 d0             	add    %rdx,%rax
  800421662f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216633:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216636:	48 63 d0             	movslq %eax,%rdx
  8004216639:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421663d:	48 01 d0             	add    %rdx,%rax
  8004216640:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216644:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216648:	48 c1 e8 0c          	shr    $0xc,%rax
  800421664c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421664f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216652:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004216659:	00 00 00 
  800421665c:	48 8b 00             	mov    (%rax),%rax
  800421665f:	48 39 c2             	cmp    %rax,%rdx
  8004216662:	72 32                	jb     8004216696 <mpsearch1+0xe1>
  8004216664:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216668:	48 89 c1             	mov    %rax,%rcx
  800421666b:	48 ba d8 b2 21 04 80 	movabs $0x800421b2d8,%rdx
  8004216672:	00 00 00 
  8004216675:	be 74 00 00 00       	mov    $0x74,%esi
  800421667a:	48 bf fb b2 21 04 80 	movabs $0x800421b2fb,%rdi
  8004216681:	00 00 00 
  8004216684:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216689:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004216690:	00 00 00 
  8004216693:	41 ff d0             	callq  *%r8
  8004216696:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421669d:	00 00 00 
  80042166a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042166a4:	48 01 d0             	add    %rdx,%rax
  80042166a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042166ab:	eb 4d                	jmp    80042166fa <mpsearch1+0x145>
  80042166ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166b1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042166b6:	48 be 0e b3 21 04 80 	movabs $0x800421b30e,%rsi
  80042166bd:	00 00 00 
  80042166c0:	48 89 c7             	mov    %rax,%rdi
  80042166c3:	48 b8 37 03 21 04 80 	movabs $0x8004210337,%rax
  80042166ca:	00 00 00 
  80042166cd:	ff d0                	callq  *%rax
  80042166cf:	85 c0                	test   %eax,%eax
  80042166d1:	75 22                	jne    80042166f5 <mpsearch1+0x140>
  80042166d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166d7:	be 10 00 00 00       	mov    $0x10,%esi
  80042166dc:	48 89 c7             	mov    %rax,%rdi
  80042166df:	48 b8 6f 65 21 04 80 	movabs $0x800421656f,%rax
  80042166e6:	00 00 00 
  80042166e9:	ff d0                	callq  *%rax
  80042166eb:	84 c0                	test   %al,%al
  80042166ed:	75 06                	jne    80042166f5 <mpsearch1+0x140>
  80042166ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166f3:	eb 14                	jmp    8004216709 <mpsearch1+0x154>
  80042166f5:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  80042166fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166fe:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004216702:	72 a9                	jb     80042166ad <mpsearch1+0xf8>
  8004216704:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216709:	c9                   	leaveq 
  800421670a:	c3                   	retq   

000000800421670b <mpsearch>:
  800421670b:	55                   	push   %rbp
  800421670c:	48 89 e5             	mov    %rsp,%rbp
  800421670f:	48 83 ec 30          	sub    $0x30,%rsp
  8004216713:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  800421671a:	00 
  800421671b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421671f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216723:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004216726:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216729:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004216730:	00 00 00 
  8004216733:	48 8b 00             	mov    (%rax),%rax
  8004216736:	48 39 c2             	cmp    %rax,%rdx
  8004216739:	72 32                	jb     800421676d <mpsearch+0x62>
  800421673b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421673f:	48 89 c1             	mov    %rax,%rcx
  8004216742:	48 ba d8 b2 21 04 80 	movabs $0x800421b2d8,%rdx
  8004216749:	00 00 00 
  800421674c:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004216751:	48 bf fb b2 21 04 80 	movabs $0x800421b2fb,%rdi
  8004216758:	00 00 00 
  800421675b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216760:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004216767:	00 00 00 
  800421676a:	41 ff d0             	callq  *%r8
  800421676d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216774:	00 00 00 
  8004216777:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421677b:	48 01 d0             	add    %rdx,%rax
  800421677e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216786:	48 83 c0 0e          	add    $0xe,%rax
  800421678a:	0f b7 00             	movzwl (%rax),%eax
  800421678d:	0f b7 c0             	movzwl %ax,%eax
  8004216790:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004216793:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004216797:	74 2c                	je     80042167c5 <mpsearch+0xba>
  8004216799:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  800421679d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042167a0:	be 00 04 00 00       	mov    $0x400,%esi
  80042167a5:	48 89 c7             	mov    %rax,%rdi
  80042167a8:	48 b8 b5 65 21 04 80 	movabs $0x80042165b5,%rax
  80042167af:	00 00 00 
  80042167b2:	ff d0                	callq  *%rax
  80042167b4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042167b8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042167bd:	74 49                	je     8004216808 <mpsearch+0xfd>
  80042167bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042167c3:	eb 59                	jmp    800421681e <mpsearch+0x113>
  80042167c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042167c9:	48 83 c0 13          	add    $0x13,%rax
  80042167cd:	0f b7 00             	movzwl (%rax),%eax
  80042167d0:	0f b7 c0             	movzwl %ax,%eax
  80042167d3:	c1 e0 0a             	shl    $0xa,%eax
  80042167d6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042167d9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042167dc:	2d 00 04 00 00       	sub    $0x400,%eax
  80042167e1:	89 c0                	mov    %eax,%eax
  80042167e3:	be 00 04 00 00       	mov    $0x400,%esi
  80042167e8:	48 89 c7             	mov    %rax,%rdi
  80042167eb:	48 b8 b5 65 21 04 80 	movabs $0x80042165b5,%rax
  80042167f2:	00 00 00 
  80042167f5:	ff d0                	callq  *%rax
  80042167f7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042167fb:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004216800:	74 06                	je     8004216808 <mpsearch+0xfd>
  8004216802:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216806:	eb 16                	jmp    800421681e <mpsearch+0x113>
  8004216808:	be 00 00 01 00       	mov    $0x10000,%esi
  800421680d:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  8004216812:	48 b8 b5 65 21 04 80 	movabs $0x80042165b5,%rax
  8004216819:	00 00 00 
  800421681c:	ff d0                	callq  *%rax
  800421681e:	c9                   	leaveq 
  800421681f:	c3                   	retq   

0000008004216820 <mpconfig>:
  8004216820:	55                   	push   %rbp
  8004216821:	48 89 e5             	mov    %rsp,%rbp
  8004216824:	48 83 ec 30          	sub    $0x30,%rsp
  8004216828:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421682c:	48 b8 0b 67 21 04 80 	movabs $0x800421670b,%rax
  8004216833:	00 00 00 
  8004216836:	ff d0                	callq  *%rax
  8004216838:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421683c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004216841:	75 0a                	jne    800421684d <mpconfig+0x2d>
  8004216843:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216848:	e9 f8 01 00 00       	jmpq   8004216a45 <mpconfig+0x225>
  800421684d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216851:	8b 40 04             	mov    0x4(%rax),%eax
  8004216854:	85 c0                	test   %eax,%eax
  8004216856:	74 0c                	je     8004216864 <mpconfig+0x44>
  8004216858:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421685c:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004216860:	84 c0                	test   %al,%al
  8004216862:	74 25                	je     8004216889 <mpconfig+0x69>
  8004216864:	48 bf 18 b3 21 04 80 	movabs $0x800421b318,%rdi
  800421686b:	00 00 00 
  800421686e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216873:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  800421687a:	00 00 00 
  800421687d:	ff d2                	callq  *%rdx
  800421687f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216884:	e9 bc 01 00 00       	jmpq   8004216a45 <mpconfig+0x225>
  8004216889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421688d:	8b 40 04             	mov    0x4(%rax),%eax
  8004216890:	89 c0                	mov    %eax,%eax
  8004216892:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421689a:	48 c1 e8 0c          	shr    $0xc,%rax
  800421689e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042168a1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042168a4:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  80042168ab:	00 00 00 
  80042168ae:	48 8b 00             	mov    (%rax),%rax
  80042168b1:	48 39 c2             	cmp    %rax,%rdx
  80042168b4:	72 32                	jb     80042168e8 <mpconfig+0xc8>
  80042168b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168ba:	48 89 c1             	mov    %rax,%rcx
  80042168bd:	48 ba d8 b2 21 04 80 	movabs $0x800421b2d8,%rdx
  80042168c4:	00 00 00 
  80042168c7:	be ad 00 00 00       	mov    $0xad,%esi
  80042168cc:	48 bf fb b2 21 04 80 	movabs $0x800421b2fb,%rdi
  80042168d3:	00 00 00 
  80042168d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042168db:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042168e2:	00 00 00 
  80042168e5:	41 ff d0             	callq  *%r8
  80042168e8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042168ef:	00 00 00 
  80042168f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042168f6:	48 01 d0             	add    %rdx,%rax
  80042168f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042168fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216901:	ba 04 00 00 00       	mov    $0x4,%edx
  8004216906:	48 be 45 b3 21 04 80 	movabs $0x800421b345,%rsi
  800421690d:	00 00 00 
  8004216910:	48 89 c7             	mov    %rax,%rdi
  8004216913:	48 b8 37 03 21 04 80 	movabs $0x8004210337,%rax
  800421691a:	00 00 00 
  800421691d:	ff d0                	callq  *%rax
  800421691f:	85 c0                	test   %eax,%eax
  8004216921:	74 25                	je     8004216948 <mpconfig+0x128>
  8004216923:	48 bf 50 b3 21 04 80 	movabs $0x800421b350,%rdi
  800421692a:	00 00 00 
  800421692d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216932:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216939:	00 00 00 
  800421693c:	ff d2                	callq  *%rdx
  800421693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216943:	e9 fd 00 00 00       	jmpq   8004216a45 <mpconfig+0x225>
  8004216948:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421694c:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004216950:	0f b7 d0             	movzwl %ax,%edx
  8004216953:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216957:	89 d6                	mov    %edx,%esi
  8004216959:	48 89 c7             	mov    %rax,%rdi
  800421695c:	48 b8 6f 65 21 04 80 	movabs $0x800421656f,%rax
  8004216963:	00 00 00 
  8004216966:	ff d0                	callq  *%rax
  8004216968:	84 c0                	test   %al,%al
  800421696a:	74 25                	je     8004216991 <mpconfig+0x171>
  800421696c:	48 bf 88 b3 21 04 80 	movabs $0x800421b388,%rdi
  8004216973:	00 00 00 
  8004216976:	b8 00 00 00 00       	mov    $0x0,%eax
  800421697b:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216982:	00 00 00 
  8004216985:	ff d2                	callq  *%rdx
  8004216987:	b8 00 00 00 00       	mov    $0x0,%eax
  800421698c:	e9 b4 00 00 00       	jmpq   8004216a45 <mpconfig+0x225>
  8004216991:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216995:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004216999:	3c 01                	cmp    $0x1,%al
  800421699b:	74 3b                	je     80042169d8 <mpconfig+0x1b8>
  800421699d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042169a1:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042169a5:	3c 04                	cmp    $0x4,%al
  80042169a7:	74 2f                	je     80042169d8 <mpconfig+0x1b8>
  80042169a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042169ad:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042169b1:	0f b6 c0             	movzbl %al,%eax
  80042169b4:	89 c6                	mov    %eax,%esi
  80042169b6:	48 bf b0 b3 21 04 80 	movabs $0x800421b3b0,%rdi
  80042169bd:	00 00 00 
  80042169c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169c5:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042169cc:	00 00 00 
  80042169cf:	ff d2                	callq  *%rdx
  80042169d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042169d6:	eb 6d                	jmp    8004216a45 <mpconfig+0x225>
  80042169d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042169dc:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042169e0:	0f b7 c0             	movzwl %ax,%eax
  80042169e3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042169e7:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042169eb:	0f b7 ca             	movzwl %dx,%ecx
  80042169ee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042169f2:	48 01 ca             	add    %rcx,%rdx
  80042169f5:	89 c6                	mov    %eax,%esi
  80042169f7:	48 89 d7             	mov    %rdx,%rdi
  80042169fa:	48 b8 6f 65 21 04 80 	movabs $0x800421656f,%rax
  8004216a01:	00 00 00 
  8004216a04:	ff d0                	callq  *%rax
  8004216a06:	89 c2                	mov    %eax,%edx
  8004216a08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216a0c:	0f b6 40 2a          	movzbl 0x2a(%rax),%eax
  8004216a10:	38 c2                	cmp    %al,%dl
  8004216a12:	74 22                	je     8004216a36 <mpconfig+0x216>
  8004216a14:	48 bf d0 b3 21 04 80 	movabs $0x800421b3d0,%rdi
  8004216a1b:	00 00 00 
  8004216a1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a23:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216a2a:	00 00 00 
  8004216a2d:	ff d2                	callq  *%rdx
  8004216a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216a34:	eb 0f                	jmp    8004216a45 <mpconfig+0x225>
  8004216a36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a3a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216a3e:	48 89 10             	mov    %rdx,(%rax)
  8004216a41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216a45:	c9                   	leaveq 
  8004216a46:	c3                   	retq   

0000008004216a47 <mp_init>:
  8004216a47:	55                   	push   %rbp
  8004216a48:	48 89 e5             	mov    %rsp,%rbp
  8004216a4b:	48 83 ec 40          	sub    $0x40,%rsp
  8004216a4f:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216a56:	00 00 00 
  8004216a59:	48 be 20 f0 69 04 80 	movabs $0x800469f020,%rsi
  8004216a60:	00 00 00 
  8004216a63:	48 89 30             	mov    %rsi,(%rax)
  8004216a66:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  8004216a6a:	48 89 c7             	mov    %rax,%rdi
  8004216a6d:	48 b8 20 68 21 04 80 	movabs $0x8004216820,%rax
  8004216a74:	00 00 00 
  8004216a77:	ff d0                	callq  *%rax
  8004216a79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216a7d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004216a82:	0f 84 d3 03 00 00    	je     8004216e5b <mp_init+0x414>
  8004216a88:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004216a8f:	00 00 00 
  8004216a92:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216a98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216a9c:	8b 40 24             	mov    0x24(%rax),%eax
  8004216a9f:	89 c2                	mov    %eax,%edx
  8004216aa1:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004216aa8:	00 00 00 
  8004216aab:	48 89 10             	mov    %rdx,(%rax)
  8004216aae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ab2:	48 83 c0 2c          	add    $0x2c,%rax
  8004216ab6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216aba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216ac1:	e9 17 02 00 00       	jmpq   8004216cdd <mp_init+0x296>
  8004216ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216aca:	0f b6 00             	movzbl (%rax),%eax
  8004216acd:	0f b6 c0             	movzbl %al,%eax
  8004216ad0:	85 c0                	test   %eax,%eax
  8004216ad2:	74 16                	je     8004216aea <mp_init+0xa3>
  8004216ad4:	85 c0                	test   %eax,%eax
  8004216ad6:	0f 88 b8 01 00 00    	js     8004216c94 <mp_init+0x24d>
  8004216adc:	83 f8 04             	cmp    $0x4,%eax
  8004216adf:	0f 8f af 01 00 00    	jg     8004216c94 <mp_init+0x24d>
  8004216ae5:	e9 a3 01 00 00       	jmpq   8004216c8d <mp_init+0x246>
  8004216aea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216aee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216af2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216af6:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216afa:	0f b6 c0             	movzbl %al,%eax
  8004216afd:	83 e0 02             	and    $0x2,%eax
  8004216b00:	85 c0                	test   %eax,%eax
  8004216b02:	74 51                	je     8004216b55 <mp_init+0x10e>
  8004216b04:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216b0b:	00 00 00 
  8004216b0e:	8b 00                	mov    (%rax),%eax
  8004216b10:	48 98                	cltq   
  8004216b12:	48 c1 e0 03          	shl    $0x3,%rax
  8004216b16:	48 89 c2             	mov    %rax,%rdx
  8004216b19:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216b1d:	48 01 d0             	add    %rdx,%rax
  8004216b20:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216b27:	00 00 00 
  8004216b2a:	48 01 c2             	add    %rax,%rdx
  8004216b2d:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216b34:	00 00 00 
  8004216b37:	48 89 10             	mov    %rdx,(%rax)
  8004216b3a:	48 bf fd b3 21 04 80 	movabs $0x800421b3fd,%rdi
  8004216b41:	00 00 00 
  8004216b44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216b49:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216b50:	00 00 00 
  8004216b53:	ff d2                	callq  *%rdx
  8004216b55:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216b5c:	00 00 00 
  8004216b5f:	8b 00                	mov    (%rax),%eax
  8004216b61:	83 f8 03             	cmp    $0x3,%eax
  8004216b64:	0f 8f f4 00 00 00    	jg     8004216c5e <mp_init+0x217>
  8004216b6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b6e:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004216b72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b76:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216b7a:	0f b6 f0             	movzbl %al,%esi
  8004216b7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b81:	8b 78 08             	mov    0x8(%rax),%edi
  8004216b84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b88:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004216b8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b90:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004216b94:	0f b6 c8             	movzbl %al,%ecx
  8004216b97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b9b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216b9f:	0f b6 d0             	movzbl %al,%edx
  8004216ba2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216ba6:	0f b6 00             	movzbl (%rax),%eax
  8004216ba9:	0f b6 c0             	movzbl %al,%eax
  8004216bac:	41 50                	push   %r8
  8004216bae:	56                   	push   %rsi
  8004216baf:	41 89 f9             	mov    %edi,%r9d
  8004216bb2:	4d 89 d0             	mov    %r10,%r8
  8004216bb5:	89 c6                	mov    %eax,%esi
  8004216bb7:	48 bf 10 b4 21 04 80 	movabs $0x800421b410,%rdi
  8004216bbe:	00 00 00 
  8004216bc1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216bc6:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  8004216bcd:	00 00 00 
  8004216bd0:	41 ff d2             	callq  *%r10
  8004216bd3:	48 83 c4 10          	add    $0x10,%rsp
  8004216bd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216bdb:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004216bdf:	0f b6 c0             	movzbl %al,%eax
  8004216be2:	83 e0 01             	and    $0x1,%eax
  8004216be5:	85 c0                	test   %eax,%eax
  8004216be7:	74 58                	je     8004216c41 <mp_init+0x1fa>
  8004216be9:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216bf0:	00 00 00 
  8004216bf3:	8b 08                	mov    (%rax),%ecx
  8004216bf5:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216bfc:	00 00 00 
  8004216bff:	8b 00                	mov    (%rax),%eax
  8004216c01:	89 c6                	mov    %eax,%esi
  8004216c03:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216c0a:	00 00 00 
  8004216c0d:	48 63 c1             	movslq %ecx,%rax
  8004216c10:	48 c1 e0 03          	shl    $0x3,%rax
  8004216c14:	48 89 c1             	mov    %rax,%rcx
  8004216c17:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216c1b:	48 01 c8             	add    %rcx,%rax
  8004216c1e:	48 01 d0             	add    %rdx,%rax
  8004216c21:	40 88 30             	mov    %sil,(%rax)
  8004216c24:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216c2b:	00 00 00 
  8004216c2e:	8b 00                	mov    (%rax),%eax
  8004216c30:	8d 50 01             	lea    0x1(%rax),%edx
  8004216c33:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216c3a:	00 00 00 
  8004216c3d:	89 10                	mov    %edx,(%rax)
  8004216c3f:	eb 45                	jmp    8004216c86 <mp_init+0x23f>
  8004216c41:	48 bf 60 b4 21 04 80 	movabs $0x800421b460,%rdi
  8004216c48:	00 00 00 
  8004216c4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c50:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216c57:	00 00 00 
  8004216c5a:	ff d2                	callq  *%rdx
  8004216c5c:	eb 28                	jmp    8004216c86 <mp_init+0x23f>
  8004216c5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216c62:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004216c66:	0f b6 c0             	movzbl %al,%eax
  8004216c69:	89 c6                	mov    %eax,%esi
  8004216c6b:	48 bf 90 b4 21 04 80 	movabs $0x800421b490,%rdi
  8004216c72:	00 00 00 
  8004216c75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216c7a:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216c81:	00 00 00 
  8004216c84:	ff d2                	callq  *%rdx
  8004216c86:	48 83 45 f8 14       	addq   $0x14,-0x8(%rbp)
  8004216c8b:	eb 4c                	jmp    8004216cd9 <mp_init+0x292>
  8004216c8d:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)
  8004216c92:	eb 45                	jmp    8004216cd9 <mp_init+0x292>
  8004216c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216c98:	0f b6 00             	movzbl (%rax),%eax
  8004216c9b:	0f b6 c0             	movzbl %al,%eax
  8004216c9e:	89 c6                	mov    %eax,%esi
  8004216ca0:	48 bf b8 b4 21 04 80 	movabs $0x800421b4b8,%rdi
  8004216ca7:	00 00 00 
  8004216caa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216caf:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216cb6:	00 00 00 
  8004216cb9:	ff d2                	callq  *%rdx
  8004216cbb:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004216cc2:	00 00 00 
  8004216cc5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004216ccb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ccf:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216cd3:	0f b7 c0             	movzwl %ax,%eax
  8004216cd6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004216cd9:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216cdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ce1:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  8004216ce5:	0f b7 c0             	movzwl %ax,%eax
  8004216ce8:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004216ceb:	0f 87 d5 fd ff ff    	ja     8004216ac6 <mp_init+0x7f>
  8004216cf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216cf8:	eb 52                	jmp    8004216d4c <mp_init+0x305>
  8004216cfa:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216d01:	00 00 00 
  8004216d04:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d07:	48 c1 e0 03          	shl    $0x3,%rax
  8004216d0b:	48 89 c1             	mov    %rax,%rcx
  8004216d0e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216d12:	48 01 c8             	add    %rcx,%rax
  8004216d15:	48 01 d0             	add    %rdx,%rax
  8004216d18:	48 83 c0 78          	add    $0x78,%rax
  8004216d1c:	c6 00 00             	movb   $0x0,(%rax)
  8004216d1f:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216d26:	00 00 00 
  8004216d29:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216d2c:	48 c1 e0 03          	shl    $0x3,%rax
  8004216d30:	48 89 c1             	mov    %rax,%rcx
  8004216d33:	48 c1 e1 04          	shl    $0x4,%rcx
  8004216d37:	48 01 c8             	add    %rcx,%rax
  8004216d3a:	48 01 d0             	add    %rdx,%rax
  8004216d3d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004216d41:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216d48:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216d4c:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  8004216d50:	76 a8                	jbe    8004216cfa <mp_init+0x2b3>
  8004216d52:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216d59:	00 00 00 
  8004216d5c:	48 8b 00             	mov    (%rax),%rax
  8004216d5f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004216d66:	48 b8 00 f0 69 04 80 	movabs $0x800469f000,%rax
  8004216d6d:	00 00 00 
  8004216d70:	8b 00                	mov    (%rax),%eax
  8004216d72:	85 c0                	test   %eax,%eax
  8004216d74:	75 41                	jne    8004216db7 <mp_init+0x370>
  8004216d76:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216d7d:	00 00 00 
  8004216d80:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004216d86:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004216d8d:	00 00 00 
  8004216d90:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004216d97:	48 bf d8 b4 21 04 80 	movabs $0x800421b4d8,%rdi
  8004216d9e:	00 00 00 
  8004216da1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216da6:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216dad:	00 00 00 
  8004216db0:	ff d2                	callq  *%rdx
  8004216db2:	e9 a5 00 00 00       	jmpq   8004216e5c <mp_init+0x415>
  8004216db7:	48 b8 48 f2 69 04 80 	movabs $0x800469f248,%rax
  8004216dbe:	00 00 00 
  8004216dc1:	8b 10                	mov    (%rax),%edx
  8004216dc3:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216dca:	00 00 00 
  8004216dcd:	48 8b 00             	mov    (%rax),%rax
  8004216dd0:	0f b6 00             	movzbl (%rax),%eax
  8004216dd3:	0f b6 c0             	movzbl %al,%eax
  8004216dd6:	89 c6                	mov    %eax,%esi
  8004216dd8:	48 bf 04 b5 21 04 80 	movabs $0x800421b504,%rdi
  8004216ddf:	00 00 00 
  8004216de2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216de7:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  8004216dee:	00 00 00 
  8004216df1:	ff d1                	callq  *%rcx
  8004216df3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216df7:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004216dfb:	84 c0                	test   %al,%al
  8004216dfd:	74 5d                	je     8004216e5c <mp_init+0x415>
  8004216dff:	48 bf 28 b5 21 04 80 	movabs $0x800421b528,%rdi
  8004216e06:	00 00 00 
  8004216e09:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216e0e:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004216e15:	00 00 00 
  8004216e18:	ff d2                	callq  *%rdx
  8004216e1a:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
  8004216e21:	c6 45 d1 70          	movb   $0x70,-0x2f(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216e25:	0f b6 45 d1          	movzbl -0x2f(%rbp),%eax
  8004216e29:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216e2c:	ee                   	out    %al,(%dx)
  8004216e2d:	c7 45 d8 23 00 00 00 	movl   $0x23,-0x28(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216e34:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004216e37:	89 c2                	mov    %eax,%edx
  8004216e39:	ec                   	in     (%dx),%al
  8004216e3a:	88 45 d2             	mov    %al,-0x2e(%rbp)
	return data;
  8004216e3d:	0f b6 45 d2          	movzbl -0x2e(%rbp),%eax
  8004216e41:	83 c8 01             	or     $0x1,%eax
  8004216e44:	0f b6 c0             	movzbl %al,%eax
  8004216e47:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%rbp)
  8004216e4e:	88 45 d3             	mov    %al,-0x2d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216e51:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216e55:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216e58:	ee                   	out    %al,(%dx)
  8004216e59:	eb 01                	jmp    8004216e5c <mp_init+0x415>
  8004216e5b:	90                   	nop
  8004216e5c:	c9                   	leaveq 
  8004216e5d:	c3                   	retq   

0000008004216e5e <lapicw>:
  8004216e5e:	55                   	push   %rbp
  8004216e5f:	48 89 e5             	mov    %rsp,%rbp
  8004216e62:	48 83 ec 08          	sub    $0x8,%rsp
  8004216e66:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004216e69:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004216e6c:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  8004216e73:	00 00 00 
  8004216e76:	48 8b 00             	mov    (%rax),%rax
  8004216e79:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216e7c:	48 63 d2             	movslq %edx,%rdx
  8004216e7f:	48 c1 e2 02          	shl    $0x2,%rdx
  8004216e83:	48 01 c2             	add    %rax,%rdx
  8004216e86:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216e89:	89 02                	mov    %eax,(%rdx)
  8004216e8b:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  8004216e92:	00 00 00 
  8004216e95:	48 8b 00             	mov    (%rax),%rax
  8004216e98:	48 83 c0 20          	add    $0x20,%rax
  8004216e9c:	8b 00                	mov    (%rax),%eax
  8004216e9e:	90                   	nop
  8004216e9f:	c9                   	leaveq 
  8004216ea0:	c3                   	retq   

0000008004216ea1 <lapic_init>:
  8004216ea1:	55                   	push   %rbp
  8004216ea2:	48 89 e5             	mov    %rsp,%rbp
  8004216ea5:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004216eac:	00 00 00 
  8004216eaf:	48 8b 00             	mov    (%rax),%rax
  8004216eb2:	48 85 c0             	test   %rax,%rax
  8004216eb5:	0f 84 df 01 00 00    	je     800421709a <lapic_init+0x1f9>
  8004216ebb:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004216ec2:	00 00 00 
  8004216ec5:	48 8b 00             	mov    (%rax),%rax
  8004216ec8:	be 00 10 00 00       	mov    $0x1000,%esi
  8004216ecd:	48 89 c7             	mov    %rax,%rdi
  8004216ed0:	48 b8 b9 40 20 04 80 	movabs $0x80042040b9,%rax
  8004216ed7:	00 00 00 
  8004216eda:	ff d0                	callq  *%rax
  8004216edc:	48 89 c2             	mov    %rax,%rdx
  8004216edf:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  8004216ee6:	00 00 00 
  8004216ee9:	48 89 10             	mov    %rdx,(%rax)
  8004216eec:	be 27 01 00 00       	mov    $0x127,%esi
  8004216ef1:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004216ef6:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216efd:	00 00 00 
  8004216f00:	ff d0                	callq  *%rax
  8004216f02:	be 0b 00 00 00       	mov    $0xb,%esi
  8004216f07:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004216f0c:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216f13:	00 00 00 
  8004216f16:	ff d0                	callq  *%rax
  8004216f18:	be 20 00 02 00       	mov    $0x20020,%esi
  8004216f1d:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004216f22:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216f29:	00 00 00 
  8004216f2c:	ff d0                	callq  *%rax
  8004216f2e:	be 80 96 98 00       	mov    $0x989680,%esi
  8004216f33:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004216f38:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216f3f:	00 00 00 
  8004216f42:	ff d0                	callq  *%rax
  8004216f44:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004216f4b:	00 00 00 
  8004216f4e:	ff d0                	callq  *%rax
  8004216f50:	48 98                	cltq   
  8004216f52:	48 c1 e0 03          	shl    $0x3,%rax
  8004216f56:	48 89 c2             	mov    %rax,%rdx
  8004216f59:	48 c1 e2 04          	shl    $0x4,%rdx
  8004216f5d:	48 01 d0             	add    %rdx,%rax
  8004216f60:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  8004216f67:	00 00 00 
  8004216f6a:	48 01 c2             	add    %rax,%rdx
  8004216f6d:	48 b8 40 f2 69 04 80 	movabs $0x800469f240,%rax
  8004216f74:	00 00 00 
  8004216f77:	48 8b 00             	mov    (%rax),%rax
  8004216f7a:	48 39 c2             	cmp    %rax,%rdx
  8004216f7d:	74 16                	je     8004216f95 <lapic_init+0xf4>
  8004216f7f:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f84:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004216f89:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216f90:	00 00 00 
  8004216f93:	ff d0                	callq  *%rax
  8004216f95:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216f9a:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004216f9f:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216fa6:	00 00 00 
  8004216fa9:	ff d0                	callq  *%rax
  8004216fab:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  8004216fb2:	00 00 00 
  8004216fb5:	48 8b 00             	mov    (%rax),%rax
  8004216fb8:	48 83 c0 30          	add    $0x30,%rax
  8004216fbc:	8b 00                	mov    (%rax),%eax
  8004216fbe:	c1 e8 10             	shr    $0x10,%eax
  8004216fc1:	0f b6 c0             	movzbl %al,%eax
  8004216fc4:	83 f8 03             	cmp    $0x3,%eax
  8004216fc7:	76 16                	jbe    8004216fdf <lapic_init+0x13e>
  8004216fc9:	be 00 00 01 00       	mov    $0x10000,%esi
  8004216fce:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004216fd3:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216fda:	00 00 00 
  8004216fdd:	ff d0                	callq  *%rax
  8004216fdf:	be 33 00 00 00       	mov    $0x33,%esi
  8004216fe4:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004216fe9:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004216ff0:	00 00 00 
  8004216ff3:	ff d0                	callq  *%rax
  8004216ff5:	be 00 00 00 00       	mov    $0x0,%esi
  8004216ffa:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004216fff:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217006:	00 00 00 
  8004217009:	ff d0                	callq  *%rax
  800421700b:	be 00 00 00 00       	mov    $0x0,%esi
  8004217010:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217015:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  800421701c:	00 00 00 
  800421701f:	ff d0                	callq  *%rax
  8004217021:	be 00 00 00 00       	mov    $0x0,%esi
  8004217026:	bf 2c 00 00 00       	mov    $0x2c,%edi
  800421702b:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217032:	00 00 00 
  8004217035:	ff d0                	callq  *%rax
  8004217037:	be 00 00 00 00       	mov    $0x0,%esi
  800421703c:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217041:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217048:	00 00 00 
  800421704b:	ff d0                	callq  *%rax
  800421704d:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217052:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217057:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  800421705e:	00 00 00 
  8004217061:	ff d0                	callq  *%rax
  8004217063:	90                   	nop
  8004217064:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  800421706b:	00 00 00 
  800421706e:	48 8b 00             	mov    (%rax),%rax
  8004217071:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217077:	8b 00                	mov    (%rax),%eax
  8004217079:	25 00 10 00 00       	and    $0x1000,%eax
  800421707e:	85 c0                	test   %eax,%eax
  8004217080:	75 e2                	jne    8004217064 <lapic_init+0x1c3>
  8004217082:	be 00 00 00 00       	mov    $0x0,%esi
  8004217087:	bf 20 00 00 00       	mov    $0x20,%edi
  800421708c:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217093:	00 00 00 
  8004217096:	ff d0                	callq  *%rax
  8004217098:	eb 01                	jmp    800421709b <lapic_init+0x1fa>
  800421709a:	90                   	nop
  800421709b:	5d                   	pop    %rbp
  800421709c:	c3                   	retq   

000000800421709d <cpunum>:
  800421709d:	55                   	push   %rbp
  800421709e:	48 89 e5             	mov    %rsp,%rbp
  80042170a1:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042170a8:	00 00 00 
  80042170ab:	48 8b 00             	mov    (%rax),%rax
  80042170ae:	48 85 c0             	test   %rax,%rax
  80042170b1:	74 18                	je     80042170cb <cpunum+0x2e>
  80042170b3:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042170ba:	00 00 00 
  80042170bd:	48 8b 00             	mov    (%rax),%rax
  80042170c0:	48 83 c0 20          	add    $0x20,%rax
  80042170c4:	8b 00                	mov    (%rax),%eax
  80042170c6:	c1 e8 18             	shr    $0x18,%eax
  80042170c9:	eb 05                	jmp    80042170d0 <cpunum+0x33>
  80042170cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170d0:	5d                   	pop    %rbp
  80042170d1:	c3                   	retq   

00000080042170d2 <lapic_eoi>:
  80042170d2:	55                   	push   %rbp
  80042170d3:	48 89 e5             	mov    %rsp,%rbp
  80042170d6:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042170dd:	00 00 00 
  80042170e0:	48 8b 00             	mov    (%rax),%rax
  80042170e3:	48 85 c0             	test   %rax,%rax
  80042170e6:	74 16                	je     80042170fe <lapic_eoi+0x2c>
  80042170e8:	be 00 00 00 00       	mov    $0x0,%esi
  80042170ed:	bf 2c 00 00 00       	mov    $0x2c,%edi
  80042170f2:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  80042170f9:	00 00 00 
  80042170fc:	ff d0                	callq  *%rax
  80042170fe:	90                   	nop
  80042170ff:	5d                   	pop    %rbp
  8004217100:	c3                   	retq   

0000008004217101 <microdelay>:
  8004217101:	55                   	push   %rbp
  8004217102:	48 89 e5             	mov    %rsp,%rbp
  8004217105:	48 83 ec 08          	sub    $0x8,%rsp
  8004217109:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800421710c:	90                   	nop
  800421710d:	c9                   	leaveq 
  800421710e:	c3                   	retq   

000000800421710f <lapic_startap>:
  800421710f:	55                   	push   %rbp
  8004217110:	48 89 e5             	mov    %rsp,%rbp
  8004217113:	48 83 ec 40          	sub    $0x40,%rsp
  8004217117:	89 f8                	mov    %edi,%eax
  8004217119:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800421711c:	88 45 cc             	mov    %al,-0x34(%rbp)
  800421711f:	c7 45 f8 70 00 00 00 	movl   $0x70,-0x8(%rbp)
  8004217126:	c6 45 da 0f          	movb   $0xf,-0x26(%rbp)
  800421712a:	0f b6 45 da          	movzbl -0x26(%rbp),%eax
  800421712e:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004217131:	ee                   	out    %al,(%dx)
  8004217132:	c7 45 dc 71 00 00 00 	movl   $0x71,-0x24(%rbp)
  8004217139:	c6 45 db 0a          	movb   $0xa,-0x25(%rbp)
  800421713d:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217141:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217144:	ee                   	out    %al,(%dx)
  8004217145:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  800421714c:	00 
  800421714d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217151:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217155:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217158:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421715b:	48 b8 f0 d5 69 04 80 	movabs $0x800469d5f0,%rax
  8004217162:	00 00 00 
  8004217165:	48 8b 00             	mov    (%rax),%rax
  8004217168:	48 39 c2             	cmp    %rax,%rdx
  800421716b:	72 32                	jb     800421719f <lapic_startap+0x90>
  800421716d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217171:	48 89 c1             	mov    %rax,%rcx
  8004217174:	48 ba 70 b5 21 04 80 	movabs $0x800421b570,%rdx
  800421717b:	00 00 00 
  800421717e:	be 99 00 00 00       	mov    $0x99,%esi
  8004217183:	48 bf 93 b5 21 04 80 	movabs $0x800421b593,%rdi
  800421718a:	00 00 00 
  800421718d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217192:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217199:	00 00 00 
  800421719c:	41 ff d0             	callq  *%r8
  800421719f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042171a6:	00 00 00 
  80042171a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042171ad:	48 01 d0             	add    %rdx,%rax
  80042171b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042171b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171b8:	66 c7 00 00 00       	movw   $0x0,(%rax)
  80042171bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171c1:	48 83 c0 02          	add    $0x2,%rax
  80042171c5:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042171c8:	c1 ea 04             	shr    $0x4,%edx
  80042171cb:	66 89 10             	mov    %dx,(%rax)
  80042171ce:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042171d2:	c1 e0 18             	shl    $0x18,%eax
  80042171d5:	89 c6                	mov    %eax,%esi
  80042171d7:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042171dc:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  80042171e3:	00 00 00 
  80042171e6:	ff d0                	callq  *%rax
  80042171e8:	be 00 c5 00 00       	mov    $0xc500,%esi
  80042171ed:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042171f2:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  80042171f9:	00 00 00 
  80042171fc:	ff d0                	callq  *%rax
  80042171fe:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217203:	48 b8 01 71 21 04 80 	movabs $0x8004217101,%rax
  800421720a:	00 00 00 
  800421720d:	ff d0                	callq  *%rax
  800421720f:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217214:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217219:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217220:	00 00 00 
  8004217223:	ff d0                	callq  *%rax
  8004217225:	bf 64 00 00 00       	mov    $0x64,%edi
  800421722a:	48 b8 01 71 21 04 80 	movabs $0x8004217101,%rax
  8004217231:	00 00 00 
  8004217234:	ff d0                	callq  *%rax
  8004217236:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421723d:	eb 4b                	jmp    800421728a <lapic_startap+0x17b>
  800421723f:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217243:	c1 e0 18             	shl    $0x18,%eax
  8004217246:	89 c6                	mov    %eax,%esi
  8004217248:	bf c4 00 00 00       	mov    $0xc4,%edi
  800421724d:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217254:	00 00 00 
  8004217257:	ff d0                	callq  *%rax
  8004217259:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421725c:	c1 e8 0c             	shr    $0xc,%eax
  800421725f:	80 cc 06             	or     $0x6,%ah
  8004217262:	89 c6                	mov    %eax,%esi
  8004217264:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217269:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  8004217270:	00 00 00 
  8004217273:	ff d0                	callq  *%rax
  8004217275:	bf c8 00 00 00       	mov    $0xc8,%edi
  800421727a:	48 b8 01 71 21 04 80 	movabs $0x8004217101,%rax
  8004217281:	00 00 00 
  8004217284:	ff d0                	callq  *%rax
  8004217286:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421728a:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  800421728e:	7e af                	jle    800421723f <lapic_startap+0x130>
  8004217290:	90                   	nop
  8004217291:	c9                   	leaveq 
  8004217292:	c3                   	retq   

0000008004217293 <lapic_ipi>:
  8004217293:	55                   	push   %rbp
  8004217294:	48 89 e5             	mov    %rsp,%rbp
  8004217297:	48 83 ec 08          	sub    $0x8,%rsp
  800421729b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800421729e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042172a1:	0d 00 00 0c 00       	or     $0xc0000,%eax
  80042172a6:	89 c6                	mov    %eax,%esi
  80042172a8:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042172ad:	48 b8 5e 6e 21 04 80 	movabs $0x8004216e5e,%rax
  80042172b4:	00 00 00 
  80042172b7:	ff d0                	callq  *%rax
  80042172b9:	90                   	nop
  80042172ba:	48 b8 08 00 6e 04 80 	movabs $0x80046e0008,%rax
  80042172c1:	00 00 00 
  80042172c4:	48 8b 00             	mov    (%rax),%rax
  80042172c7:	48 05 00 03 00 00    	add    $0x300,%rax
  80042172cd:	8b 00                	mov    (%rax),%eax
  80042172cf:	25 00 10 00 00       	and    $0x1000,%eax
  80042172d4:	85 c0                	test   %eax,%eax
  80042172d6:	75 e2                	jne    80042172ba <lapic_ipi+0x27>
  80042172d8:	90                   	nop
  80042172d9:	c9                   	leaveq 
  80042172da:	c3                   	retq   

00000080042172db <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  80042172db:	55                   	push   %rbp
  80042172dc:	48 89 e5             	mov    %rsp,%rbp
  80042172df:	48 83 ec 20          	sub    $0x20,%rsp
  80042172e3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042172e7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  80042172ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042172ee:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042172f1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042172f5:	f0 87 02             	lock xchg %eax,(%rdx)
  80042172f8:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  80042172fb:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042172fe:	c9                   	leaveq 
  80042172ff:	c3                   	retq   

0000008004217300 <get_caller_pcs>:
  8004217300:	55                   	push   %rbp
  8004217301:	48 89 e5             	mov    %rsp,%rbp
  8004217304:	48 83 ec 28          	sub    $0x28,%rsp
  8004217308:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  800421730c:	48 89 e8             	mov    %rbp,%rax
  800421730f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217317:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421731b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217322:	eb 45                	jmp    8004217369 <get_caller_pcs+0x69>
  8004217324:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217329:	74 65                	je     8004217390 <get_caller_pcs+0x90>
  800421732b:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217332:	00 00 00 
  8004217335:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004217339:	76 55                	jbe    8004217390 <get_caller_pcs+0x90>
  800421733b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421733e:	48 98                	cltq   
  8004217340:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217347:	00 
  8004217348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421734c:	48 01 c2             	add    %rax,%rdx
  800421734f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217353:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217357:	48 89 02             	mov    %rax,(%rdx)
  800421735a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421735e:	48 8b 00             	mov    (%rax),%rax
  8004217361:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217365:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217369:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  800421736d:	7e b5                	jle    8004217324 <get_caller_pcs+0x24>
  800421736f:	eb 1f                	jmp    8004217390 <get_caller_pcs+0x90>
  8004217371:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217374:	48 98                	cltq   
  8004217376:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421737d:	00 
  800421737e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217382:	48 01 d0             	add    %rdx,%rax
  8004217385:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421738c:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217390:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217394:	7e db                	jle    8004217371 <get_caller_pcs+0x71>
  8004217396:	90                   	nop
  8004217397:	c9                   	leaveq 
  8004217398:	c3                   	retq   

0000008004217399 <holding>:
  8004217399:	55                   	push   %rbp
  800421739a:	48 89 e5             	mov    %rsp,%rbp
  800421739d:	53                   	push   %rbx
  800421739e:	48 83 ec 18          	sub    $0x18,%rsp
  80042173a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042173a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173aa:	8b 00                	mov    (%rax),%eax
  80042173ac:	85 c0                	test   %eax,%eax
  80042173ae:	74 3d                	je     80042173ed <holding+0x54>
  80042173b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042173b4:	48 8b 58 10          	mov    0x10(%rax),%rbx
  80042173b8:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042173bf:	00 00 00 
  80042173c2:	ff d0                	callq  *%rax
  80042173c4:	48 98                	cltq   
  80042173c6:	48 c1 e0 03          	shl    $0x3,%rax
  80042173ca:	48 89 c2             	mov    %rax,%rdx
  80042173cd:	48 c1 e2 04          	shl    $0x4,%rdx
  80042173d1:	48 01 d0             	add    %rdx,%rax
  80042173d4:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042173db:	00 00 00 
  80042173de:	48 01 d0             	add    %rdx,%rax
  80042173e1:	48 39 c3             	cmp    %rax,%rbx
  80042173e4:	75 07                	jne    80042173ed <holding+0x54>
  80042173e6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042173eb:	eb 05                	jmp    80042173f2 <holding+0x59>
  80042173ed:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173f2:	48 83 c4 18          	add    $0x18,%rsp
  80042173f6:	5b                   	pop    %rbx
  80042173f7:	5d                   	pop    %rbp
  80042173f8:	c3                   	retq   

00000080042173f9 <__spin_initlock>:
  80042173f9:	55                   	push   %rbp
  80042173fa:	48 89 e5             	mov    %rsp,%rbp
  80042173fd:	48 83 ec 10          	sub    $0x10,%rsp
  8004217401:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217405:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217409:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421740d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217417:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421741b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421741f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217423:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421742a:	00 
  800421742b:	90                   	nop
  800421742c:	c9                   	leaveq 
  800421742d:	c3                   	retq   

000000800421742e <spin_lock>:
  800421742e:	55                   	push   %rbp
  800421742f:	48 89 e5             	mov    %rsp,%rbp
  8004217432:	53                   	push   %rbx
  8004217433:	48 83 ec 18          	sub    $0x18,%rsp
  8004217437:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421743b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421743f:	48 89 c7             	mov    %rax,%rdi
  8004217442:	48 b8 99 73 21 04 80 	movabs $0x8004217399,%rax
  8004217449:	00 00 00 
  800421744c:	ff d0                	callq  *%rax
  800421744e:	85 c0                	test   %eax,%eax
  8004217450:	74 46                	je     8004217498 <spin_lock+0x6a>
  8004217452:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217456:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421745a:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004217461:	00 00 00 
  8004217464:	ff d0                	callq  *%rax
  8004217466:	49 89 d8             	mov    %rbx,%r8
  8004217469:	89 c1                	mov    %eax,%ecx
  800421746b:	48 ba b8 b5 21 04 80 	movabs $0x800421b5b8,%rdx
  8004217472:	00 00 00 
  8004217475:	be 42 00 00 00       	mov    $0x42,%esi
  800421747a:	48 bf e2 b5 21 04 80 	movabs $0x800421b5e2,%rdi
  8004217481:	00 00 00 
  8004217484:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217489:	49 b9 ec 05 20 04 80 	movabs $0x80042005ec,%r9
  8004217490:	00 00 00 
  8004217493:	41 ff d1             	callq  *%r9
  8004217496:	f3 90                	pause  
  8004217498:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421749c:	be 01 00 00 00       	mov    $0x1,%esi
  80042174a1:	48 89 c7             	mov    %rax,%rdi
  80042174a4:	48 b8 db 72 21 04 80 	movabs $0x80042172db,%rax
  80042174ab:	00 00 00 
  80042174ae:	ff d0                	callq  *%rax
  80042174b0:	85 c0                	test   %eax,%eax
  80042174b2:	75 e2                	jne    8004217496 <spin_lock+0x68>
  80042174b4:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042174bb:	00 00 00 
  80042174be:	ff d0                	callq  *%rax
  80042174c0:	48 98                	cltq   
  80042174c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042174c6:	48 89 c2             	mov    %rax,%rdx
  80042174c9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042174cd:	48 01 d0             	add    %rdx,%rax
  80042174d0:	48 ba 20 f0 69 04 80 	movabs $0x800469f020,%rdx
  80042174d7:	00 00 00 
  80042174da:	48 01 c2             	add    %rax,%rdx
  80042174dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042174e1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042174e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042174e9:	48 83 c0 18          	add    $0x18,%rax
  80042174ed:	48 89 c7             	mov    %rax,%rdi
  80042174f0:	48 b8 00 73 21 04 80 	movabs $0x8004217300,%rax
  80042174f7:	00 00 00 
  80042174fa:	ff d0                	callq  *%rax
  80042174fc:	90                   	nop
  80042174fd:	48 83 c4 18          	add    $0x18,%rsp
  8004217501:	5b                   	pop    %rbx
  8004217502:	5d                   	pop    %rbp
  8004217503:	c3                   	retq   

0000008004217504 <spin_unlock>:
  8004217504:	55                   	push   %rbp
  8004217505:	48 89 e5             	mov    %rsp,%rbp
  8004217508:	41 54                	push   %r12
  800421750a:	53                   	push   %rbx
  800421750b:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217512:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217519:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217520:	48 89 c7             	mov    %rax,%rdi
  8004217523:	48 b8 99 73 21 04 80 	movabs $0x8004217399,%rax
  800421752a:	00 00 00 
  800421752d:	ff d0                	callq  *%rax
  800421752f:	85 c0                	test   %eax,%eax
  8004217531:	0f 85 d8 01 00 00    	jne    800421770f <spin_unlock+0x20b>
  8004217537:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421753e:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217542:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217549:	ba 28 00 00 00       	mov    $0x28,%edx
  800421754e:	48 89 ce             	mov    %rcx,%rsi
  8004217551:	48 89 c7             	mov    %rax,%rdi
  8004217554:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  800421755b:	00 00 00 
  800421755e:	ff d0                	callq  *%rax
  8004217560:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217567:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421756b:	48 85 c0             	test   %rax,%rax
  800421756e:	75 39                	jne    80042175a9 <spin_unlock+0xa5>
  8004217570:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217577:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421757b:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  8004217582:	00 00 00 
  8004217585:	ff d0                	callq  *%rax
  8004217587:	48 89 da             	mov    %rbx,%rdx
  800421758a:	89 c6                	mov    %eax,%esi
  800421758c:	48 bf f8 b5 21 04 80 	movabs $0x800421b5f8,%rdi
  8004217593:	00 00 00 
  8004217596:	b8 00 00 00 00       	mov    $0x0,%eax
  800421759b:	48 b9 d4 95 20 04 80 	movabs $0x80042095d4,%rcx
  80042175a2:	00 00 00 
  80042175a5:	ff d1                	callq  *%rcx
  80042175a7:	eb 4d                	jmp    80042175f6 <spin_unlock+0xf2>
  80042175a9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042175b0:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042175b4:	0f b6 00             	movzbl (%rax),%eax
  80042175b7:	44 0f b6 e0          	movzbl %al,%r12d
  80042175bb:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042175c2:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042175c6:	48 b8 9d 70 21 04 80 	movabs $0x800421709d,%rax
  80042175cd:	00 00 00 
  80042175d0:	ff d0                	callq  *%rax
  80042175d2:	44 89 e1             	mov    %r12d,%ecx
  80042175d5:	48 89 da             	mov    %rbx,%rdx
  80042175d8:	89 c6                	mov    %eax,%esi
  80042175da:	48 bf 38 b6 21 04 80 	movabs $0x800421b638,%rdi
  80042175e1:	00 00 00 
  80042175e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042175e9:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  80042175f0:	00 00 00 
  80042175f3:	41 ff d0             	callq  *%r8
  80042175f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042175fd:	e9 c9 00 00 00       	jmpq   80042176cb <spin_unlock+0x1c7>
  8004217602:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217605:	48 98                	cltq   
  8004217607:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421760e:	89 c2                	mov    %eax,%edx
  8004217610:	48 8d 85 10 fb ff ff 	lea    -0x4f0(%rbp),%rax
  8004217617:	48 89 c6             	mov    %rax,%rsi
  800421761a:	48 89 d7             	mov    %rdx,%rdi
  800421761d:	48 b8 fc ed 20 04 80 	movabs $0x800420edfc,%rax
  8004217624:	00 00 00 
  8004217627:	ff d0                	callq  *%rax
  8004217629:	85 c0                	test   %eax,%eax
  800421762b:	78 71                	js     800421769e <spin_unlock+0x19a>
  800421762d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217630:	48 98                	cltq   
  8004217632:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217639:	89 c2                	mov    %eax,%edx
  800421763b:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217642:	48 29 c2             	sub    %rax,%rdx
  8004217645:	49 89 d0             	mov    %rdx,%r8
  8004217648:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  800421764f:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217655:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  800421765b:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217662:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217665:	48 98                	cltq   
  8004217667:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421766e:	48 83 ec 08          	sub    $0x8,%rsp
  8004217672:	41 50                	push   %r8
  8004217674:	49 89 f9             	mov    %rdi,%r9
  8004217677:	41 89 f0             	mov    %esi,%r8d
  800421767a:	89 c6                	mov    %eax,%esi
  800421767c:	48 bf 6e b6 21 04 80 	movabs $0x800421b66e,%rdi
  8004217683:	00 00 00 
  8004217686:	b8 00 00 00 00       	mov    $0x0,%eax
  800421768b:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  8004217692:	00 00 00 
  8004217695:	41 ff d2             	callq  *%r10
  8004217698:	48 83 c4 10          	add    $0x10,%rsp
  800421769c:	eb 29                	jmp    80042176c7 <spin_unlock+0x1c3>
  800421769e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042176a1:	48 98                	cltq   
  80042176a3:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042176aa:	89 c6                	mov    %eax,%esi
  80042176ac:	48 bf 85 b6 21 04 80 	movabs $0x800421b685,%rdi
  80042176b3:	00 00 00 
  80042176b6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176bb:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  80042176c2:	00 00 00 
  80042176c5:	ff d2                	callq  *%rdx
  80042176c7:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042176cb:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042176cf:	7f 14                	jg     80042176e5 <spin_unlock+0x1e1>
  80042176d1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042176d4:	48 98                	cltq   
  80042176d6:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042176dd:	85 c0                	test   %eax,%eax
  80042176df:	0f 85 1d ff ff ff    	jne    8004217602 <spin_unlock+0xfe>
  80042176e5:	48 ba 8d b6 21 04 80 	movabs $0x800421b68d,%rdx
  80042176ec:	00 00 00 
  80042176ef:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042176f4:	48 bf e2 b5 21 04 80 	movabs $0x800421b5e2,%rdi
  80042176fb:	00 00 00 
  80042176fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217703:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  800421770a:	00 00 00 
  800421770d:	ff d1                	callq  *%rcx
  800421770f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217716:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  800421771d:	00 
  800421771e:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217725:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421772c:	00 
  800421772d:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217734:	be 00 00 00 00       	mov    $0x0,%esi
  8004217739:	48 89 c7             	mov    %rax,%rdi
  800421773c:	48 b8 db 72 21 04 80 	movabs $0x80042172db,%rax
  8004217743:	00 00 00 
  8004217746:	ff d0                	callq  *%rax
  8004217748:	90                   	nop
  8004217749:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800421774d:	5b                   	pop    %rbx
  800421774e:	41 5c                	pop    %r12
  8004217750:	5d                   	pop    %rbp
  8004217751:	c3                   	retq   

0000008004217752 <e1000_attach>:
  8004217752:	55                   	push   %rbp
  8004217753:	48 89 e5             	mov    %rsp,%rbp
  8004217756:	48 83 ec 40          	sub    $0x40,%rsp
  800421775a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421775e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217762:	48 89 c7             	mov    %rax,%rdi
  8004217765:	48 b8 33 86 21 04 80 	movabs $0x8004218633,%rax
  800421776c:	00 00 00 
  800421776f:	ff d0                	callq  *%rax
  8004217771:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217775:	8b 40 30             	mov    0x30(%rax),%eax
  8004217778:	89 c2                	mov    %eax,%edx
  800421777a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421777e:	8b 40 18             	mov    0x18(%rax),%eax
  8004217781:	89 c0                	mov    %eax,%eax
  8004217783:	48 89 d6             	mov    %rdx,%rsi
  8004217786:	48 89 c7             	mov    %rax,%rdi
  8004217789:	48 b8 b9 40 20 04 80 	movabs $0x80042040b9,%rax
  8004217790:	00 00 00 
  8004217793:	ff d0                	callq  *%rax
  8004217795:	48 89 c2             	mov    %rax,%rdx
  8004217798:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  800421779f:	00 00 00 
  80042177a2:	48 89 10             	mov    %rdx,(%rax)
  80042177a5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042177ac:	e9 ac 00 00 00       	jmpq   800421785d <e1000_attach+0x10b>
  80042177b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042177b4:	48 98                	cltq   
  80042177b6:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042177bd:	48 b8 40 f8 49 04 80 	movabs $0x800449f840,%rax
  80042177c4:	00 00 00 
  80042177c7:	48 01 d0             	add    %rdx,%rax
  80042177ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042177ce:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042177d5:	00 00 00 
  80042177d8:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042177dc:	77 32                	ja     8004217810 <e1000_attach+0xbe>
  80042177de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042177e2:	48 89 c1             	mov    %rax,%rcx
  80042177e5:	48 ba a0 b6 21 04 80 	movabs $0x800421b6a0,%rdx
  80042177ec:	00 00 00 
  80042177ef:	be 97 00 00 00       	mov    $0x97,%esi
  80042177f4:	48 bf c4 b6 21 04 80 	movabs $0x800421b6c4,%rdi
  80042177fb:	00 00 00 
  80042177fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217803:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  800421780a:	00 00 00 
  800421780d:	41 ff d0             	callq  *%r8
  8004217810:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004217817:	ff ff ff 
  800421781a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421781e:	48 01 c2             	add    %rax,%rdx
  8004217821:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217828:	00 00 00 
  800421782b:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421782e:	48 63 c9             	movslq %ecx,%rcx
  8004217831:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217835:	48 01 c8             	add    %rcx,%rax
  8004217838:	48 89 10             	mov    %rdx,(%rax)
  800421783b:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217842:	00 00 00 
  8004217845:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217848:	48 63 d2             	movslq %edx,%rdx
  800421784b:	48 c1 e2 04          	shl    $0x4,%rdx
  800421784f:	48 01 d0             	add    %rdx,%rax
  8004217852:	48 83 c0 0c          	add    $0xc,%rax
  8004217856:	c6 00 01             	movb   $0x1,(%rax)
  8004217859:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421785d:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004217861:	0f 8e 4a ff ff ff    	jle    80042177b1 <e1000_attach+0x5f>
  8004217867:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  800421786e:	00 00 00 
  8004217871:	48 8b 00             	mov    (%rax),%rax
  8004217874:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  800421787b:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217882:	00 00 00 
  8004217885:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217889:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217890:	00 00 00 
  8004217893:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004217897:	77 32                	ja     80042178cb <e1000_attach+0x179>
  8004217899:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421789d:	48 89 c1             	mov    %rax,%rcx
  80042178a0:	48 ba a0 b6 21 04 80 	movabs $0x800421b6a0,%rdx
  80042178a7:	00 00 00 
  80042178aa:	be 9a 00 00 00       	mov    $0x9a,%esi
  80042178af:	48 bf c4 b6 21 04 80 	movabs $0x800421b6c4,%rdi
  80042178b6:	00 00 00 
  80042178b9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178be:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042178c5:	00 00 00 
  80042178c8:	41 ff d0             	callq  *%r8
  80042178cb:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042178d2:	ff ff ff 
  80042178d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042178d9:	48 01 c8             	add    %rcx,%rax
  80042178dc:	89 02                	mov    %eax,(%rdx)
  80042178de:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  80042178e5:	00 00 00 
  80042178e8:	48 8b 00             	mov    (%rax),%rax
  80042178eb:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042178f1:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042178f7:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  80042178fe:	00 00 00 
  8004217901:	48 8b 00             	mov    (%rax),%rax
  8004217904:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  800421790b:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217912:	00 00 00 
  8004217915:	48 8b 00             	mov    (%rax),%rax
  8004217918:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  800421791f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217924:	89 01                	mov    %eax,(%rcx)
  8004217926:	89 02                	mov    %eax,(%rdx)
  8004217928:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  800421792f:	00 00 00 
  8004217932:	48 8b 00             	mov    (%rax),%rax
  8004217935:	48 05 00 04 00 00    	add    $0x400,%rax
  800421793b:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  8004217941:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217948:	00 00 00 
  800421794b:	48 8b 00             	mov    (%rax),%rax
  800421794e:	48 05 10 04 00 00    	add    $0x410,%rax
  8004217954:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  800421795a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217961:	e9 8e 00 00 00       	jmpq   80042179f4 <e1000_attach+0x2a2>
  8004217966:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217969:	48 98                	cltq   
  800421796b:	48 c1 e0 0b          	shl    $0xb,%rax
  800421796f:	48 89 c2             	mov    %rax,%rdx
  8004217972:	48 b8 a0 95 4a 04 80 	movabs $0x80044a95a0,%rax
  8004217979:	00 00 00 
  800421797c:	48 01 d0             	add    %rdx,%rax
  800421797f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217983:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421798a:	00 00 00 
  800421798d:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004217991:	77 32                	ja     80042179c5 <e1000_attach+0x273>
  8004217993:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217997:	48 89 c1             	mov    %rax,%rcx
  800421799a:	48 ba a0 b6 21 04 80 	movabs $0x800421b6a0,%rdx
  80042179a1:	00 00 00 
  80042179a4:	be b8 00 00 00       	mov    $0xb8,%esi
  80042179a9:	48 bf c4 b6 21 04 80 	movabs $0x800421b6c4,%rdi
  80042179b0:	00 00 00 
  80042179b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042179b8:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  80042179bf:	00 00 00 
  80042179c2:	41 ff d0             	callq  *%r8
  80042179c5:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042179cc:	ff ff ff 
  80042179cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042179d3:	48 01 c2             	add    %rax,%rdx
  80042179d6:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  80042179dd:	00 00 00 
  80042179e0:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042179e3:	48 63 c9             	movslq %ecx,%rcx
  80042179e6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042179ea:	48 01 c8             	add    %rcx,%rax
  80042179ed:	48 89 10             	mov    %rdx,(%rax)
  80042179f0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042179f4:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042179fb:	0f 8e 65 ff ff ff    	jle    8004217966 <e1000_attach+0x214>
  8004217a01:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217a08:	00 00 00 
  8004217a0b:	48 8b 00             	mov    (%rax),%rax
  8004217a0e:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  8004217a15:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217a1c:	00 00 00 
  8004217a1f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217a23:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004217a2a:	00 00 00 
  8004217a2d:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004217a31:	77 32                	ja     8004217a65 <e1000_attach+0x313>
  8004217a33:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217a37:	48 89 c1             	mov    %rax,%rcx
  8004217a3a:	48 ba a0 b6 21 04 80 	movabs $0x800421b6a0,%rdx
  8004217a41:	00 00 00 
  8004217a44:	be ba 00 00 00       	mov    $0xba,%esi
  8004217a49:	48 bf c4 b6 21 04 80 	movabs $0x800421b6c4,%rdi
  8004217a50:	00 00 00 
  8004217a53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a58:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217a5f:	00 00 00 
  8004217a62:	41 ff d0             	callq  *%r8
  8004217a65:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004217a6c:	ff ff ff 
  8004217a6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217a73:	48 01 c8             	add    %rcx,%rax
  8004217a76:	89 02                	mov    %eax,(%rdx)
  8004217a78:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217a7f:	00 00 00 
  8004217a82:	48 8b 00             	mov    (%rax),%rax
  8004217a85:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004217a8b:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004217a91:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217a98:	00 00 00 
  8004217a9b:	48 8b 00             	mov    (%rax),%rax
  8004217a9e:	48 05 10 28 00 00    	add    $0x2810,%rax
  8004217aa4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217aaa:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217ab1:	00 00 00 
  8004217ab4:	48 8b 00             	mov    (%rax),%rax
  8004217ab7:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217abd:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004217ac3:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217aca:	00 00 00 
  8004217acd:	48 8b 00             	mov    (%rax),%rax
  8004217ad0:	48 05 00 01 00 00    	add    $0x100,%rax
  8004217ad6:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004217adc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217ae1:	c9                   	leaveq 
  8004217ae2:	c3                   	retq   

0000008004217ae3 <e1000_transmit>:
  8004217ae3:	55                   	push   %rbp
  8004217ae4:	48 89 e5             	mov    %rsp,%rbp
  8004217ae7:	48 83 ec 20          	sub    $0x20,%rsp
  8004217aeb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217aef:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217af2:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217af9:	00 00 00 
  8004217afc:	48 8b 00             	mov    (%rax),%rax
  8004217aff:	48 85 c0             	test   %rax,%rax
  8004217b02:	74 09                	je     8004217b0d <e1000_transmit+0x2a>
  8004217b04:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004217b0b:	76 0a                	jbe    8004217b17 <e1000_transmit+0x34>
  8004217b0d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004217b12:	e9 4a 01 00 00       	jmpq   8004217c61 <e1000_transmit+0x17e>
  8004217b17:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217b1e:	00 00 00 
  8004217b21:	48 8b 00             	mov    (%rax),%rax
  8004217b24:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004217b2a:	8b 00                	mov    (%rax),%eax
  8004217b2c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217b2f:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217b36:	00 00 00 
  8004217b39:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217b3c:	48 63 d2             	movslq %edx,%rdx
  8004217b3f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217b43:	48 01 d0             	add    %rdx,%rax
  8004217b46:	48 83 c0 0c          	add    $0xc,%rax
  8004217b4a:	0f b6 00             	movzbl (%rax),%eax
  8004217b4d:	0f b6 c0             	movzbl %al,%eax
  8004217b50:	83 e0 01             	and    $0x1,%eax
  8004217b53:	85 c0                	test   %eax,%eax
  8004217b55:	75 25                	jne    8004217b7c <e1000_transmit+0x99>
  8004217b57:	48 bf d4 b6 21 04 80 	movabs $0x800421b6d4,%rdi
  8004217b5e:	00 00 00 
  8004217b61:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b66:	48 ba d4 95 20 04 80 	movabs $0x80042095d4,%rdx
  8004217b6d:	00 00 00 
  8004217b70:	ff d2                	callq  *%rdx
  8004217b72:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b77:	e9 e5 00 00 00       	jmpq   8004217c61 <e1000_transmit+0x17e>
  8004217b7c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217b7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217b82:	48 98                	cltq   
  8004217b84:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004217b8b:	48 b8 40 f8 49 04 80 	movabs $0x800449f840,%rax
  8004217b92:	00 00 00 
  8004217b95:	48 01 c1             	add    %rax,%rcx
  8004217b98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217b9c:	48 89 c6             	mov    %rax,%rsi
  8004217b9f:	48 89 cf             	mov    %rcx,%rdi
  8004217ba2:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  8004217ba9:	00 00 00 
  8004217bac:	ff d0                	callq  *%rax
  8004217bae:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217bb1:	89 c1                	mov    %eax,%ecx
  8004217bb3:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217bba:	00 00 00 
  8004217bbd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217bc0:	48 63 d2             	movslq %edx,%rdx
  8004217bc3:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217bc7:	48 01 d0             	add    %rdx,%rax
  8004217bca:	48 83 c0 08          	add    $0x8,%rax
  8004217bce:	66 89 08             	mov    %cx,(%rax)
  8004217bd1:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217bd8:	00 00 00 
  8004217bdb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217bde:	48 63 d2             	movslq %edx,%rdx
  8004217be1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217be5:	48 01 d0             	add    %rdx,%rax
  8004217be8:	48 83 c0 0c          	add    $0xc,%rax
  8004217bec:	0f b6 00             	movzbl (%rax),%eax
  8004217bef:	83 e0 fe             	and    $0xfffffffe,%eax
  8004217bf2:	89 c2                	mov    %eax,%edx
  8004217bf4:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217bfb:	00 00 00 
  8004217bfe:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004217c01:	48 63 c9             	movslq %ecx,%rcx
  8004217c04:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217c08:	48 01 c8             	add    %rcx,%rax
  8004217c0b:	48 83 c0 0c          	add    $0xc,%rax
  8004217c0f:	88 10                	mov    %dl,(%rax)
  8004217c11:	48 b8 30 f7 49 04 80 	movabs $0x800449f730,%rax
  8004217c18:	00 00 00 
  8004217c1b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217c1e:	48 63 d2             	movslq %edx,%rdx
  8004217c21:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c25:	48 01 d0             	add    %rdx,%rax
  8004217c28:	48 83 c0 0b          	add    $0xb,%rax
  8004217c2c:	c6 00 09             	movb   $0x9,(%rax)
  8004217c2f:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217c36:	00 00 00 
  8004217c39:	48 8b 00             	mov    (%rax),%rax
  8004217c3c:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004217c43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217c46:	8d 50 01             	lea    0x1(%rax),%edx
  8004217c49:	89 d0                	mov    %edx,%eax
  8004217c4b:	c1 f8 1f             	sar    $0x1f,%eax
  8004217c4e:	c1 e8 1c             	shr    $0x1c,%eax
  8004217c51:	01 c2                	add    %eax,%edx
  8004217c53:	83 e2 0f             	and    $0xf,%edx
  8004217c56:	29 c2                	sub    %eax,%edx
  8004217c58:	89 d0                	mov    %edx,%eax
  8004217c5a:	89 01                	mov    %eax,(%rcx)
  8004217c5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c61:	c9                   	leaveq 
  8004217c62:	c3                   	retq   

0000008004217c63 <e1000_receive>:
  8004217c63:	55                   	push   %rbp
  8004217c64:	48 89 e5             	mov    %rsp,%rbp
  8004217c67:	48 83 ec 20          	sub    $0x20,%rsp
  8004217c6b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217c6f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217c72:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217c79:	00 00 00 
  8004217c7c:	48 8b 00             	mov    (%rax),%rax
  8004217c7f:	48 85 c0             	test   %rax,%rax
  8004217c82:	75 0a                	jne    8004217c8e <e1000_receive+0x2b>
  8004217c84:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c89:	e9 65 01 00 00       	jmpq   8004217df3 <e1000_receive+0x190>
  8004217c8e:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217c95:	00 00 00 
  8004217c98:	48 8b 00             	mov    (%rax),%rax
  8004217c9b:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004217ca1:	8b 00                	mov    (%rax),%eax
  8004217ca3:	8d 48 01             	lea    0x1(%rax),%ecx
  8004217ca6:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004217cab:	89 c8                	mov    %ecx,%eax
  8004217cad:	f7 e2                	mul    %edx
  8004217caf:	89 d0                	mov    %edx,%eax
  8004217cb1:	c1 e8 06             	shr    $0x6,%eax
  8004217cb4:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004217cba:	29 c1                	sub    %eax,%ecx
  8004217cbc:	89 c8                	mov    %ecx,%eax
  8004217cbe:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217cc1:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217cc8:	00 00 00 
  8004217ccb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217cce:	48 63 d2             	movslq %edx,%rdx
  8004217cd1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217cd5:	48 01 d0             	add    %rdx,%rax
  8004217cd8:	48 83 c0 0c          	add    $0xc,%rax
  8004217cdc:	0f b6 00             	movzbl (%rax),%eax
  8004217cdf:	0f b6 c0             	movzbl %al,%eax
  8004217ce2:	83 e0 01             	and    $0x1,%eax
  8004217ce5:	85 c0                	test   %eax,%eax
  8004217ce7:	75 0a                	jne    8004217cf3 <e1000_receive+0x90>
  8004217ce9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217cee:	e9 00 01 00 00       	jmpq   8004217df3 <e1000_receive+0x190>
  8004217cf3:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217cfa:	00 00 00 
  8004217cfd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217d00:	48 63 d2             	movslq %edx,%rdx
  8004217d03:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217d07:	48 01 d0             	add    %rdx,%rax
  8004217d0a:	48 83 c0 0c          	add    $0xc,%rax
  8004217d0e:	0f b6 00             	movzbl (%rax),%eax
  8004217d11:	0f b6 c0             	movzbl %al,%eax
  8004217d14:	83 e0 02             	and    $0x2,%eax
  8004217d17:	85 c0                	test   %eax,%eax
  8004217d19:	75 35                	jne    8004217d50 <e1000_receive+0xed>
  8004217d1b:	48 b9 e8 b6 21 04 80 	movabs $0x800421b6e8,%rcx
  8004217d22:	00 00 00 
  8004217d25:	48 ba 12 b7 21 04 80 	movabs $0x800421b712,%rdx
  8004217d2c:	00 00 00 
  8004217d2f:	be ef 00 00 00       	mov    $0xef,%esi
  8004217d34:	48 bf c4 b6 21 04 80 	movabs $0x800421b6c4,%rdi
  8004217d3b:	00 00 00 
  8004217d3e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d43:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217d4a:	00 00 00 
  8004217d4d:	41 ff d0             	callq  *%r8
  8004217d50:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217d53:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217d56:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217d5d:	00 00 00 
  8004217d60:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217d63:	48 63 d2             	movslq %edx,%rdx
  8004217d66:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217d6a:	48 01 d0             	add    %rdx,%rax
  8004217d6d:	48 83 c0 08          	add    $0x8,%rax
  8004217d71:	0f b7 00             	movzwl (%rax),%eax
  8004217d74:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  8004217d78:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004217d7c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217d7f:	39 c2                	cmp    %eax,%edx
  8004217d81:	0f 46 c2             	cmovbe %edx,%eax
  8004217d84:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217d87:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004217d8a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217d8d:	48 98                	cltq   
  8004217d8f:	48 c1 e0 0b          	shl    $0xb,%rax
  8004217d93:	48 89 c1             	mov    %rax,%rcx
  8004217d96:	48 b8 a0 95 4a 04 80 	movabs $0x80044a95a0,%rax
  8004217d9d:	00 00 00 
  8004217da0:	48 01 c1             	add    %rax,%rcx
  8004217da3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217da7:	48 89 ce             	mov    %rcx,%rsi
  8004217daa:	48 89 c7             	mov    %rax,%rdi
  8004217dad:	48 b8 ec 01 21 04 80 	movabs $0x80042101ec,%rax
  8004217db4:	00 00 00 
  8004217db7:	ff d0                	callq  *%rax
  8004217db9:	48 b8 20 57 4a 04 80 	movabs $0x80044a5720,%rax
  8004217dc0:	00 00 00 
  8004217dc3:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217dc6:	48 63 d2             	movslq %edx,%rdx
  8004217dc9:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217dcd:	48 01 d0             	add    %rdx,%rax
  8004217dd0:	48 83 c0 0c          	add    $0xc,%rax
  8004217dd4:	c6 00 00             	movb   $0x0,(%rax)
  8004217dd7:	48 b8 20 f7 49 04 80 	movabs $0x800449f720,%rax
  8004217dde:	00 00 00 
  8004217de1:	48 8b 00             	mov    (%rax),%rax
  8004217de4:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004217deb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217dee:	89 02                	mov    %eax,(%rdx)
  8004217df0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217df3:	c9                   	leaveq 
  8004217df4:	c3                   	retq   

0000008004217df5 <pci_conf1_set_addr>:
  8004217df5:	55                   	push   %rbp
  8004217df6:	48 89 e5             	mov    %rsp,%rbp
  8004217df9:	48 83 ec 20          	sub    $0x20,%rsp
  8004217dfd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004217e00:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004217e03:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  8004217e06:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004217e09:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004217e10:	76 35                	jbe    8004217e47 <pci_conf1_set_addr+0x52>
  8004217e12:	48 b9 28 b7 21 04 80 	movabs $0x800421b728,%rcx
  8004217e19:	00 00 00 
  8004217e1c:	48 ba 32 b7 21 04 80 	movabs $0x800421b732,%rdx
  8004217e23:	00 00 00 
  8004217e26:	be 31 00 00 00       	mov    $0x31,%esi
  8004217e2b:	48 bf 47 b7 21 04 80 	movabs $0x800421b747,%rdi
  8004217e32:	00 00 00 
  8004217e35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e3a:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217e41:	00 00 00 
  8004217e44:	41 ff d0             	callq  *%r8
  8004217e47:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  8004217e4b:	76 35                	jbe    8004217e82 <pci_conf1_set_addr+0x8d>
  8004217e4d:	48 b9 55 b7 21 04 80 	movabs $0x800421b755,%rcx
  8004217e54:	00 00 00 
  8004217e57:	48 ba 32 b7 21 04 80 	movabs $0x800421b732,%rdx
  8004217e5e:	00 00 00 
  8004217e61:	be 32 00 00 00       	mov    $0x32,%esi
  8004217e66:	48 bf 47 b7 21 04 80 	movabs $0x800421b747,%rdi
  8004217e6d:	00 00 00 
  8004217e70:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e75:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217e7c:	00 00 00 
  8004217e7f:	41 ff d0             	callq  *%r8
  8004217e82:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004217e86:	76 35                	jbe    8004217ebd <pci_conf1_set_addr+0xc8>
  8004217e88:	48 b9 5e b7 21 04 80 	movabs $0x800421b75e,%rcx
  8004217e8f:	00 00 00 
  8004217e92:	48 ba 32 b7 21 04 80 	movabs $0x800421b732,%rdx
  8004217e99:	00 00 00 
  8004217e9c:	be 33 00 00 00       	mov    $0x33,%esi
  8004217ea1:	48 bf 47 b7 21 04 80 	movabs $0x800421b747,%rdi
  8004217ea8:	00 00 00 
  8004217eab:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217eb0:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217eb7:	00 00 00 
  8004217eba:	41 ff d0             	callq  *%r8
  8004217ebd:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004217ec4:	76 35                	jbe    8004217efb <pci_conf1_set_addr+0x106>
  8004217ec6:	48 b9 67 b7 21 04 80 	movabs $0x800421b767,%rcx
  8004217ecd:	00 00 00 
  8004217ed0:	48 ba 32 b7 21 04 80 	movabs $0x800421b732,%rdx
  8004217ed7:	00 00 00 
  8004217eda:	be 34 00 00 00       	mov    $0x34,%esi
  8004217edf:	48 bf 47 b7 21 04 80 	movabs $0x800421b747,%rdi
  8004217ee6:	00 00 00 
  8004217ee9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217eee:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217ef5:	00 00 00 
  8004217ef8:	41 ff d0             	callq  *%r8
  8004217efb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004217efe:	83 e0 03             	and    $0x3,%eax
  8004217f01:	85 c0                	test   %eax,%eax
  8004217f03:	74 35                	je     8004217f3a <pci_conf1_set_addr+0x145>
  8004217f05:	48 b9 74 b7 21 04 80 	movabs $0x800421b774,%rcx
  8004217f0c:	00 00 00 
  8004217f0f:	48 ba 32 b7 21 04 80 	movabs $0x800421b732,%rdx
  8004217f16:	00 00 00 
  8004217f19:	be 35 00 00 00       	mov    $0x35,%esi
  8004217f1e:	48 bf 47 b7 21 04 80 	movabs $0x800421b747,%rdi
  8004217f25:	00 00 00 
  8004217f28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f2d:	49 b8 ec 05 20 04 80 	movabs $0x80042005ec,%r8
  8004217f34:	00 00 00 
  8004217f37:	41 ff d0             	callq  *%r8
  8004217f3a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f3d:	c1 e0 10             	shl    $0x10,%eax
  8004217f40:	89 c2                	mov    %eax,%edx
  8004217f42:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004217f45:	c1 e0 0b             	shl    $0xb,%eax
  8004217f48:	09 c2                	or     %eax,%edx
  8004217f4a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217f4d:	c1 e0 08             	shl    $0x8,%eax
  8004217f50:	09 d0                	or     %edx,%eax
  8004217f52:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004217f55:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004217f5a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004217f5d:	48 b8 e4 c7 22 04 80 	movabs $0x800422c7e4,%rax
  8004217f64:	00 00 00 
  8004217f67:	8b 00                	mov    (%rax),%eax
  8004217f69:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004217f6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217f6f:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004217f72:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217f75:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004217f78:	ef                   	out    %eax,(%dx)
  8004217f79:	90                   	nop
  8004217f7a:	c9                   	leaveq 
  8004217f7b:	c3                   	retq   

0000008004217f7c <pci_conf_read>:
  8004217f7c:	55                   	push   %rbp
  8004217f7d:	48 89 e5             	mov    %rsp,%rbp
  8004217f80:	48 83 ec 20          	sub    $0x20,%rsp
  8004217f84:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217f88:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217f8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f8f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217f92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f96:	8b 70 08             	mov    0x8(%rax),%esi
  8004217f99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f9d:	48 8b 00             	mov    (%rax),%rax
  8004217fa0:	8b 40 08             	mov    0x8(%rax),%eax
  8004217fa3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217fa6:	89 c7                	mov    %eax,%edi
  8004217fa8:	48 b8 f5 7d 21 04 80 	movabs $0x8004217df5,%rax
  8004217faf:	00 00 00 
  8004217fb2:	ff d0                	callq  *%rax
  8004217fb4:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004217fbb:	00 00 00 
  8004217fbe:	8b 00                	mov    (%rax),%eax
  8004217fc0:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004217fc3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217fc6:	89 c2                	mov    %eax,%edx
  8004217fc8:	ed                   	in     (%dx),%eax
  8004217fc9:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004217fcc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217fcf:	90                   	nop
  8004217fd0:	c9                   	leaveq 
  8004217fd1:	c3                   	retq   

0000008004217fd2 <pci_conf_write>:
  8004217fd2:	55                   	push   %rbp
  8004217fd3:	48 89 e5             	mov    %rsp,%rbp
  8004217fd6:	48 83 ec 20          	sub    $0x20,%rsp
  8004217fda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217fde:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004217fe1:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004217fe4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217fe8:	8b 50 0c             	mov    0xc(%rax),%edx
  8004217feb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217fef:	8b 70 08             	mov    0x8(%rax),%esi
  8004217ff2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ff6:	48 8b 00             	mov    (%rax),%rax
  8004217ff9:	8b 40 08             	mov    0x8(%rax),%eax
  8004217ffc:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004217fff:	89 c7                	mov    %eax,%edi
  8004218001:	48 b8 f5 7d 21 04 80 	movabs $0x8004217df5,%rax
  8004218008:	00 00 00 
  800421800b:	ff d0                	callq  *%rax
  800421800d:	48 b8 e8 c7 22 04 80 	movabs $0x800422c7e8,%rax
  8004218014:	00 00 00 
  8004218017:	8b 00                	mov    (%rax),%eax
  8004218019:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421801c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421801f:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218022:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218025:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218028:	ef                   	out    %eax,(%dx)
  8004218029:	90                   	nop
  800421802a:	c9                   	leaveq 
  800421802b:	c3                   	retq   

000000800421802c <pci_attach_match>:
  800421802c:	55                   	push   %rbp
  800421802d:	48 89 e5             	mov    %rsp,%rbp
  8004218030:	48 83 ec 30          	sub    $0x30,%rsp
  8004218034:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218037:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800421803a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  800421803e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218042:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218049:	e9 aa 00 00 00       	jmpq   80042180f8 <pci_attach_match+0xcc>
  800421804e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218051:	48 c1 e0 04          	shl    $0x4,%rax
  8004218055:	48 89 c2             	mov    %rax,%rdx
  8004218058:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421805c:	48 01 d0             	add    %rdx,%rax
  800421805f:	8b 00                	mov    (%rax),%eax
  8004218061:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218064:	0f 85 8a 00 00 00    	jne    80042180f4 <pci_attach_match+0xc8>
  800421806a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421806d:	48 c1 e0 04          	shl    $0x4,%rax
  8004218071:	48 89 c2             	mov    %rax,%rdx
  8004218074:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218078:	48 01 d0             	add    %rdx,%rax
  800421807b:	8b 40 04             	mov    0x4(%rax),%eax
  800421807e:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218081:	75 71                	jne    80042180f4 <pci_attach_match+0xc8>
  8004218083:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218086:	48 c1 e0 04          	shl    $0x4,%rax
  800421808a:	48 89 c2             	mov    %rax,%rdx
  800421808d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218091:	48 01 d0             	add    %rdx,%rax
  8004218094:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218098:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421809c:	48 89 d7             	mov    %rdx,%rdi
  800421809f:	ff d0                	callq  *%rax
  80042180a1:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042180a4:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042180a8:	7e 05                	jle    80042180af <pci_attach_match+0x83>
  80042180aa:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042180ad:	eb 6c                	jmp    800421811b <pci_attach_match+0xef>
  80042180af:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042180b3:	79 3f                	jns    80042180f4 <pci_attach_match+0xc8>
  80042180b5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042180b8:	48 c1 e0 04          	shl    $0x4,%rax
  80042180bc:	48 89 c2             	mov    %rax,%rdx
  80042180bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042180c3:	48 01 d0             	add    %rdx,%rax
  80042180c6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042180ca:	8b 75 f8             	mov    -0x8(%rbp),%esi
  80042180cd:	8b 55 e8             	mov    -0x18(%rbp),%edx
  80042180d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042180d3:	41 89 f0             	mov    %esi,%r8d
  80042180d6:	89 c6                	mov    %eax,%esi
  80042180d8:	48 bf 88 b7 21 04 80 	movabs $0x800421b788,%rdi
  80042180df:	00 00 00 
  80042180e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180e7:	49 b9 d4 95 20 04 80 	movabs $0x80042095d4,%r9
  80042180ee:	00 00 00 
  80042180f1:	41 ff d1             	callq  *%r9
  80042180f4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042180f8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042180fb:	48 c1 e0 04          	shl    $0x4,%rax
  80042180ff:	48 89 c2             	mov    %rax,%rdx
  8004218102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218106:	48 01 d0             	add    %rdx,%rax
  8004218109:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421810d:	48 85 c0             	test   %rax,%rax
  8004218110:	0f 85 38 ff ff ff    	jne    800421804e <pci_attach_match+0x22>
  8004218116:	b8 00 00 00 00       	mov    $0x0,%eax
  800421811b:	c9                   	leaveq 
  800421811c:	c3                   	retq   

000000800421811d <pci_attach>:
  800421811d:	55                   	push   %rbp
  800421811e:	48 89 e5             	mov    %rsp,%rbp
  8004218121:	48 83 ec 10          	sub    $0x10,%rsp
  8004218125:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421812d:	8b 40 14             	mov    0x14(%rax),%eax
  8004218130:	c1 e8 10             	shr    $0x10,%eax
  8004218133:	0f b6 c0             	movzbl %al,%eax
  8004218136:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421813a:	8b 52 14             	mov    0x14(%rdx),%edx
  800421813d:	89 d7                	mov    %edx,%edi
  800421813f:	c1 ef 18             	shr    $0x18,%edi
  8004218142:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218146:	48 89 d1             	mov    %rdx,%rcx
  8004218149:	48 ba 00 c8 22 04 80 	movabs $0x800422c800,%rdx
  8004218150:	00 00 00 
  8004218153:	89 c6                	mov    %eax,%esi
  8004218155:	48 b8 2c 80 21 04 80 	movabs $0x800421802c,%rax
  800421815c:	00 00 00 
  800421815f:	ff d0                	callq  *%rax
  8004218161:	85 c0                	test   %eax,%eax
  8004218163:	75 39                	jne    800421819e <pci_attach+0x81>
  8004218165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218169:	8b 40 10             	mov    0x10(%rax),%eax
  800421816c:	c1 e8 10             	shr    $0x10,%eax
  800421816f:	89 c6                	mov    %eax,%esi
  8004218171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218175:	8b 40 10             	mov    0x10(%rax),%eax
  8004218178:	0f b7 c0             	movzwl %ax,%eax
  800421817b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421817f:	48 89 d1             	mov    %rdx,%rcx
  8004218182:	48 ba 20 c8 22 04 80 	movabs $0x800422c820,%rdx
  8004218189:	00 00 00 
  800421818c:	89 c7                	mov    %eax,%edi
  800421818e:	48 b8 2c 80 21 04 80 	movabs $0x800421802c,%rax
  8004218195:	00 00 00 
  8004218198:	ff d0                	callq  *%rax
  800421819a:	85 c0                	test   %eax,%eax
  800421819c:	74 07                	je     80042181a5 <pci_attach+0x88>
  800421819e:	b8 01 00 00 00       	mov    $0x1,%eax
  80042181a3:	eb 05                	jmp    80042181aa <pci_attach+0x8d>
  80042181a5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181aa:	c9                   	leaveq 
  80042181ab:	c3                   	retq   

00000080042181ac <pci_print_func>:
  80042181ac:	55                   	push   %rbp
  80042181ad:	48 89 e5             	mov    %rsp,%rbp
  80042181b0:	48 83 ec 20          	sub    $0x20,%rsp
  80042181b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042181b8:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  80042181bf:	00 00 00 
  80042181c2:	48 8b 00             	mov    (%rax),%rax
  80042181c5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042181c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181cd:	8b 40 14             	mov    0x14(%rax),%eax
  80042181d0:	c1 e8 18             	shr    $0x18,%eax
  80042181d3:	83 f8 06             	cmp    $0x6,%eax
  80042181d6:	77 20                	ja     80042181f8 <pci_print_func+0x4c>
  80042181d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181dc:	8b 40 14             	mov    0x14(%rax),%eax
  80042181df:	c1 e8 18             	shr    $0x18,%eax
  80042181e2:	89 c2                	mov    %eax,%edx
  80042181e4:	48 b8 40 c8 22 04 80 	movabs $0x800422c840,%rax
  80042181eb:	00 00 00 
  80042181ee:	89 d2                	mov    %edx,%edx
  80042181f0:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  80042181f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042181f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042181fc:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218200:	0f b6 f8             	movzbl %al,%edi
  8004218203:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218207:	8b 40 14             	mov    0x14(%rax),%eax
  800421820a:	c1 e8 10             	shr    $0x10,%eax
  800421820d:	0f b6 f0             	movzbl %al,%esi
  8004218210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218214:	8b 40 14             	mov    0x14(%rax),%eax
  8004218217:	c1 e8 18             	shr    $0x18,%eax
  800421821a:	41 89 c1             	mov    %eax,%r9d
  800421821d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218221:	8b 40 10             	mov    0x10(%rax),%eax
  8004218224:	c1 e8 10             	shr    $0x10,%eax
  8004218227:	41 89 c2             	mov    %eax,%r10d
  800421822a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421822e:	8b 40 10             	mov    0x10(%rax),%eax
  8004218231:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218239:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421823c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218240:	8b 50 08             	mov    0x8(%rax),%edx
  8004218243:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218247:	48 8b 00             	mov    (%rax),%rax
  800421824a:	8b 40 08             	mov    0x8(%rax),%eax
  800421824d:	57                   	push   %rdi
  800421824e:	ff 75 f8             	pushq  -0x8(%rbp)
  8004218251:	56                   	push   %rsi
  8004218252:	41 51                	push   %r9
  8004218254:	45 89 d1             	mov    %r10d,%r9d
  8004218257:	89 c6                	mov    %eax,%esi
  8004218259:	48 bf 28 b8 21 04 80 	movabs $0x800421b828,%rdi
  8004218260:	00 00 00 
  8004218263:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218268:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  800421826f:	00 00 00 
  8004218272:	41 ff d2             	callq  *%r10
  8004218275:	48 83 c4 20          	add    $0x20,%rsp
  8004218279:	90                   	nop
  800421827a:	c9                   	leaveq 
  800421827b:	c3                   	retq   

000000800421827c <pci_scan_bus>:
  800421827c:	55                   	push   %rbp
  800421827d:	48 89 e5             	mov    %rsp,%rbp
  8004218280:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218287:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421828e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218295:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218299:	ba 50 00 00 00       	mov    $0x50,%edx
  800421829e:	be 00 00 00 00       	mov    $0x0,%esi
  80042182a3:	48 89 c7             	mov    %rax,%rdi
  80042182a6:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042182ad:	00 00 00 
  80042182b0:	ff d0                	callq  *%rax
  80042182b2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  80042182b9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042182bd:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  80042182c4:	e9 29 02 00 00       	jmpq   80042184f2 <pci_scan_bus+0x276>
  80042182c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042182cd:	be 0c 00 00 00       	mov    $0xc,%esi
  80042182d2:	48 89 c7             	mov    %rax,%rdi
  80042182d5:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  80042182dc:	00 00 00 
  80042182df:	ff d0                	callq  *%rax
  80042182e1:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042182e4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042182e7:	c1 e8 10             	shr    $0x10,%eax
  80042182ea:	83 e0 7f             	and    $0x7f,%eax
  80042182ed:	83 f8 01             	cmp    $0x1,%eax
  80042182f0:	0f 87 f2 01 00 00    	ja     80042184e8 <pci_scan_bus+0x26c>
  80042182f6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042182fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042182fe:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218305:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218309:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004218310:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218314:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800421831b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421831f:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218326:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421832a:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218331:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218335:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421833c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004218340:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421834b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218352:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218356:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421835d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218361:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218368:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  800421836f:	00 00 00 
  8004218372:	e9 48 01 00 00       	jmpq   80042184bf <pci_scan_bus+0x243>
  8004218377:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421837e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218385:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  800421838c:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218393:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800421839a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  80042183a1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042183a8:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042183af:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042183b6:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  80042183bd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042183c4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042183cb:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  80042183d2:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042183d6:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042183dd:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042183e1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042183e8:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042183ec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042183f3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042183f7:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  80042183fe:	be 00 00 00 00       	mov    $0x0,%esi
  8004218403:	48 89 c7             	mov    %rax,%rdi
  8004218406:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  800421840d:	00 00 00 
  8004218410:	ff d0                	callq  *%rax
  8004218412:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218418:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  800421841e:	0f b7 c0             	movzwl %ax,%eax
  8004218421:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218426:	0f 84 83 00 00 00    	je     80042184af <pci_scan_bus+0x233>
  800421842c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218433:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218438:	48 89 c7             	mov    %rax,%rdi
  800421843b:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  8004218442:	00 00 00 
  8004218445:	ff d0                	callq  *%rax
  8004218447:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421844a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421844d:	88 45 98             	mov    %al,-0x68(%rbp)
  8004218450:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218457:	be 08 00 00 00       	mov    $0x8,%esi
  800421845c:	48 89 c7             	mov    %rax,%rdi
  800421845f:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  8004218466:	00 00 00 
  8004218469:	ff d0                	callq  *%rax
  800421846b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218471:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  8004218478:	00 00 00 
  800421847b:	8b 00                	mov    (%rax),%eax
  800421847d:	85 c0                	test   %eax,%eax
  800421847f:	74 16                	je     8004218497 <pci_scan_bus+0x21b>
  8004218481:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218488:	48 89 c7             	mov    %rax,%rdi
  800421848b:	48 b8 ac 81 21 04 80 	movabs $0x80042181ac,%rax
  8004218492:	00 00 00 
  8004218495:	ff d0                	callq  *%rax
  8004218497:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800421849e:	48 89 c7             	mov    %rax,%rdi
  80042184a1:	48 b8 1d 81 21 04 80 	movabs $0x800421811d,%rax
  80042184a8:	00 00 00 
  80042184ab:	ff d0                	callq  *%rax
  80042184ad:	eb 01                	jmp    80042184b0 <pci_scan_bus+0x234>
  80042184af:	90                   	nop
  80042184b0:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  80042184b6:	83 c0 01             	add    $0x1,%eax
  80042184b9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  80042184bf:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  80042184c5:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042184c8:	81 e2 00 00 80 00    	and    $0x800000,%edx
  80042184ce:	85 d2                	test   %edx,%edx
  80042184d0:	74 07                	je     80042184d9 <pci_scan_bus+0x25d>
  80042184d2:	ba 08 00 00 00       	mov    $0x8,%edx
  80042184d7:	eb 05                	jmp    80042184de <pci_scan_bus+0x262>
  80042184d9:	ba 01 00 00 00       	mov    $0x1,%edx
  80042184de:	39 d0                	cmp    %edx,%eax
  80042184e0:	0f 82 91 fe ff ff    	jb     8004218377 <pci_scan_bus+0xfb>
  80042184e6:	eb 01                	jmp    80042184e9 <pci_scan_bus+0x26d>
  80042184e8:	90                   	nop
  80042184e9:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042184ec:	83 c0 01             	add    $0x1,%eax
  80042184ef:	89 45 a8             	mov    %eax,-0x58(%rbp)
  80042184f2:	8b 45 a8             	mov    -0x58(%rbp),%eax
  80042184f5:	83 f8 1f             	cmp    $0x1f,%eax
  80042184f8:	0f 86 cb fd ff ff    	jbe    80042182c9 <pci_scan_bus+0x4d>
  80042184fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218501:	c9                   	leaveq 
  8004218502:	c3                   	retq   

0000008004218503 <pci_bridge_attach>:
  8004218503:	55                   	push   %rbp
  8004218504:	48 89 e5             	mov    %rsp,%rbp
  8004218507:	48 83 ec 30          	sub    $0x30,%rsp
  800421850b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421850f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218513:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218518:	48 89 c7             	mov    %rax,%rdi
  800421851b:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  8004218522:	00 00 00 
  8004218525:	ff d0                	callq  *%rax
  8004218527:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421852a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421852e:	be 18 00 00 00       	mov    $0x18,%esi
  8004218533:	48 89 c7             	mov    %rax,%rdi
  8004218536:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  800421853d:	00 00 00 
  8004218540:	ff d0                	callq  *%rax
  8004218542:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218545:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218548:	83 e0 0f             	and    $0xf,%eax
  800421854b:	83 f8 01             	cmp    $0x1,%eax
  800421854e:	75 40                	jne    8004218590 <pci_bridge_attach+0x8d>
  8004218550:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218554:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218557:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421855b:	8b 50 08             	mov    0x8(%rax),%edx
  800421855e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218562:	48 8b 00             	mov    (%rax),%rax
  8004218565:	8b 40 08             	mov    0x8(%rax),%eax
  8004218568:	89 c6                	mov    %eax,%esi
  800421856a:	48 bf 68 b8 21 04 80 	movabs $0x800421b868,%rdi
  8004218571:	00 00 00 
  8004218574:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218579:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  8004218580:	00 00 00 
  8004218583:	41 ff d0             	callq  *%r8
  8004218586:	b8 00 00 00 00       	mov    $0x0,%eax
  800421858b:	e9 a1 00 00 00       	jmpq   8004218631 <pci_bridge_attach+0x12e>
  8004218590:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218594:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218599:	be 00 00 00 00       	mov    $0x0,%esi
  800421859e:	48 89 c7             	mov    %rax,%rdi
  80042185a1:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042185a8:	00 00 00 
  80042185ab:	ff d0                	callq  *%rax
  80042185ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042185b5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042185b8:	c1 e8 08             	shr    $0x8,%eax
  80042185bb:	0f b6 c0             	movzbl %al,%eax
  80042185be:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042185c1:	48 b8 e0 c7 22 04 80 	movabs $0x800422c7e0,%rax
  80042185c8:	00 00 00 
  80042185cb:	8b 00                	mov    (%rax),%eax
  80042185cd:	85 c0                	test   %eax,%eax
  80042185cf:	74 48                	je     8004218619 <pci_bridge_attach+0x116>
  80042185d1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042185d4:	c1 e8 10             	shr    $0x10,%eax
  80042185d7:	0f b6 f8             	movzbl %al,%edi
  80042185da:	8b 75 e8             	mov    -0x18(%rbp),%esi
  80042185dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185e1:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042185e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185e8:	8b 50 08             	mov    0x8(%rax),%edx
  80042185eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042185ef:	48 8b 00             	mov    (%rax),%rax
  80042185f2:	8b 40 08             	mov    0x8(%rax),%eax
  80042185f5:	41 89 f9             	mov    %edi,%r9d
  80042185f8:	41 89 f0             	mov    %esi,%r8d
  80042185fb:	89 c6                	mov    %eax,%esi
  80042185fd:	48 bf a0 b8 21 04 80 	movabs $0x800421b8a0,%rdi
  8004218604:	00 00 00 
  8004218607:	b8 00 00 00 00       	mov    $0x0,%eax
  800421860c:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  8004218613:	00 00 00 
  8004218616:	41 ff d2             	callq  *%r10
  8004218619:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800421861d:	48 89 c7             	mov    %rax,%rdi
  8004218620:	48 b8 7c 82 21 04 80 	movabs $0x800421827c,%rax
  8004218627:	00 00 00 
  800421862a:	ff d0                	callq  *%rax
  800421862c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218631:	c9                   	leaveq 
  8004218632:	c3                   	retq   

0000008004218633 <pci_func_enable>:
  8004218633:	55                   	push   %rbp
  8004218634:	48 89 e5             	mov    %rsp,%rbp
  8004218637:	48 83 ec 30          	sub    $0x30,%rsp
  800421863b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421863f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218643:	ba 07 00 00 00       	mov    $0x7,%edx
  8004218648:	be 04 00 00 00       	mov    $0x4,%esi
  800421864d:	48 89 c7             	mov    %rax,%rdi
  8004218650:	48 b8 d2 7f 21 04 80 	movabs $0x8004217fd2,%rax
  8004218657:	00 00 00 
  800421865a:	ff d0                	callq  *%rax
  800421865c:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004218663:	e9 f0 01 00 00       	jmpq   8004218858 <pci_func_enable+0x225>
  8004218668:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421866b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421866f:	89 d6                	mov    %edx,%esi
  8004218671:	48 89 c7             	mov    %rax,%rdi
  8004218674:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  800421867b:	00 00 00 
  800421867e:	ff d0                	callq  *%rax
  8004218680:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004218683:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  800421868a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421868d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218691:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004218696:	89 ce                	mov    %ecx,%esi
  8004218698:	48 89 c7             	mov    %rax,%rdi
  800421869b:	48 b8 d2 7f 21 04 80 	movabs $0x8004217fd2,%rax
  80042186a2:	00 00 00 
  80042186a5:	ff d0                	callq  *%rax
  80042186a7:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042186aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042186ae:	89 d6                	mov    %edx,%esi
  80042186b0:	48 89 c7             	mov    %rax,%rdi
  80042186b3:	48 b8 7c 7f 21 04 80 	movabs $0x8004217f7c,%rax
  80042186ba:	00 00 00 
  80042186bd:	ff d0                	callq  *%rax
  80042186bf:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042186c2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  80042186c6:	0f 84 85 01 00 00    	je     8004218851 <pci_func_enable+0x21e>
  80042186cc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042186cf:	83 e8 10             	sub    $0x10,%eax
  80042186d2:	c1 e8 02             	shr    $0x2,%eax
  80042186d5:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042186d8:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042186db:	83 e0 01             	and    $0x1,%eax
  80042186de:	85 c0                	test   %eax,%eax
  80042186e0:	75 65                	jne    8004218747 <pci_func_enable+0x114>
  80042186e2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042186e5:	83 e0 06             	and    $0x6,%eax
  80042186e8:	83 f8 04             	cmp    $0x4,%eax
  80042186eb:	75 07                	jne    80042186f4 <pci_func_enable+0xc1>
  80042186ed:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042186f4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042186f7:	83 e0 f0             	and    $0xfffffff0,%eax
  80042186fa:	f7 d8                	neg    %eax
  80042186fc:	23 45 e8             	and    -0x18(%rbp),%eax
  80042186ff:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218702:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218705:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218708:	83 e0 f0             	and    $0xfffffff0,%eax
  800421870b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421870e:	48 b8 a0 d5 69 04 80 	movabs $0x800469d5a0,%rax
  8004218715:	00 00 00 
  8004218718:	8b 00                	mov    (%rax),%eax
  800421871a:	85 c0                	test   %eax,%eax
  800421871c:	74 7a                	je     8004218798 <pci_func_enable+0x165>
  800421871e:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218721:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218724:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218727:	89 c6                	mov    %eax,%esi
  8004218729:	48 bf d0 b8 21 04 80 	movabs $0x800421b8d0,%rdi
  8004218730:	00 00 00 
  8004218733:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218738:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  800421873f:	00 00 00 
  8004218742:	41 ff d0             	callq  *%r8
  8004218745:	eb 51                	jmp    8004218798 <pci_func_enable+0x165>
  8004218747:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421874a:	83 e0 fc             	and    $0xfffffffc,%eax
  800421874d:	f7 d8                	neg    %eax
  800421874f:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218752:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218755:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218758:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421875b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421875e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218761:	48 b8 a0 d5 69 04 80 	movabs $0x800469d5a0,%rax
  8004218768:	00 00 00 
  800421876b:	8b 00                	mov    (%rax),%eax
  800421876d:	85 c0                	test   %eax,%eax
  800421876f:	74 27                	je     8004218798 <pci_func_enable+0x165>
  8004218771:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218774:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218777:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421877a:	89 c6                	mov    %eax,%esi
  800421877c:	48 bf f8 b8 21 04 80 	movabs $0x800421b8f8,%rdi
  8004218783:	00 00 00 
  8004218786:	b8 00 00 00 00       	mov    $0x0,%eax
  800421878b:	49 b8 d4 95 20 04 80 	movabs $0x80042095d4,%r8
  8004218792:	00 00 00 
  8004218795:	41 ff d0             	callq  *%r8
  8004218798:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421879b:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421879e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187a2:	89 ce                	mov    %ecx,%esi
  80042187a4:	48 89 c7             	mov    %rax,%rdi
  80042187a7:	48 b8 d2 7f 21 04 80 	movabs $0x8004217fd2,%rax
  80042187ae:	00 00 00 
  80042187b1:	ff d0                	callq  *%rax
  80042187b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187b7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042187ba:	48 63 d2             	movslq %edx,%rdx
  80042187bd:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  80042187c1:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042187c4:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  80042187c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187cc:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042187cf:	48 63 d2             	movslq %edx,%rdx
  80042187d2:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  80042187d6:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042187d9:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042187dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042187e0:	74 70                	je     8004218852 <pci_func_enable+0x21f>
  80042187e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042187e6:	75 6a                	jne    8004218852 <pci_func_enable+0x21f>
  80042187e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187ec:	8b 40 10             	mov    0x10(%rax),%eax
  80042187ef:	c1 e8 10             	shr    $0x10,%eax
  80042187f2:	41 89 c0             	mov    %eax,%r8d
  80042187f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042187f9:	8b 40 10             	mov    0x10(%rax),%eax
  80042187fc:	0f b7 f8             	movzwl %ax,%edi
  80042187ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218803:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218806:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421880a:	8b 50 08             	mov    0x8(%rax),%edx
  800421880d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218811:	48 8b 00             	mov    (%rax),%rax
  8004218814:	8b 40 08             	mov    0x8(%rax),%eax
  8004218817:	48 83 ec 08          	sub    $0x8,%rsp
  800421881b:	8b 75 f0             	mov    -0x10(%rbp),%esi
  800421881e:	56                   	push   %rsi
  800421881f:	8b 75 f4             	mov    -0xc(%rbp),%esi
  8004218822:	56                   	push   %rsi
  8004218823:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004218826:	56                   	push   %rsi
  8004218827:	45 89 c1             	mov    %r8d,%r9d
  800421882a:	41 89 f8             	mov    %edi,%r8d
  800421882d:	89 c6                	mov    %eax,%esi
  800421882f:	48 bf 20 b9 21 04 80 	movabs $0x800421b920,%rdi
  8004218836:	00 00 00 
  8004218839:	b8 00 00 00 00       	mov    $0x0,%eax
  800421883e:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  8004218845:	00 00 00 
  8004218848:	41 ff d2             	callq  *%r10
  800421884b:	48 83 c4 20          	add    $0x20,%rsp
  800421884f:	eb 01                	jmp    8004218852 <pci_func_enable+0x21f>
  8004218851:	90                   	nop
  8004218852:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218855:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004218858:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  800421885c:	0f 86 06 fe ff ff    	jbe    8004218668 <pci_func_enable+0x35>
  8004218862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218866:	8b 40 10             	mov    0x10(%rax),%eax
  8004218869:	c1 e8 10             	shr    $0x10,%eax
  800421886c:	89 c7                	mov    %eax,%edi
  800421886e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218872:	8b 40 10             	mov    0x10(%rax),%eax
  8004218875:	0f b7 f0             	movzwl %ax,%esi
  8004218878:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421887c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421887f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218883:	8b 50 08             	mov    0x8(%rax),%edx
  8004218886:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421888a:	48 8b 00             	mov    (%rax),%rax
  800421888d:	8b 40 08             	mov    0x8(%rax),%eax
  8004218890:	41 89 f9             	mov    %edi,%r9d
  8004218893:	41 89 f0             	mov    %esi,%r8d
  8004218896:	89 c6                	mov    %eax,%esi
  8004218898:	48 bf 80 b9 21 04 80 	movabs $0x800421b980,%rdi
  800421889f:	00 00 00 
  80042188a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188a7:	49 ba d4 95 20 04 80 	movabs $0x80042095d4,%r10
  80042188ae:	00 00 00 
  80042188b1:	41 ff d2             	callq  *%r10
  80042188b4:	90                   	nop
  80042188b5:	c9                   	leaveq 
  80042188b6:	c3                   	retq   

00000080042188b7 <pci_init>:
  80042188b7:	55                   	push   %rbp
  80042188b8:	48 89 e5             	mov    %rsp,%rbp
  80042188bb:	ba 10 00 00 00       	mov    $0x10,%edx
  80042188c0:	be 00 00 00 00       	mov    $0x0,%esi
  80042188c5:	48 bf b0 d5 69 04 80 	movabs $0x800469d5b0,%rdi
  80042188cc:	00 00 00 
  80042188cf:	48 b8 61 01 21 04 80 	movabs $0x8004210161,%rax
  80042188d6:	00 00 00 
  80042188d9:	ff d0                	callq  *%rax
  80042188db:	48 bf b0 d5 69 04 80 	movabs $0x800469d5b0,%rdi
  80042188e2:	00 00 00 
  80042188e5:	48 b8 7c 82 21 04 80 	movabs $0x800421827c,%rax
  80042188ec:	00 00 00 
  80042188ef:	ff d0                	callq  *%rax
  80042188f1:	5d                   	pop    %rbp
  80042188f2:	c3                   	retq   

00000080042188f3 <time_init>:
  80042188f3:	55                   	push   %rbp
  80042188f4:	48 89 e5             	mov    %rsp,%rbp
  80042188f7:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  80042188fe:	00 00 00 
  8004218901:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218907:	90                   	nop
  8004218908:	5d                   	pop    %rbp
  8004218909:	c3                   	retq   

000000800421890a <time_tick>:
  800421890a:	55                   	push   %rbp
  800421890b:	48 89 e5             	mov    %rsp,%rbp
  800421890e:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218915:	00 00 00 
  8004218918:	8b 00                	mov    (%rax),%eax
  800421891a:	8d 50 01             	lea    0x1(%rax),%edx
  800421891d:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218924:	00 00 00 
  8004218927:	89 10                	mov    %edx,(%rax)
  8004218929:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218930:	00 00 00 
  8004218933:	8b 10                	mov    (%rax),%edx
  8004218935:	89 d0                	mov    %edx,%eax
  8004218937:	c1 e0 02             	shl    $0x2,%eax
  800421893a:	01 d0                	add    %edx,%eax
  800421893c:	01 c0                	add    %eax,%eax
  800421893e:	89 c2                	mov    %eax,%edx
  8004218940:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218947:	00 00 00 
  800421894a:	8b 00                	mov    (%rax),%eax
  800421894c:	39 c2                	cmp    %eax,%edx
  800421894e:	73 2a                	jae    800421897a <time_tick+0x70>
  8004218950:	48 ba af b9 21 04 80 	movabs $0x800421b9af,%rdx
  8004218957:	00 00 00 
  800421895a:	be 14 00 00 00       	mov    $0x14,%esi
  800421895f:	48 bf ca b9 21 04 80 	movabs $0x800421b9ca,%rdi
  8004218966:	00 00 00 
  8004218969:	b8 00 00 00 00       	mov    $0x0,%eax
  800421896e:	48 b9 ec 05 20 04 80 	movabs $0x80042005ec,%rcx
  8004218975:	00 00 00 
  8004218978:	ff d1                	callq  *%rcx
  800421897a:	90                   	nop
  800421897b:	5d                   	pop    %rbp
  800421897c:	c3                   	retq   

000000800421897d <time_msec>:
  800421897d:	55                   	push   %rbp
  800421897e:	48 89 e5             	mov    %rsp,%rbp
  8004218981:	48 b8 c0 d5 69 04 80 	movabs $0x800469d5c0,%rax
  8004218988:	00 00 00 
  800421898b:	8b 10                	mov    (%rax),%edx
  800421898d:	89 d0                	mov    %edx,%eax
  800421898f:	c1 e0 02             	shl    $0x2,%eax
  8004218992:	01 d0                	add    %edx,%eax
  8004218994:	01 c0                	add    %eax,%eax
  8004218996:	5d                   	pop    %rbp
  8004218997:	c3                   	retq   
